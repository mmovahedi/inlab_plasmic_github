// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: J2d--RhwPuEt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import RedirectToHomepage from "../../RedirectToHomepage"; // plasmic-import: x1Fxn6tnPsJ0/component
import Alert from "../../Alert"; // plasmic-import: a9E2wGEF0Qy9/component
import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import ShareTool from "../../ShareTool"; // plasmic-import: B3T4IwC_PpNX/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicInlabLogin.module.css"; // plasmic-import: J2d--RhwPuEt/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: qdjybZJw3tm3/icon
import MdiaccountIcon from "./icons/PlasmicIcon__Mdiaccount"; // plasmic-import: mC78MSouMgiO/icon
import Icons8ClosesvgIcon from "./icons/PlasmicIcon__Icons8Closesvg"; // plasmic-import: -xG_spDBispP/icon
import LockPasswordSvgrepoComsvgIcon from "./icons/PlasmicIcon__LockPasswordSvgrepoComsvg"; // plasmic-import: 2bxvHhfddyLp/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicInlabLogin__VariantMembers = {
  disabledLoginButton: "disabledLoginButton";
  wrongUser: "wrongUser";
};
export type PlasmicInlabLogin__VariantsArgs = {
  disabledLoginButton?: SingleBooleanChoiceArg<"disabledLoginButton">;
  wrongUser?: SingleBooleanChoiceArg<"wrongUser">;
};
type VariantPropType = keyof PlasmicInlabLogin__VariantsArgs;
export const PlasmicInlabLogin__VariantProps = new Array<VariantPropType>(
  "disabledLoginButton",
  "wrongUser"
);

export type PlasmicInlabLogin__ArgsType = {};
type ArgPropType = keyof PlasmicInlabLogin__ArgsType;
export const PlasmicInlabLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicInlabLogin__OverridesType = {
  inlabLogin?: Flex__<"div">;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  redirectToHomepage?: Flex__<typeof RedirectToHomepage>;
  inlabInlabPlusAccountSimilarityAnnouncement?: Flex__<"div">;
  alert?: Flex__<typeof Alert>;
  pageContent?: Flex__<"div">;
  username?: Flex__<typeof TextInput>;
  password?: Flex__<typeof TextInput>;
  loginButton?: Flex__<typeof Button>;
  createAccountResetPassword?: Flex__<"div">;
  resetPassword?: Flex__<typeof Button>;
  createAccount?: Flex__<typeof Button>;
  shareTool?: Flex__<typeof ShareTool>;
};

export interface DefaultInlabLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInlabLogin__RenderFunc(props: {
  variants: PlasmicInlabLogin__VariantsArgs;
  args: PlasmicInlabLogin__ArgsType;
  overrides: PlasmicInlabLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "username.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "resetPassword.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "disabledLoginButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.disabledLoginButton
      },
      {
        path: "loginButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "disabledLoginButton", "disabledLoginButton")
            ? "isDisabled"
            : undefined
      },
      {
        path: "wrongUser",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.wrongUser
      },
      {
        path: "loginButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resetPassword.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resetPassword.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createAccount.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createAccount.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createAccount.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resetPassword.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createAccount.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resetPassword.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createAccount.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"inlabLogin"}
        data-plasmic-override={overrides.inlabLogin}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.inlabLogin,
          {
            [sty.inlabLogindisabledLoginButton]: hasVariant(
              $state,
              "disabledLoginButton",
              "disabledLoginButton"
            ),
            [sty.inlabLoginwrongUser]: hasVariant(
              $state,
              "wrongUser",
              "wrongUser"
            ),
            [sty.inlabLoginwrongUser_disabledLoginButton]:
              hasVariant($state, "wrongUser", "wrongUser") &&
              hasVariant($state, "disabledLoginButton", "disabledLoginButton")
          }
        )}
      >
        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <RedirectToHomepage
          data-plasmic-name={"redirectToHomepage"}
          data-plasmic-override={overrides.redirectToHomepage}
          className={classNames("__wab_instance", sty.redirectToHomepage)}
        />

        <div
          data-plasmic-name={"inlabInlabPlusAccountSimilarityAnnouncement"}
          data-plasmic-override={
            overrides.inlabInlabPlusAccountSimilarityAnnouncement
          }
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.inlabInlabPlusAccountSimilarityAnnouncement,
            {
              [sty.inlabInlabPlusAccountSimilarityAnnouncementdisabledLoginButton]:
                hasVariant(
                  $state,
                  "disabledLoginButton",
                  "disabledLoginButton"
                ),
              [sty.inlabInlabPlusAccountSimilarityAnnouncementwrongUser]:
                hasVariant($state, "wrongUser", "wrongUser"),
              [sty.inlabInlabPlusAccountSimilarityAnnouncementwrongUser_disabledLoginButton]:
                hasVariant(
                  $state,
                  "disabledLoginButton",
                  "disabledLoginButton"
                ) && hasVariant($state, "wrongUser", "wrongUser")
            }
          )}
        >
          {
            "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0634\u0645\u0627 \u062f\u0631 \u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633 \u0628\u0627 \u0627\u06cc\u0646\u0644\u0628 \u06cc\u06a9\u0633\u0627\u0646 \u0627\u0633\u062a"
          }
        </div>
        <Alert
          data-plasmic-name={"alert"}
          data-plasmic-override={overrides.alert}
          className={classNames("__wab_instance", sty.alert)}
          header={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hvY3
              )}
            >
              {
                "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0634\u0645\u0627 \u062f\u0631 \u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633 \u0628\u0627 \u0627\u06cc\u0646\u0644\u0628 \u06cc\u06a9\u0633\u0627\u0646 \u0627\u0633\u062a"
              }
            </div>
          }
          icon={
            <Icon6Icon
              className={classNames(projectcss.all, sty.svg__ptCLr)}
              role={"img"}
            />
          }
          informationNoDescription={true}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"pageContent"}
          data-plasmic-override={overrides.pageContent}
          hasGap={true}
          className={classNames(projectcss.all, sty.pageContent, {
            [sty.pageContentdisabledLoginButton]: hasVariant(
              $state,
              "disabledLoginButton",
              "disabledLoginButton"
            ),
            [sty.pageContentwrongUser]: hasVariant(
              $state,
              "wrongUser",
              "wrongUser"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zvBgx
            )}
          >
            {
              "\u0628\u0647 \u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633 \u062e\u0648\u0634 \u0622\u0645\u062f\u06cc\u062f "
            }
          </div>
          <TextInput
            data-plasmic-name={"username"}
            data-plasmic-override={overrides.username}
            className={classNames("__wab_instance", sty.username, {
              [sty.usernamedisabledLoginButton]: hasVariant(
                $state,
                "disabledLoginButton",
                "disabledLoginButton"
              )
            })}
            endIcon={
              $state.username.value !== "" ? (
                <Icons8ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__sIovl)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUsernameValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["username", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUsernameValue"] != null &&
                      typeof $steps["updateUsernameValue"] === "object" &&
                      typeof $steps["updateUsernameValue"].then === "function"
                    ) {
                      $steps["updateUsernameValue"] = await $steps[
                        "updateUsernameValue"
                      ];
                    }
                  }}
                  role={"img"}
                />
              ) : null
            }
            error={(() => {
              try {
                return $state.wrongUser;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            name={``}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["username", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={
              "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
            }
            required={false}
            showStartIcon={true}
            startIcon={
              <MdiaccountIcon
                className={classNames(projectcss.all, sty.svg__falId)}
                role={"img"}
              />
            }
            type={"text"}
            value={generateStateValueProp($state, ["username", "value"]) ?? ""}
          />

          <TextInput
            data-plasmic-name={"password"}
            data-plasmic-override={overrides.password}
            aria-label={``}
            autoFocus={false}
            className={classNames("__wab_instance", sty.password, {
              [sty.passworddisabledLoginButton]: hasVariant(
                $state,
                "disabledLoginButton",
                "disabledLoginButton"
              )
            })}
            endIcon={
              $state.password.value !== "" ? (
                <Icons8ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__lOk9F)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePasswordValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["password", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePasswordValue"] != null &&
                      typeof $steps["updatePasswordValue"] === "object" &&
                      typeof $steps["updatePasswordValue"].then === "function"
                    ) {
                      $steps["updatePasswordValue"] = await $steps[
                        "updatePasswordValue"
                      ];
                    }
                  }}
                  role={"img"}
                />
              ) : null
            }
            error={(() => {
              try {
                return $state.wrongUser;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["password", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"}
            required={false}
            showStartIcon={true}
            startIcon={
              <LockPasswordSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__fnFNb)}
                role={"img"}
              />
            }
            type={"password"}
            value={generateStateValueProp($state, ["password", "value"]) ?? ""}
          />

          {(() => {
            try {
              return $state.wrongUser;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rvtSi
              )}
            >
              {
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0627\u0634\u062a\u0628\u0627\u0647 \u0627\u0633\u062a."
              }
            </div>
          ) : null}
          <Button
            data-plasmic-name={"loginButton"}
            data-plasmic-override={overrides.loginButton}
            className={classNames("__wab_instance", sty.loginButton, {
              [sty.loginButtondisabledLoginButton]: hasVariant(
                $state,
                "disabledLoginButton",
                "disabledLoginButton"
              ),
              [sty.loginButtonwrongUser]: hasVariant(
                $state,
                "wrongUser",
                "wrongUser"
              )
            })}
            color={"blue"}
            deselected={generateStateValueProp($state, [
              "loginButton",
              "deselected"
            ])}
            isDisabled={generateStateValueProp($state, [
              "loginButton",
              "isDisabled"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["disablerLoginButton"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "disabledLoginButton",
                      operation: 4
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, true);
                      return true;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["disablerLoginButton"] != null &&
                typeof $steps["disablerLoginButton"] === "object" &&
                typeof $steps["disablerLoginButton"].then === "function"
              ) {
                $steps["disablerLoginButton"] = await $steps[
                  "disablerLoginButton"
                ];
              }

              $steps["loginAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $state.username.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return $state.password.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["AuthGlobalContext.login"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["loginAction"] != null &&
                typeof $steps["loginAction"] === "object" &&
                typeof $steps["loginAction"].then === "function"
              ) {
                $steps["loginAction"] = await $steps["loginAction"];
              }

              $steps["goToNamespacesSelection"] =
                $steps.loginAction.status === 200
                  ? (() => {
                      const actionArgs = {
                        destination: `/user/setting/namespace`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToNamespacesSelection"] != null &&
                typeof $steps["goToNamespacesSelection"] === "object" &&
                typeof $steps["goToNamespacesSelection"].then === "function"
              ) {
                $steps["goToNamespacesSelection"] = await $steps[
                  "goToNamespacesSelection"
                ];
              }

              $steps["wrongUser"] =
                $steps.loginAction.status !== 200
                  ? (() => {
                      const actionArgs = { vgroup: "wrongUser", operation: 4 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["wrongUser"] != null &&
                typeof $steps["wrongUser"] === "object" &&
                typeof $steps["wrongUser"].then === "function"
              ) {
                $steps["wrongUser"] = await $steps["wrongUser"];
              }

              $steps["enablerLoginButton"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "disabledLoginButton",
                      operation: 6
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["enablerLoginButton"] != null &&
                typeof $steps["enablerLoginButton"] === "object" &&
                typeof $steps["enablerLoginButton"].then === "function"
              ) {
                $steps["enablerLoginButton"] = await $steps[
                  "enablerLoginButton"
                ];
              }
            }}
            onDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["loginButton", "deselected"])(
                eventArgs[0]
              );
            }}
            onIsDisabledChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["loginButton", "isDisabled"])(
                eventArgs[0]
              );
            }}
            onSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["loginButton", "selected"])(
                eventArgs[0]
              );
            }}
            onSortDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "loginButton",
                "sortDeselected"
              ])(eventArgs[0]);
            }}
            onSortSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "loginButton",
                "sortSelected"
              ])(eventArgs[0]);
            }}
            selected={generateStateValueProp($state, [
              "loginButton",
              "selected"
            ])}
            shape={"rounded"}
            sortDeselected={generateStateValueProp($state, [
              "loginButton",
              "sortDeselected"
            ])}
            sortSelected={generateStateValueProp($state, [
              "loginButton",
              "sortSelected"
            ])}
            submitsForm={false}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gSrrw,
                {
                  [sty.textdisabledLoginButton__gSrrwc590N]: hasVariant(
                    $state,
                    "disabledLoginButton",
                    "disabledLoginButton"
                  )
                }
              )}
            >
              {hasVariant($state, "disabledLoginButton", "disabledLoginButton")
                ? "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                : "\u0648\u0631\u0648\u062f \u0628\u0647 \u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633"}
            </div>
          </Button>
          <div
            data-plasmic-name={"createAccountResetPassword"}
            data-plasmic-override={overrides.createAccountResetPassword}
            className={classNames(
              projectcss.all,
              sty.createAccountResetPassword
            )}
          >
            <Button
              data-plasmic-name={"resetPassword"}
              data-plasmic-override={overrides.resetPassword}
              className={classNames("__wab_instance", sty.resetPassword, {
                [sty.resetPassworddisabledLoginButton]: hasVariant(
                  $state,
                  "disabledLoginButton",
                  "disabledLoginButton"
                )
              })}
              color={"clear"}
              deselected={generateStateValueProp($state, [
                "resetPassword",
                "deselected"
              ])}
              isDisabled={generateStateValueProp($state, [
                "resetPassword",
                "isDisabled"
              ])}
              link={
                "https://docs.google.com/forms/d/e/1FAIpQLSe4wNlYlhx_5dvlGE28gca-nJLO_zxGxiMsvPXEjuDz5Xb1_w/viewform"
              }
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "resetPassword",
                  "deselected"
                ])(eventArgs[0]);
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "resetPassword",
                  "isDisabled"
                ])(eventArgs[0]);
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "resetPassword",
                  "selected"
                ])(eventArgs[0]);
              }}
              onSortDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "resetPassword",
                  "sortDeselected"
                ])(eventArgs[0]);
              }}
              onSortSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "resetPassword",
                  "sortSelected"
                ])(eventArgs[0]);
              }}
              selected={generateStateValueProp($state, [
                "resetPassword",
                "selected"
              ])}
              sortDeselected={generateStateValueProp($state, [
                "resetPassword",
                "sortDeselected"
              ])}
              sortSelected={generateStateValueProp($state, [
                "resetPassword",
                "sortSelected"
              ])}
              target={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o1JqL
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["resetPassword"] = true
                    ? (() => {
                        const actionArgs = {
                          destination:
                            "https://docs.google.com/forms/d/e/1FAIpQLScmvuKNhINyeNxRDBA6NRMSCqzl5NCC60Hbkqa6X42kIhXGKQ/viewform?usp=sf_link"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["resetPassword"] != null &&
                    typeof $steps["resetPassword"] === "object" &&
                    typeof $steps["resetPassword"].then === "function"
                  ) {
                    $steps["resetPassword"] = await $steps["resetPassword"];
                  }
                }}
              >
                {
                  "\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                }
              </div>
            </Button>
            <Button
              data-plasmic-name={"createAccount"}
              data-plasmic-override={overrides.createAccount}
              className={classNames("__wab_instance", sty.createAccount, {
                [sty.createAccountdisabledLoginButton]: hasVariant(
                  $state,
                  "disabledLoginButton",
                  "disabledLoginButton"
                )
              })}
              color={"clear"}
              deselected={generateStateValueProp($state, [
                "createAccount",
                "deselected"
              ])}
              isDisabled={generateStateValueProp($state, [
                "createAccount",
                "isDisabled"
              ])}
              link={
                "https://docs.google.com/forms/d/e/1FAIpQLSe4wNlYlhx_5dvlGE28gca-nJLO_zxGxiMsvPXEjuDz5Xb1_w/viewform"
              }
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "createAccount",
                  "deselected"
                ])(eventArgs[0]);
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "createAccount",
                  "isDisabled"
                ])(eventArgs[0]);
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "createAccount",
                  "selected"
                ])(eventArgs[0]);
              }}
              onSortDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "createAccount",
                  "sortDeselected"
                ])(eventArgs[0]);
              }}
              onSortSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "createAccount",
                  "sortSelected"
                ])(eventArgs[0]);
              }}
              selected={generateStateValueProp($state, [
                "createAccount",
                "selected"
              ])}
              sortDeselected={generateStateValueProp($state, [
                "createAccount",
                "sortDeselected"
              ])}
              sortSelected={generateStateValueProp($state, [
                "createAccount",
                "sortSelected"
              ])}
              target={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j140
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["createAccount"] = true
                    ? (() => {
                        const actionArgs = {
                          destination:
                            "https://docs.google.com/forms/d/e/1FAIpQLScmvuKNhINyeNxRDBA6NRMSCqzl5NCC60Hbkqa6X42kIhXGKQ/viewform?usp=sf_link"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["createAccount"] != null &&
                    typeof $steps["createAccount"] === "object" &&
                    typeof $steps["createAccount"].then === "function"
                  ) {
                    $steps["createAccount"] = await $steps["createAccount"];
                  }
                }}
              >
                {
                  "\u0633\u0627\u062e\u062a \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                }
              </div>
            </Button>
          </div>
          <ShareTool
            data-plasmic-name={"shareTool"}
            data-plasmic-override={overrides.shareTool}
            className={classNames("__wab_instance", sty.shareTool)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  inlabLogin: [
    "inlabLogin",
    "redirectToNamespaceSelection",
    "redirectToHomepage",
    "inlabInlabPlusAccountSimilarityAnnouncement",
    "alert",
    "pageContent",
    "username",
    "password",
    "loginButton",
    "createAccountResetPassword",
    "resetPassword",
    "createAccount",
    "shareTool"
  ],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  redirectToHomepage: ["redirectToHomepage"],
  inlabInlabPlusAccountSimilarityAnnouncement: [
    "inlabInlabPlusAccountSimilarityAnnouncement"
  ],
  alert: ["alert"],
  pageContent: [
    "pageContent",
    "username",
    "password",
    "loginButton",
    "createAccountResetPassword",
    "resetPassword",
    "createAccount",
    "shareTool"
  ],
  username: ["username"],
  password: ["password"],
  loginButton: ["loginButton"],
  createAccountResetPassword: [
    "createAccountResetPassword",
    "resetPassword",
    "createAccount"
  ],
  resetPassword: ["resetPassword"],
  createAccount: ["createAccount"],
  shareTool: ["shareTool"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  inlabLogin: "div";
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  redirectToHomepage: typeof RedirectToHomepage;
  inlabInlabPlusAccountSimilarityAnnouncement: "div";
  alert: typeof Alert;
  pageContent: "div";
  username: typeof TextInput;
  password: typeof TextInput;
  loginButton: typeof Button;
  createAccountResetPassword: "div";
  resetPassword: typeof Button;
  createAccount: typeof Button;
  shareTool: typeof ShareTool;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInlabLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInlabLogin__VariantsArgs;
    args?: PlasmicInlabLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInlabLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInlabLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInlabLogin__ArgProps,
          internalVariantPropNames: PlasmicInlabLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInlabLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "inlabLogin") {
    func.displayName = "PlasmicInlabLogin";
  } else {
    func.displayName = `PlasmicInlabLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicInlabLogin = Object.assign(
  // Top-level PlasmicInlabLogin renders the root element
  makeNodeComponent("inlabLogin"),
  {
    // Helper components rendering sub-elements
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    redirectToHomepage: makeNodeComponent("redirectToHomepage"),
    inlabInlabPlusAccountSimilarityAnnouncement: makeNodeComponent(
      "inlabInlabPlusAccountSimilarityAnnouncement"
    ),
    alert: makeNodeComponent("alert"),
    pageContent: makeNodeComponent("pageContent"),
    username: makeNodeComponent("username"),
    password: makeNodeComponent("password"),
    loginButton: makeNodeComponent("loginButton"),
    createAccountResetPassword: makeNodeComponent("createAccountResetPassword"),
    resetPassword: makeNodeComponent("resetPassword"),
    createAccount: makeNodeComponent("createAccount"),
    shareTool: makeNodeComponent("shareTool"),

    // Metadata about props expected for PlasmicInlabLogin
    internalVariantProps: PlasmicInlabLogin__VariantProps,
    internalArgProps: PlasmicInlabLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInlabLogin;
/* prettier-ignore-end */
