// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: J2d--RhwPuEt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import RedirectInlabLoginToNamespaceSelection from "../../RedirectInlabLoginToNamespaceSelection"; // plasmic-import: Y1uAoiZCKyAg/component
import RedirectInlabLoginToHomepage from "../../RedirectInlabLoginToHomepage"; // plasmic-import: VQNRVvXObcnc/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicInlabLogin.module.css"; // plasmic-import: J2d--RhwPuEt/css

import MdiaccountIcon from "./icons/PlasmicIcon__Mdiaccount"; // plasmic-import: mC78MSouMgiO/icon
import Icons8ClosesvgIcon from "./icons/PlasmicIcon__Icons8Closesvg"; // plasmic-import: -xG_spDBispP/icon
import LockPasswordSvgrepoComsvgIcon from "./icons/PlasmicIcon__LockPasswordSvgrepoComsvg"; // plasmic-import: 2bxvHhfddyLp/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicInlabLogin__VariantMembers = {
  disabledLoginButton: "disabledLoginButton";
};
export type PlasmicInlabLogin__VariantsArgs = {
  disabledLoginButton?: SingleBooleanChoiceArg<"disabledLoginButton">;
};
type VariantPropType = keyof PlasmicInlabLogin__VariantsArgs;
export const PlasmicInlabLogin__VariantProps = new Array<VariantPropType>(
  "disabledLoginButton"
);

export type PlasmicInlabLogin__ArgsType = {};
type ArgPropType = keyof PlasmicInlabLogin__ArgsType;
export const PlasmicInlabLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicInlabLogin__OverridesType = {
  inlabLogin?: Flex__<"div">;
  pageContent?: Flex__<"div">;
  username?: Flex__<typeof TextInput>;
  password?: Flex__<typeof TextInput>;
  loadingSupportedLoginButton?: Flex__<typeof LoadingBoundary>;
  loginButton?: Flex__<typeof Button>;
  resetPassword?: Flex__<typeof Button>;
  redirectInlabLoginToNamespaceSelection?: Flex__<
    typeof RedirectInlabLoginToNamespaceSelection
  >;
  redirectInlabLoginToHomepage?: Flex__<typeof RedirectInlabLoginToHomepage>;
};

export interface DefaultInlabLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInlabLogin__RenderFunc(props: {
  variants: PlasmicInlabLogin__VariantsArgs;
  args: PlasmicInlabLogin__ArgsType;
  overrides: PlasmicInlabLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "username.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "resetPassword.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "disabledLoginButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.disabledLoginButton
      },
      {
        path: "loginButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "disabledLoginButton", "disabledLoginButton")
            ? "isDisabled"
            : undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"inlabLogin"}
        data-plasmic-override={overrides.inlabLogin}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.inlabLogin,
          {
            [sty.inlabLogindisabledLoginButton]: hasVariant(
              $state,
              "disabledLoginButton",
              "disabledLoginButton"
            )
          }
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"pageContent"}
          data-plasmic-override={overrides.pageContent}
          hasGap={true}
          className={classNames(projectcss.all, sty.pageContent, {
            [sty.pageContentdisabledLoginButton]: hasVariant(
              $state,
              "disabledLoginButton",
              "disabledLoginButton"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zvBgx
            )}
          >
            {
              "\u0628\u0647 \u0627\u06cc\u0646\u0644\u0628 \u062e\u0648\u0634 \u0622\u0645\u062f\u06cc\u062f "
            }
          </div>
          <TextInput
            data-plasmic-name={"username"}
            data-plasmic-override={overrides.username}
            aria-label={``}
            autoFocus={false}
            className={classNames("__wab_instance", sty.username, {
              [sty.usernamedisabledLoginButton]: hasVariant(
                $state,
                "disabledLoginButton",
                "disabledLoginButton"
              )
            })}
            endIcon={
              $state.username.value !== "" ? (
                <Icons8ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__sIovl)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUsernameValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["username", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUsernameValue"] != null &&
                      typeof $steps["updateUsernameValue"] === "object" &&
                      typeof $steps["updateUsernameValue"].then === "function"
                    ) {
                      $steps["updateUsernameValue"] = await $steps[
                        "updateUsernameValue"
                      ];
                    }
                  }}
                  role={"img"}
                />
              ) : null
            }
            name={``}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["username", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={
              "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
            }
            required={false}
            showStartIcon={true}
            startIcon={
              <MdiaccountIcon
                className={classNames(projectcss.all, sty.svg__falId)}
                role={"img"}
              />
            }
            type={"text"}
            value={generateStateValueProp($state, ["username", "value"]) ?? ""}
          />

          <TextInput
            data-plasmic-name={"password"}
            data-plasmic-override={overrides.password}
            aria-label={``}
            autoFocus={false}
            className={classNames("__wab_instance", sty.password, {
              [sty.passworddisabledLoginButton]: hasVariant(
                $state,
                "disabledLoginButton",
                "disabledLoginButton"
              )
            })}
            endIcon={
              $state.password.value !== "" ? (
                <Icons8ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__lOk9F)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePasswordValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["password", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePasswordValue"] != null &&
                      typeof $steps["updatePasswordValue"] === "object" &&
                      typeof $steps["updatePasswordValue"].then === "function"
                    ) {
                      $steps["updatePasswordValue"] = await $steps[
                        "updatePasswordValue"
                      ];
                    }
                  }}
                  role={"img"}
                />
              ) : null
            }
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["password", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"}
            required={false}
            showStartIcon={true}
            startIcon={
              <LockPasswordSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__fnFNb)}
                role={"img"}
              />
            }
            type={"password"}
            value={generateStateValueProp($state, ["password", "value"]) ?? ""}
          />

          <LoadingBoundary
            data-plasmic-name={"loadingSupportedLoginButton"}
            data-plasmic-override={overrides.loadingSupportedLoginButton}
            className={classNames(
              "__wab_instance",
              sty.loadingSupportedLoginButton
            )}
            loadingState={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__daKnA
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
          >
            <DataCtxReader__>
              {$ctx => (
                <Button
                  data-plasmic-name={"loginButton"}
                  data-plasmic-override={overrides.loginButton}
                  className={classNames("__wab_instance", sty.loginButton, {
                    [sty.loginButtondisabledLoginButton]: hasVariant(
                      $state,
                      "disabledLoginButton",
                      "disabledLoginButton"
                    )
                  })}
                  color={"blue"}
                  isDisabled={generateStateValueProp($state, [
                    "loginButton",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["disablerLoginButton"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "disabledLoginButton",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["disablerLoginButton"] != null &&
                      typeof $steps["disablerLoginButton"] === "object" &&
                      typeof $steps["disablerLoginButton"].then === "function"
                    ) {
                      $steps["disablerLoginButton"] = await $steps[
                        "disablerLoginButton"
                      ];
                    }

                    $steps["loginAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $state.username.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.password.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "AuthGlobalContext.login"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["loginAction"] != null &&
                      typeof $steps["loginAction"] === "object" &&
                      typeof $steps["loginAction"].then === "function"
                    ) {
                      $steps["loginAction"] = await $steps["loginAction"];
                    }

                    $steps["goToNamespacesSelection"] =
                      $steps.loginAction.status === 200
                        ? (() => {
                            const actionArgs = {
                              destination: `/user/setting/namespace`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToNamespacesSelection"] != null &&
                      typeof $steps["goToNamespacesSelection"] === "object" &&
                      typeof $steps["goToNamespacesSelection"].then ===
                        "function"
                    ) {
                      $steps["goToNamespacesSelection"] = await $steps[
                        "goToNamespacesSelection"
                      ];
                    }

                    $steps["wrongUser"] =
                      $steps.loginAction.status !== 200
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "info",
                                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0646\u0627\u0645\u0639\u062a\u0628\u0631 \u0627\u0633\u062a"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["wrongUser"] != null &&
                      typeof $steps["wrongUser"] === "object" &&
                      typeof $steps["wrongUser"].then === "function"
                    ) {
                      $steps["wrongUser"] = await $steps["wrongUser"];
                    }

                    $steps["enablerLoginButton"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "disabledLoginButton",
                            operation: 6
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["enablerLoginButton"] != null &&
                      typeof $steps["enablerLoginButton"] === "object" &&
                      typeof $steps["enablerLoginButton"].then === "function"
                    ) {
                      $steps["enablerLoginButton"] = await $steps[
                        "enablerLoginButton"
                      ];
                    }
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "loginButton",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  shape={"rounded"}
                  submitsForm={false}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gSrrw
                    )}
                  >
                    {
                      "\u0648\u0631\u0648\u062f \u0628\u0647 \u0627\u06cc\u0646\u0644\u0628"
                    }
                  </div>
                </Button>
              )}
            </DataCtxReader__>
          </LoadingBoundary>
          <Button
            data-plasmic-name={"resetPassword"}
            data-plasmic-override={overrides.resetPassword}
            className={classNames("__wab_instance", sty.resetPassword, {
              [sty.resetPassworddisabledLoginButton]: hasVariant(
                $state,
                "disabledLoginButton",
                "disabledLoginButton"
              )
            })}
            color={"clear"}
            isDisabled={generateStateValueProp($state, [
              "resetPassword",
              "isDisabled"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["resetPassword"] = true
                ? (() => {
                    const actionArgs = {
                      destination:
                        "https://docs.google.com/forms/d/e/1FAIpQLSeVxCqYPfByUBPROGdXtrp3dX10uL6SCMHqNAMy05YBsSgzng/viewform"
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["resetPassword"] != null &&
                typeof $steps["resetPassword"] === "object" &&
                typeof $steps["resetPassword"].then === "function"
              ) {
                $steps["resetPassword"] = await $steps["resetPassword"];
              }
            }}
            onIsDisabledChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "resetPassword",
                "isDisabled"
              ])(eventArgs[0]);
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o1JqL
              )}
            >
              {
                "\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
              }
            </div>
          </Button>
        </Stack__>
        <RedirectInlabLoginToNamespaceSelection
          data-plasmic-name={"redirectInlabLoginToNamespaceSelection"}
          data-plasmic-override={
            overrides.redirectInlabLoginToNamespaceSelection
          }
          className={classNames(
            "__wab_instance",
            sty.redirectInlabLoginToNamespaceSelection
          )}
        />

        <RedirectInlabLoginToHomepage
          data-plasmic-name={"redirectInlabLoginToHomepage"}
          data-plasmic-override={overrides.redirectInlabLoginToHomepage}
          className={classNames(
            "__wab_instance",
            sty.redirectInlabLoginToHomepage
          )}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  inlabLogin: [
    "inlabLogin",
    "pageContent",
    "username",
    "password",
    "loadingSupportedLoginButton",
    "loginButton",
    "resetPassword",
    "redirectInlabLoginToNamespaceSelection",
    "redirectInlabLoginToHomepage"
  ],
  pageContent: [
    "pageContent",
    "username",
    "password",
    "loadingSupportedLoginButton",
    "loginButton",
    "resetPassword"
  ],
  username: ["username"],
  password: ["password"],
  loadingSupportedLoginButton: ["loadingSupportedLoginButton", "loginButton"],
  loginButton: ["loginButton"],
  resetPassword: ["resetPassword"],
  redirectInlabLoginToNamespaceSelection: [
    "redirectInlabLoginToNamespaceSelection"
  ],
  redirectInlabLoginToHomepage: ["redirectInlabLoginToHomepage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  inlabLogin: "div";
  pageContent: "div";
  username: typeof TextInput;
  password: typeof TextInput;
  loadingSupportedLoginButton: typeof LoadingBoundary;
  loginButton: typeof Button;
  resetPassword: typeof Button;
  redirectInlabLoginToNamespaceSelection: typeof RedirectInlabLoginToNamespaceSelection;
  redirectInlabLoginToHomepage: typeof RedirectInlabLoginToHomepage;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInlabLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInlabLogin__VariantsArgs;
    args?: PlasmicInlabLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInlabLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInlabLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInlabLogin__ArgProps,
          internalVariantPropNames: PlasmicInlabLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInlabLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "inlabLogin") {
    func.displayName = "PlasmicInlabLogin";
  } else {
    func.displayName = `PlasmicInlabLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicInlabLogin = Object.assign(
  // Top-level PlasmicInlabLogin renders the root element
  makeNodeComponent("inlabLogin"),
  {
    // Helper components rendering sub-elements
    pageContent: makeNodeComponent("pageContent"),
    username: makeNodeComponent("username"),
    password: makeNodeComponent("password"),
    loadingSupportedLoginButton: makeNodeComponent(
      "loadingSupportedLoginButton"
    ),
    loginButton: makeNodeComponent("loginButton"),
    resetPassword: makeNodeComponent("resetPassword"),
    redirectInlabLoginToNamespaceSelection: makeNodeComponent(
      "redirectInlabLoginToNamespaceSelection"
    ),
    redirectInlabLoginToHomepage: makeNodeComponent(
      "redirectInlabLoginToHomepage"
    ),

    // Metadata about props expected for PlasmicInlabLogin
    internalVariantProps: PlasmicInlabLogin__VariantProps,
    internalArgProps: PlasmicInlabLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInlabLogin;
/* prettier-ignore-end */
