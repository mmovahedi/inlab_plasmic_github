// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: aXAcva2etiX1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicRedirectToNamespaceSelection.module.css"; // plasmic-import: aXAcva2etiX1/css

createPlasmicElementProxy;

export type PlasmicRedirectToNamespaceSelection__VariantMembers = {};
export type PlasmicRedirectToNamespaceSelection__VariantsArgs = {};
type VariantPropType = keyof PlasmicRedirectToNamespaceSelection__VariantsArgs;
export const PlasmicRedirectToNamespaceSelection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRedirectToNamespaceSelection__ArgsType = {};
type ArgPropType = keyof PlasmicRedirectToNamespaceSelection__ArgsType;
export const PlasmicRedirectToNamespaceSelection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicRedirectToNamespaceSelection__OverridesType = {
  root?: Flex__<"div">;
  redirectToNamespaceSelection?: Flex__<typeof SideEffect>;
};

export interface DefaultRedirectToNamespaceSelectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRedirectToNamespaceSelection__RenderFunc(props: {
  variants: PlasmicRedirectToNamespaceSelection__VariantsArgs;
  args: PlasmicRedirectToNamespaceSelection__ArgsType;
  overrides: PlasmicRedirectToNamespaceSelection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"redirectToNamespaceSelection"}
        data-plasmic-override={overrides.redirectToNamespaceSelection}
        className={classNames(
          "__wab_instance",
          sty.redirectToNamespaceSelection
        )}
        onMount={async () => {
          const $steps = {};

          $steps["consoleLogOfInlabUser"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return console.log(
                      `inlab_user: ${localStorage.getItem("inlab_user")}`
                    );
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["consoleLogOfInlabUser"] != null &&
            typeof $steps["consoleLogOfInlabUser"] === "object" &&
            typeof $steps["consoleLogOfInlabUser"].then === "function"
          ) {
            $steps["consoleLogOfInlabUser"] = await $steps[
              "consoleLogOfInlabUser"
            ];
          }

          $steps["consoleLogOfInlabUserNamespaceId"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return console.log(
                      `inlab_user_namespace_id: ${localStorage.getItem(
                        "inlab_user_namespace_id"
                      )}`
                    );
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["consoleLogOfInlabUserNamespaceId"] != null &&
            typeof $steps["consoleLogOfInlabUserNamespaceId"] === "object" &&
            typeof $steps["consoleLogOfInlabUserNamespaceId"].then ===
              "function"
          ) {
            $steps["consoleLogOfInlabUserNamespaceId"] = await $steps[
              "consoleLogOfInlabUserNamespaceId"
            ];
          }

          $steps["goToNamespacesSelection"] =
            localStorage.getItem("inlab_user") &&
            !localStorage.getItem("inlab_user_namespace_id")
              ? (() => {
                  const actionArgs = { destination: `/user/setting/namespace` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["goToNamespacesSelection"] != null &&
            typeof $steps["goToNamespacesSelection"] === "object" &&
            typeof $steps["goToNamespacesSelection"].then === "function"
          ) {
            $steps["goToNamespacesSelection"] = await $steps[
              "goToNamespacesSelection"
            ];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "redirectToNamespaceSelection"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  redirectToNamespaceSelection: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRedirectToNamespaceSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRedirectToNamespaceSelection__VariantsArgs;
    args?: PlasmicRedirectToNamespaceSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicRedirectToNamespaceSelection__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicRedirectToNamespaceSelection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRedirectToNamespaceSelection__ArgProps,
          internalVariantPropNames:
            PlasmicRedirectToNamespaceSelection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRedirectToNamespaceSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRedirectToNamespaceSelection";
  } else {
    func.displayName = `PlasmicRedirectToNamespaceSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicRedirectToNamespaceSelection = Object.assign(
  // Top-level PlasmicRedirectToNamespaceSelection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),

    // Metadata about props expected for PlasmicRedirectToNamespaceSelection
    internalVariantProps: PlasmicRedirectToNamespaceSelection__VariantProps,
    internalArgProps: PlasmicRedirectToNamespaceSelection__ArgProps
  }
);

export default PlasmicRedirectToNamespaceSelection;
/* prettier-ignore-end */
