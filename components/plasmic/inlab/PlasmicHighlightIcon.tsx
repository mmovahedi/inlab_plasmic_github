// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: mbv1OhQXEQf1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicHighlightIcon.module.css"; // plasmic-import: mbv1OhQXEQf1/css

import EmptyCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmptyCircleSvgrepoComSvg"; // plasmic-import: I_kHJfXhorHV/icon
import CheckCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoCom1Svg"; // plasmic-import: _tKFUo6wUlQJ/icon
import LoaderSpinnerIcon from "./icons/PlasmicIcon__LoaderSpinner"; // plasmic-import: -kAkKYtWcc8f/icon

createPlasmicElementProxy;

export type PlasmicHighlightIcon__VariantMembers = {
  highlighting: "highlighting";
  loadingHighlighting: "loadingHighlighting";
};
export type PlasmicHighlightIcon__VariantsArgs = {
  highlighting?: SingleBooleanChoiceArg<"highlighting">;
  loadingHighlighting?: SingleBooleanChoiceArg<"loadingHighlighting">;
};
type VariantPropType = keyof PlasmicHighlightIcon__VariantsArgs;
export const PlasmicHighlightIcon__VariantProps = new Array<VariantPropType>(
  "highlighting",
  "loadingHighlighting"
);

export type PlasmicHighlightIcon__ArgsType = {
  highlight?: string;
  onHighlightChange?: (val: string) => void;
  patientId?: number;
  trigerReload?: () => void;
  admissionId?: string;
  body?: string;
  type?: string;
};
type ArgPropType = keyof PlasmicHighlightIcon__ArgsType;
export const PlasmicHighlightIcon__ArgProps = new Array<ArgPropType>(
  "highlight",
  "onHighlightChange",
  "patientId",
  "trigerReload",
  "admissionId",
  "body",
  "type"
);

export type PlasmicHighlightIcon__OverridesType = {
  highlightIcon?: Flex__<"svg">;
};

export interface DefaultHighlightIconProps {
  highlight?: string;
  onHighlightChange?: (val: string) => void;
  patientId?: number;
  trigerReload?: () => void;
  admissionId?: string;
  body?: string;
  type?: string;
  highlighting?: SingleBooleanChoiceArg<"highlighting">;
  loadingHighlighting?: SingleBooleanChoiceArg<"loadingHighlighting">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHighlightIcon__RenderFunc(props: {
  variants: PlasmicHighlightIcon__VariantsArgs;
  args: PlasmicHighlightIcon__ArgsType;
  overrides: PlasmicHighlightIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "highlighting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.highlight === true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.highlighting
      },
      {
        path: "highlight",
        type: "writable",
        variableType: "text",

        valueProp: "highlight",
        onChangeProp: "onHighlightChange"
      },
      {
        path: "loadingHighlighting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.loadingHighlighting
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <PlasmicIcon__
      data-plasmic-name={"highlightIcon"}
      data-plasmic-override={overrides.highlightIcon}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      PlasmicIconType={
        hasVariant($state, "highlighting", "highlighting") &&
        hasVariant($state, "loadingHighlighting", "loadingHighlighting")
          ? LoaderSpinnerIcon
          : hasVariant($state, "loadingHighlighting", "loadingHighlighting")
          ? LoaderSpinnerIcon
          : hasVariant($state, "highlighting", "highlighting")
          ? CheckCircleSvgrepoCom1SvgIcon
          : EmptyCircleSvgrepoComSvgIcon
      }
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.highlightIcon,
        {
          [sty.highlightIconhighlighting]: hasVariant(
            $state,
            "highlighting",
            "highlighting"
          ),
          [sty.highlightIconhighlighting_loadingHighlighting]:
            hasVariant($state, "highlighting", "highlighting") &&
            hasVariant($state, "loadingHighlighting", "loadingHighlighting"),
          [sty.highlightIconloadingHighlighting]: hasVariant(
            $state,
            "loadingHighlighting",
            "loadingHighlighting"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["activateLoadingHighlightVariant"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "loadingHighlighting",
                operation: 4
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                $stateSet($state, vgroup, true);
                return true;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["activateLoadingHighlightVariant"] != null &&
          typeof $steps["activateLoadingHighlightVariant"] === "object" &&
          typeof $steps["activateLoadingHighlightVariant"].then === "function"
        ) {
          $steps["activateLoadingHighlightVariant"] = await $steps[
            "activateLoadingHighlightVariant"
          ];
        }

        $steps["toggleHighlightPost"] =
          $state.highlight == false
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "/api/v3/messages",
                    undefined,
                    (() => {
                      try {
                        return {
                          sender_id: $ctx.inlab_user.user.id,
                          admission_id: $props.admissionId,
                          namespace_id: localStorage.getItem(
                            "inlab_user_namespace_id"
                          ),
                          namespace_title: localStorage.getItem(
                            "inlab_user_namespace_title"
                          ),
                          body: $props.body,
                          type: $props.type
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["AuthGlobalContext.apiFetcher"]?.apply(
                  null,
                  [...actionArgs.args]
                );
              })()
            : undefined;
        if (
          $steps["toggleHighlightPost"] != null &&
          typeof $steps["toggleHighlightPost"] === "object" &&
          typeof $steps["toggleHighlightPost"].then === "function"
        ) {
          $steps["toggleHighlightPost"] = await $steps["toggleHighlightPost"];
        }

        $steps["toggleHighlightDelete"] =
          $state.highlight == true
            ? (() => {
                const actionArgs = {
                  args: [
                    "DELETE",
                    `/api/v3/messages?namespace_id=${localStorage.getItem(
                      "inlab_user_namespace_id"
                    )}&admission_id=${$props.admissionId}&body_exact=${
                      $props.body
                    }&type=${$props.type}`
                  ]
                };
                return $globalActions["AuthGlobalContext.apiFetcher"]?.apply(
                  null,
                  [...actionArgs.args]
                );
              })()
            : undefined;
        if (
          $steps["toggleHighlightDelete"] != null &&
          typeof $steps["toggleHighlightDelete"] === "object" &&
          typeof $steps["toggleHighlightDelete"].then === "function"
        ) {
          $steps["toggleHighlightDelete"] = await $steps[
            "toggleHighlightDelete"
          ];
        }

        $steps["runTrigerReload"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["trigerReload"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runTrigerReload"] != null &&
          typeof $steps["runTrigerReload"] === "object" &&
          typeof $steps["runTrigerReload"].then === "function"
        ) {
          $steps["runTrigerReload"] = await $steps["runTrigerReload"];
        }

        $steps["deactivateLoadingHighlightVariant"] = setTimeout(() => {
          $steps.runTrigerReload;
        }, 50)
          ? (() => {
              const actionArgs = {
                vgroup: "loadingHighlighting",
                operation: 6
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                $stateSet($state, vgroup, false);
                return false;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["deactivateLoadingHighlightVariant"] != null &&
          typeof $steps["deactivateLoadingHighlightVariant"] === "object" &&
          typeof $steps["deactivateLoadingHighlightVariant"].then === "function"
        ) {
          $steps["deactivateLoadingHighlightVariant"] = await $steps[
            "deactivateLoadingHighlightVariant"
          ];
        }
      }}
      role={"img"}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  highlightIcon: ["highlightIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  highlightIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHighlightIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHighlightIcon__VariantsArgs;
    args?: PlasmicHighlightIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHighlightIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHighlightIcon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHighlightIcon__ArgProps,
          internalVariantPropNames: PlasmicHighlightIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHighlightIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "highlightIcon") {
    func.displayName = "PlasmicHighlightIcon";
  } else {
    func.displayName = `PlasmicHighlightIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicHighlightIcon = Object.assign(
  // Top-level PlasmicHighlightIcon renders the root element
  makeNodeComponent("highlightIcon"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHighlightIcon
    internalVariantProps: PlasmicHighlightIcon__VariantProps,
    internalArgProps: PlasmicHighlightIcon__ArgProps
  }
);

export default PlasmicHighlightIcon;
/* prettier-ignore-end */
