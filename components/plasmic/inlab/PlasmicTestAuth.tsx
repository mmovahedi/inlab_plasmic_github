// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: djw6BO6ESgiq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicTestAuth.module.css"; // plasmic-import: djw6BO6ESgiq/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicTestAuth__VariantMembers = {};
export type PlasmicTestAuth__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestAuth__VariantsArgs;
export const PlasmicTestAuth__VariantProps = new Array<VariantPropType>();

export type PlasmicTestAuth__ArgsType = {};
type ArgPropType = keyof PlasmicTestAuth__ArgsType;
export const PlasmicTestAuth__ArgProps = new Array<ArgPropType>();

export type PlasmicTestAuth__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  test?: Flex__<typeof ApiFetcherComponent>;
  someInstruction?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultTestAuthProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestAuth__RenderFunc(props: {
  variants: PlasmicTestAuth__VariantsArgs;
  args: PlasmicTestAuth__ArgsType;
  overrides: PlasmicTestAuth__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "actionTextResult",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Action Result"
      },
      {
        path: "button.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            url={"https://api.github.com/users/plasmicapp/repos"}
          >
            <DataCtxReader__>
              {$ctx => (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rtlRh
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData[0].id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              )}
            </DataCtxReader__>
          </DataFetcher>
          <ApiFetcherComponent
            data-plasmic-name={"test"}
            data-plasmic-override={overrides.test}
            className={classNames("__wab_instance", sty.test)}
            method={"GET"}
            path={`/api/v2/user/info?user=${$ctx.inlab_user.user.id}`}
            ref={ref => {
              $refs["test"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    data-plasmic-name={"someInstruction"}
                    data-plasmic-override={overrides.someInstruction}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.someInstruction
                    )}
                  >
                    {
                      "Below is a textbox that its content is generated from an API Call tha ApiFetcherComponent has proveded:"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vVeKr
                    )}
                    onClick={async event => {
                      const $steps = {};
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetched_data.data.rank.role;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"green"}
                    isDisabled={generateStateValueProp($state, [
                      "button",
                      "isDisabled"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["myAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                `/api/v2/user/info?id=${$ctx.inlab_user.user.id}`
                              ]
                            };
                            return $globalActions[
                              "AuthGlobalContext.apiFetcher"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["myAction"] != null &&
                        typeof $steps["myAction"] === "object" &&
                        typeof $steps["myAction"].then === "function"
                      ) {
                        $steps["myAction"] = await $steps["myAction"];
                      }

                      $steps["updateActionTextResult"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["actionTextResult"]
                              },
                              operation: 0,
                              value: JSON.stringify($steps.myAction)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateActionTextResult"] != null &&
                        typeof $steps["updateActionTextResult"] === "object" &&
                        typeof $steps["updateActionTextResult"].then ===
                          "function"
                      ) {
                        $steps["updateActionTextResult"] = await $steps[
                          "updateActionTextResult"
                        ];
                      }
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x3Kgi
                      )}
                    >
                      {"Click me For Actions"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xW4B5
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.actionTextResult;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Action Result";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "httpRestApiFetcher", "test", "someInstruction", "button"],
  httpRestApiFetcher: ["httpRestApiFetcher"],
  test: ["test", "someInstruction", "button"],
  someInstruction: ["someInstruction"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  test: typeof ApiFetcherComponent;
  someInstruction: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestAuth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestAuth__VariantsArgs;
    args?: PlasmicTestAuth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestAuth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestAuth__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestAuth__ArgProps,
          internalVariantPropNames: PlasmicTestAuth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestAuth";
  } else {
    func.displayName = `PlasmicTestAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicTestAuth = Object.assign(
  // Top-level PlasmicTestAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    test: makeNodeComponent("test"),
    someInstruction: makeNodeComponent("someInstruction"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicTestAuth
    internalVariantProps: PlasmicTestAuth__VariantProps,
    internalArgProps: PlasmicTestAuth__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestAuth;
/* prettier-ignore-end */
