// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: SeOv9wf5ITYF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicFilterIcon.module.css"; // plasmic-import: SeOv9wf5ITYF/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicFilterIcon__VariantMembers = {
  selected: "selected";
};
export type PlasmicFilterIcon__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};
type VariantPropType = keyof PlasmicFilterIcon__VariantsArgs;
export const PlasmicFilterIcon__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicFilterIcon__ArgsType = {
  selected2?: boolean;
  onSelectedChange2?: (val: string) => void;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFilterIcon__ArgsType;
export const PlasmicFilterIcon__ArgProps = new Array<ArgPropType>(
  "selected2",
  "onSelectedChange2",
  "children"
);

export type PlasmicFilterIcon__OverridesType = {
  root?: Flex__<"div">;
  filterIcon?: Flex__<typeof Button>;
};

export interface DefaultFilterIconProps {
  selected2?: boolean;
  onSelectedChange2?: (val: string) => void;
  children?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterIcon__RenderFunc(props: {
  variants: PlasmicFilterIcon__VariantsArgs;
  args: PlasmicFilterIcon__ArgsType;
  overrides: PlasmicFilterIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      },
      {
        path: "selected2",
        type: "writable",
        variableType: "boolean",

        valueProp: "selected2",
        onChangeProp: "onSelectedChange2"
      },
      {
        path: "filterIcon.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterIcon.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterIcon.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterIcon.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterIcon.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootselected]: hasVariant($state, "selected", "selected") }
      )}
    >
      <Button
        data-plasmic-name={"filterIcon"}
        data-plasmic-override={overrides.filterIcon}
        className={classNames("__wab_instance", sty.filterIcon, {
          [sty.filterIconselected]: hasVariant($state, "selected", "selected")
        })}
        color={hasVariant($state, "selected", "selected") ? "blue" : "clear"}
        deselected={generateStateValueProp($state, [
          "filterIcon",
          "deselected"
        ])}
        isDisabled={generateStateValueProp($state, [
          "filterIcon",
          "isDisabled"
        ])}
        onClick={async event => {
          const $steps = {};

          $steps["toggleFilter"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "selected",
                  operation: 2,
                  value: "selected"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["toggleFilter"] != null &&
            typeof $steps["toggleFilter"] === "object" &&
            typeof $steps["toggleFilter"].then === "function"
          ) {
            $steps["toggleFilter"] = await $steps["toggleFilter"];
          }

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return undefined;
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        onDeselectedChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["filterIcon", "deselected"])(
            eventArgs[0]
          );
        }}
        onIsDisabledChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["filterIcon", "isDisabled"])(
            eventArgs[0]
          );
        }}
        onSelectedChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["filterIcon", "selected"])(
            eventArgs[0]
          );
        }}
        onSortDeselectedChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["filterIcon", "sortDeselected"])(
            eventArgs[0]
          );
        }}
        onSortSelectedChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["filterIcon", "sortSelected"])(
            eventArgs[0]
          );
        }}
        selected={generateStateValueProp($state, ["filterIcon", "selected"])}
        shape={"rounded"}
        size4={"compact"}
        sortDeselected={generateStateValueProp($state, [
          "filterIcon",
          "sortDeselected"
        ])}
        sortSelected={generateStateValueProp($state, [
          "filterIcon",
          "sortSelected"
        ])}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kKwCs
              )}
            >
              {"FilterIcon"}
            </div>
          ),
          value: args.children
        })}
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "filterIcon"],
  filterIcon: ["filterIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  filterIcon: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterIcon__VariantsArgs;
    args?: PlasmicFilterIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterIcon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterIcon__ArgProps,
          internalVariantPropNames: PlasmicFilterIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterIcon";
  } else {
    func.displayName = `PlasmicFilterIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterIcon = Object.assign(
  // Top-level PlasmicFilterIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    filterIcon: makeNodeComponent("filterIcon"),

    // Metadata about props expected for PlasmicFilterIcon
    internalVariantProps: PlasmicFilterIcon__VariantProps,
    internalArgProps: PlasmicFilterIcon__ArgProps
  }
);

export default PlasmicFilterIcon;
/* prettier-ignore-end */
