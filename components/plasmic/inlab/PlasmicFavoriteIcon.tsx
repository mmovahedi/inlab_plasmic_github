// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: PK_hwsu90gKT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicFavoriteIcon.module.css"; // plasmic-import: PK_hwsu90gKT/css

import FavoriteSvgrepoComsvgIcon from "./icons/PlasmicIcon__FavoriteSvgrepoComsvg"; // plasmic-import: 9MJJOBGA9bFX/icon
import FavoriteSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__FavoriteSvgrepoCom1Svg"; // plasmic-import: 5QQKf_ZsnABX/icon

createPlasmicElementProxy;

export type PlasmicFavoriteIcon__VariantMembers = {
  favoriteTest: "favoriteTest";
};
export type PlasmicFavoriteIcon__VariantsArgs = {
  favoriteTest?: SingleBooleanChoiceArg<"favoriteTest">;
};
type VariantPropType = keyof PlasmicFavoriteIcon__VariantsArgs;
export const PlasmicFavoriteIcon__VariantProps = new Array<VariantPropType>(
  "favoriteTest"
);

export type PlasmicFavoriteIcon__ArgsType = {
  selected?: boolean;
  onSelectedChange?: (val: string) => void;
  patientId?: number;
  trigerReload?: () => void;
};
type ArgPropType = keyof PlasmicFavoriteIcon__ArgsType;
export const PlasmicFavoriteIcon__ArgProps = new Array<ArgPropType>(
  "selected",
  "onSelectedChange",
  "patientId",
  "trigerReload"
);

export type PlasmicFavoriteIcon__OverridesType = {
  favorite?: Flex__<"svg">;
};

export interface DefaultFavoriteIconProps {
  selected?: boolean;
  onSelectedChange?: (val: string) => void;
  patientId?: number;
  trigerReload?: () => void;
  favoriteTest?: SingleBooleanChoiceArg<"favoriteTest">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFavoriteIcon__RenderFunc(props: {
  variants: PlasmicFavoriteIcon__VariantsArgs;
  args: PlasmicFavoriteIcon__ArgsType;
  overrides: PlasmicFavoriteIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "favoriteTest",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selected == true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.favoriteTest
      },
      {
        path: "selected",
        type: "writable",
        variableType: "boolean",

        valueProp: "selected",
        onChangeProp: "onSelectedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <PlasmicIcon__
      data-plasmic-name={"favorite"}
      data-plasmic-override={overrides.favorite}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      PlasmicIconType={
        hasVariant($state, "favoriteTest", "favoriteTest")
          ? FavoriteSvgrepoCom1SvgIcon
          : FavoriteSvgrepoComsvgIcon
      }
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.favorite,
        {
          [sty.favoritefavoriteTest]: hasVariant(
            $state,
            "favoriteTest",
            "favoriteTest"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["toggleFavorite"] = true
          ? (() => {
              const actionArgs = {
                args: [
                  "PATCH",
                  `/n8n/webhook/fav_patients?patient_id=${
                    $props.patientId
                  }&namespace_id=${localStorage.getItem(
                    "inlab_user_namespace_id"
                  )}&favorited=${!$state.selected}`
                ]
              };
              return $globalActions["AuthGlobalContext.apiFetcher"]?.apply(
                null,
                [...actionArgs.args]
              );
            })()
          : undefined;
        if (
          $steps["toggleFavorite"] != null &&
          typeof $steps["toggleFavorite"] === "object" &&
          typeof $steps["toggleFavorite"].then === "function"
        ) {
          $steps["toggleFavorite"] = await $steps["toggleFavorite"];
        }

        $steps["runTrigerReload"] =
          $steps.toggleFavorite.status === 200
            ? (() => {
                const actionArgs = { eventRef: $props["trigerReload"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runTrigerReload"] != null &&
          typeof $steps["runTrigerReload"] === "object" &&
          typeof $steps["runTrigerReload"].then === "function"
        ) {
          $steps["runTrigerReload"] = await $steps["runTrigerReload"];
        }
      }}
      role={"img"}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  favorite: ["favorite"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  favorite: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFavoriteIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFavoriteIcon__VariantsArgs;
    args?: PlasmicFavoriteIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFavoriteIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFavoriteIcon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFavoriteIcon__ArgProps,
          internalVariantPropNames: PlasmicFavoriteIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFavoriteIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "favorite") {
    func.displayName = "PlasmicFavoriteIcon";
  } else {
    func.displayName = `PlasmicFavoriteIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicFavoriteIcon = Object.assign(
  // Top-level PlasmicFavoriteIcon renders the root element
  makeNodeComponent("favorite"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFavoriteIcon
    internalVariantProps: PlasmicFavoriteIcon__VariantProps,
    internalArgProps: PlasmicFavoriteIcon__ArgProps
  }
);

export default PlasmicFavoriteIcon;
/* prettier-ignore-end */
