// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: lSZzDzmRkcIg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import RedirectToHomepage from "../../RedirectToHomepage"; // plasmic-import: x1Fxn6tnPsJ0/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicGuideToMakeNewPage.module.css"; // plasmic-import: lSZzDzmRkcIg/css

createPlasmicElementProxy;

export type PlasmicGuideToMakeNewPage__VariantMembers = {};
export type PlasmicGuideToMakeNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicGuideToMakeNewPage__VariantsArgs;
export const PlasmicGuideToMakeNewPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGuideToMakeNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicGuideToMakeNewPage__ArgsType;
export const PlasmicGuideToMakeNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicGuideToMakeNewPage__OverridesType = {
  guideToMakeNewPage?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  redirectToHomepage?: Flex__<typeof RedirectToHomepage>;
  guideLeaflet?: Flex__<"div">;
};

export interface DefaultGuideToMakeNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGuideToMakeNewPage__RenderFunc(props: {
  variants: PlasmicGuideToMakeNewPage__VariantsArgs;
  args: PlasmicGuideToMakeNewPage__ArgsType;
  overrides: PlasmicGuideToMakeNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {false ? (
          <div
            data-plasmic-name={"guideToMakeNewPage"}
            data-plasmic-override={overrides.guideToMakeNewPage}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.guideToMakeNewPage
            )}
          >
            <RedirectToInlabLogin
              data-plasmic-name={"redirectToInlabLogin"}
              data-plasmic-override={overrides.redirectToInlabLogin}
              className={classNames("__wab_instance", sty.redirectToInlabLogin)}
            />

            <RedirectToNamespaceSelection
              data-plasmic-name={"redirectToNamespaceSelection"}
              data-plasmic-override={overrides.redirectToNamespaceSelection}
              className={classNames(
                "__wab_instance",
                sty.redirectToNamespaceSelection
              )}
            />

            <RedirectToHomepage
              data-plasmic-name={"redirectToHomepage"}
              data-plasmic-override={overrides.redirectToHomepage}
              className={classNames("__wab_instance", sty.redirectToHomepage)}
            />

            <div
              data-plasmic-name={"guideLeaflet"}
              data-plasmic-override={overrides.guideLeaflet}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.guideLeaflet
              )}
            >
              {
                "\n\u0628\u0639\u062f \u0627\u0632 \u0633\u0627\u062e\u062a \u06cc\u06a9 \u0635\u0641\u062d\u0647 \u062c\u062f\u06cc\u062f\u060c \u062d\u062a\u0645\u0627 \u062f\u0648 \u06a9\u0627\u0645\u067e\u0648\u0646\u0646\u062a\u06cc \u06a9\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u062f\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a\u060c \u0642\u0628\u0644 \u0627\u0632 \u0647\u0631 \u06a9\u0627\u0631\u06cc \u0628\u0647 \u0622\u0646 \u0635\u0641\u062d\u0647 \u062c\u062f\u06cc\u062f \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f.\n\n\n\u0644\u0627\u0632\u0645 \u0628\u0647 \u0630\u06a9\u0631 \u0627\u0633\u062a \u0627\u06af\u0631 \u062f\u0631 \u0635\u0641\u062d\u0647 \u0627\u06cc\u062c\u0627\u062f \u0634\u062f\u0647 \u0639\u0645\u0644\u06af\u0631\u0647\u0627\u06cc\u06cc \u0648\u062c\u0648\u062f \u062f\u0627\u0634\u062a \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0628\u0648\u062f \u0645\u0642\u062f\u0627\u0631 inlab_user \u06cc\u0627 inlab_user_namespace_id \u0631\u0627 \u062a\u063a\u06cc\u06cc\u0631 \u062f\u0647\u062f \u062d\u062a\u0645\u0627 \u062c\u0647\u062a \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u06cc\u0646 \u06a9\u0627\u0645\u067e\u0648\u0646\u0646\u062a \u0647\u0627 \u062f\u0642\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f \u0686\u0631\u0627\u06a9\u0647 \u0642\u0627\u0646\u0648\u0646 \u062b\u0627\u0628\u062a \u0628\u0627\u0644\u0627 \u0645\u0645\u06a9\u0646 \u0627\u0633\u062a \u0635\u062d\u06cc\u062d \u0646\u0628\u0627\u0634\u062f. \u0628\u0647 \u0646\u0633\u062e\u0647 \u067e\u0631\u06cc\u0645\u06cc\u0648\u0645 \u0645\u0631\u0627\u062c\u0639\u0647 \u0646\u0645\u0627\u06cc\u06cc\u062f:)).\n"
              }
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  guideToMakeNewPage: [
    "guideToMakeNewPage",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "redirectToHomepage",
    "guideLeaflet"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  redirectToHomepage: ["redirectToHomepage"],
  guideLeaflet: ["guideLeaflet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  guideToMakeNewPage: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  redirectToHomepage: typeof RedirectToHomepage;
  guideLeaflet: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGuideToMakeNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGuideToMakeNewPage__VariantsArgs;
    args?: PlasmicGuideToMakeNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGuideToMakeNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGuideToMakeNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGuideToMakeNewPage__ArgProps,
          internalVariantPropNames: PlasmicGuideToMakeNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGuideToMakeNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "guideToMakeNewPage") {
    func.displayName = "PlasmicGuideToMakeNewPage";
  } else {
    func.displayName = `PlasmicGuideToMakeNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicGuideToMakeNewPage = Object.assign(
  // Top-level PlasmicGuideToMakeNewPage renders the root element
  makeNodeComponent("guideToMakeNewPage"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    redirectToHomepage: makeNodeComponent("redirectToHomepage"),
    guideLeaflet: makeNodeComponent("guideLeaflet"),

    // Metadata about props expected for PlasmicGuideToMakeNewPage
    internalVariantProps: PlasmicGuideToMakeNewPage__VariantProps,
    internalArgProps: PlasmicGuideToMakeNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGuideToMakeNewPage;
/* prettier-ignore-end */
