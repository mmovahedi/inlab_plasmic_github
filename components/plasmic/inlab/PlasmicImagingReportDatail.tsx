// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: QnDyAyhvLYc4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicImagingReportDatail.module.css"; // plasmic-import: QnDyAyhvLYc4/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicImagingReportDatail__VariantMembers = {};
export type PlasmicImagingReportDatail__VariantsArgs = {};
type VariantPropType = keyof PlasmicImagingReportDatail__VariantsArgs;
export const PlasmicImagingReportDatail__VariantProps =
  new Array<VariantPropType>();

export type PlasmicImagingReportDatail__ArgsType = {};
type ArgPropType = keyof PlasmicImagingReportDatail__ArgsType;
export const PlasmicImagingReportDatail__ArgProps = new Array<ArgPropType>();

export type PlasmicImagingReportDatail__OverridesType = {
  imagingReportsDatail?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  header?: Flex__<"div">;
  patientName?: Flex__<typeof ApiFetcherComponent>;
  text?: Flex__<"div">;
  reportDetail?: Flex__<typeof ApiFetcherComponent>;
  button?: Flex__<typeof Button>;
  imagingReportList?: Flex__<"div">;
  imagingReportCard?: Flex__<"div">;
  imagingReportDate?: Flex__<"div">;
  imagingReport?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  homepagePage?: Flex__<typeof PlasmicImg__>;
  patientProfilePage?: Flex__<typeof PlasmicImg__>;
  radiologyReportPage?: Flex__<typeof PlasmicImg__>;
  laboratoryPage?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultImagingReportDatailProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImagingReportDatail__RenderFunc(props: {
  variants: PlasmicImagingReportDatail__VariantsArgs;
  args: PlasmicImagingReportDatail__ArgsType;
  overrides: PlasmicImagingReportDatail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"imagingReportsDatail"}
          data-plasmic-override={overrides.imagingReportsDatail}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.imagingReportsDatail
          )}
        >
          <RedirectToInlabLogin
            data-plasmic-name={"redirectToInlabLogin"}
            data-plasmic-override={overrides.redirectToInlabLogin}
            className={classNames("__wab_instance", sty.redirectToInlabLogin)}
          />

          <RedirectToNamespaceSelection
            data-plasmic-name={"redirectToNamespaceSelection"}
            data-plasmic-override={overrides.redirectToNamespaceSelection}
            className={classNames(
              "__wab_instance",
              sty.redirectToNamespaceSelection
            )}
          />

          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <ApiFetcherComponent
              data-plasmic-name={"patientName"}
              data-plasmic-override={overrides.patientName}
              className={classNames("__wab_instance", sty.patientName)}
              headers={(() => {
                try {
                  return {
                    "X-Namespace": localStorage.getItem(
                      "inlab_user_namespace_id"
                    )
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              method={"GET"}
              path={`/api/v2/patient/${$ctx.params.code}`}
              ref={ref => {
                $refs["patientName"] = ref;
              }}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                    dir={"rtl"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $ctx.fetched_data.loading == false &&
                            (() => {
                              const dob = new Date($ctx.fetched_data.data.dob);
                              const ageDiffMs = Date.now() - dob.getTime();
                              const ageDate = new Date(ageDiffMs);
                              const ageYears = Math.abs(
                                ageDate.getUTCFullYear() - 1970
                              );
                              const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                              if (ageYears < 1) {
                                const ageMonths = ageDate.getUTCMonth();
                                return `${fullName} 
${ageMonths} months ${
                                  $ctx.fetched_data.data.gender === "F"
                                    ? " ♀️"
                                    : $ctx.fetched_data.data.gender === "M"
                                    ? " ♂️"
                                    : ""
                                }`;
                              } else {
                                return `${fullName} ${ageYears} ${
                                  $ctx.fetched_data.data.gender === "F"
                                    ? " ♀️"
                                    : $ctx.fetched_data.data.gender === "M"
                                    ? " ♂️"
                                    : ""
                                }`;
                              }
                            })()
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          </div>
          <ApiFetcherComponent
            data-plasmic-name={"reportDetail"}
            data-plasmic-override={overrides.reportDetail}
            className={classNames("__wab_instance", sty.reportDetail)}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v2/patient/${$ctx.params.code}/radiology_services/recent?offset=0&limit=20`}
            ref={ref => {
              $refs["reportDetail"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {$ctx.fetched_data.loading == false &&
                  $ctx.fetched_data.data.pacs_url !== null ? (
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={"blue"}
                      deselected={generateStateValueProp($state, [
                        "button",
                        "deselected"
                      ])}
                      isDisabled={generateStateValueProp($state, [
                        "button",
                        "isDisabled"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $ctx.fetched_data.data.pacs_url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      onDeselectedChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "deselected"
                        ])(eventArgs[0]);
                      }}
                      onIsDisabledChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "isDisabled"
                        ])(eventArgs[0]);
                      }}
                      onSelectedChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "selected"
                        ])(eventArgs[0]);
                      }}
                      onSortDeselectedChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "sortDeselected"
                        ])(eventArgs[0]);
                      }}
                      onSortSelectedChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "sortSelected"
                        ])(eventArgs[0]);
                      }}
                      selected={generateStateValueProp($state, [
                        "button",
                        "selected"
                      ])}
                      sortDeselected={generateStateValueProp($state, [
                        "button",
                        "sortDeselected"
                      ])}
                      sortSelected={generateStateValueProp($state, [
                        "button",
                        "sortSelected"
                      ])}
                    >
                      {"View PACS"}
                    </Button>
                  ) : null}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx.fetched_data.data.radiology_services;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"imagingReportList"}
                        data-plasmic-override={overrides.imagingReportList}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.imagingReportList
                        )}
                        key={currentIndex}
                      >
                        {currentItem.id == $ctx.params.reportID ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"imagingReportCard"}
                            data-plasmic-override={overrides.imagingReportCard}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.imagingReportCard
                            )}
                          >
                            <div
                              data-plasmic-name={"imagingReportDate"}
                              data-plasmic-override={
                                overrides.imagingReportDate
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.imagingReportDate
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  const gregorianDate = new Date(
                                    currentItem.service_datetime
                                  );
                                  const shamsiDate = new Intl.DateTimeFormat(
                                    "fa-IR"
                                  ).format(gregorianDate);
                                  const shamsiTime =
                                    gregorianDate.toLocaleTimeString("fa-IR", {
                                      hour12: false
                                    });
                                  const englishDate = shamsiDate.replace(
                                    /[۰-۹]/g,
                                    d =>
                                      String.fromCharCode(
                                        d.charCodeAt(0) - 1728
                                      )
                                  );
                                  const englishTime = shamsiTime.replace(
                                    /[۰-۹]/g,
                                    d =>
                                      String.fromCharCode(
                                        d.charCodeAt(0) - 1728
                                      )
                                  );
                                  return `${englishDate} - ${englishTime}`;
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"imagingReport"}
                              data-plasmic-override={overrides.imagingReport}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.imagingReport
                              )}
                              dir={"rtl"}
                            >
                              <React.Fragment>
                                {currentItem.report}
                              </React.Fragment>
                            </div>
                          </Stack__>
                        ) : null}
                      </Stack__>
                    );
                  })}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
          <div
            data-plasmic-name={"switchingTabs"}
            data-plasmic-override={overrides.switchingTabs}
            className={classNames(projectcss.all, sty.switchingTabs)}
          >
            <SwitchingTab
              data-plasmic-name={"switchingTab"}
              data-plasmic-override={overrides.switchingTab}
              className={classNames("__wab_instance", sty.switchingTab)}
            >
              <PlasmicImg__
                data-plasmic-name={"homepagePage"}
                data-plasmic-override={overrides.homepagePage}
                alt={""}
                className={classNames(sty.homepagePage)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/patients` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/icons8Home1Svg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"patientProfilePage"}
                data-plasmic-override={overrides.patientProfilePage}
                alt={""}
                className={classNames(sty.patientProfilePage)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPatientProfile"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/profile/${(() => {
                            try {
                              return $ctx.params.adm_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPatientProfile"] != null &&
                    typeof $steps["goToPatientProfile"] === "object" &&
                    typeof $steps["goToPatientProfile"].then === "function"
                  ) {
                    $steps["goToPatientProfile"] = await $steps[
                      "goToPatientProfile"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group2063.svg",
                  fullWidth: 18.77,
                  fullHeight: 20.34,
                  aspectRatio: 0.904762
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"radiologyReportPage"}
                data-plasmic-override={overrides.radiologyReportPage}
                alt={""}
                className={classNames(sty.radiologyReportPage)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToImagingReport1"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/report/list/${(() => {
                            try {
                              return $ctx.params.adm_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToImagingReport1"] != null &&
                    typeof $steps["goToImagingReport1"] === "object" &&
                    typeof $steps["goToImagingReport1"].then === "function"
                  ) {
                    $steps["goToImagingReport1"] = await $steps[
                      "goToImagingReport1"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group376.svg",
                  fullWidth: 19.424,
                  fullHeight: 19.98,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"laboratoryPage"}
                data-plasmic-override={overrides.laboratoryPage}
                alt={""}
                className={classNames(sty.laboratoryPage)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToLaboratoryData"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/lab/${(() => {
                            try {
                              return $ctx.params.adm_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToLaboratoryData"] != null &&
                    typeof $steps["goToLaboratoryData"] === "object" &&
                    typeof $steps["goToLaboratoryData"].then === "function"
                  ) {
                    $steps["goToLaboratoryData"] = await $steps[
                      "goToLaboratoryData"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group384.svg",
                  fullWidth: 14.575,
                  fullHeight: 18.692,
                  aspectRatio: 0.789474
                }}
              />
            </SwitchingTab>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  imagingReportsDatail: [
    "imagingReportsDatail",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "header",
    "patientName",
    "text",
    "reportDetail",
    "button",
    "imagingReportList",
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport",
    "switchingTabs",
    "switchingTab",
    "homepagePage",
    "patientProfilePage",
    "radiologyReportPage",
    "laboratoryPage"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  header: ["header", "patientName", "text"],
  patientName: ["patientName", "text"],
  text: ["text"],
  reportDetail: [
    "reportDetail",
    "button",
    "imagingReportList",
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport"
  ],
  button: ["button"],
  imagingReportList: [
    "imagingReportList",
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport"
  ],
  imagingReportCard: [
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport"
  ],
  imagingReportDate: ["imagingReportDate"],
  imagingReport: ["imagingReport"],
  switchingTabs: [
    "switchingTabs",
    "switchingTab",
    "homepagePage",
    "patientProfilePage",
    "radiologyReportPage",
    "laboratoryPage"
  ],
  switchingTab: [
    "switchingTab",
    "homepagePage",
    "patientProfilePage",
    "radiologyReportPage",
    "laboratoryPage"
  ],
  homepagePage: ["homepagePage"],
  patientProfilePage: ["patientProfilePage"],
  radiologyReportPage: ["radiologyReportPage"],
  laboratoryPage: ["laboratoryPage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  imagingReportsDatail: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  header: "div";
  patientName: typeof ApiFetcherComponent;
  text: "div";
  reportDetail: typeof ApiFetcherComponent;
  button: typeof Button;
  imagingReportList: "div";
  imagingReportCard: "div";
  imagingReportDate: "div";
  imagingReport: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  homepagePage: typeof PlasmicImg__;
  patientProfilePage: typeof PlasmicImg__;
  radiologyReportPage: typeof PlasmicImg__;
  laboratoryPage: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImagingReportDatail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImagingReportDatail__VariantsArgs;
    args?: PlasmicImagingReportDatail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImagingReportDatail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImagingReportDatail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImagingReportDatail__ArgProps,
          internalVariantPropNames: PlasmicImagingReportDatail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImagingReportDatail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "imagingReportsDatail") {
    func.displayName = "PlasmicImagingReportDatail";
  } else {
    func.displayName = `PlasmicImagingReportDatail.${nodeName}`;
  }
  return func;
}

export const PlasmicImagingReportDatail = Object.assign(
  // Top-level PlasmicImagingReportDatail renders the root element
  makeNodeComponent("imagingReportsDatail"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    header: makeNodeComponent("header"),
    patientName: makeNodeComponent("patientName"),
    text: makeNodeComponent("text"),
    reportDetail: makeNodeComponent("reportDetail"),
    button: makeNodeComponent("button"),
    imagingReportList: makeNodeComponent("imagingReportList"),
    imagingReportCard: makeNodeComponent("imagingReportCard"),
    imagingReportDate: makeNodeComponent("imagingReportDate"),
    imagingReport: makeNodeComponent("imagingReport"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    homepagePage: makeNodeComponent("homepagePage"),
    patientProfilePage: makeNodeComponent("patientProfilePage"),
    radiologyReportPage: makeNodeComponent("radiologyReportPage"),
    laboratoryPage: makeNodeComponent("laboratoryPage"),

    // Metadata about props expected for PlasmicImagingReportDatail
    internalVariantProps: PlasmicImagingReportDatail__VariantProps,
    internalArgProps: PlasmicImagingReportDatail__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicImagingReportDatail;
/* prettier-ignore-end */
