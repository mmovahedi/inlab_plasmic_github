// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: QnDyAyhvLYc4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component
import RedirectToLoginPage from "../../RedirectToLoginPage"; // plasmic-import: 0wFpBWYaqpsM/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: aXAcva2etiX1/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicImagingReportDatail.module.css"; // plasmic-import: QnDyAyhvLYc4/css

import ArrowLeftIcon from "./icons/PlasmicIcon__ArrowLeft"; // plasmic-import: OPwXrI9x1012/icon

createPlasmicElementProxy;

export type PlasmicImagingReportDatail__VariantMembers = {};
export type PlasmicImagingReportDatail__VariantsArgs = {};
type VariantPropType = keyof PlasmicImagingReportDatail__VariantsArgs;
export const PlasmicImagingReportDatail__VariantProps =
  new Array<VariantPropType>();

export type PlasmicImagingReportDatail__ArgsType = {};
type ArgPropType = keyof PlasmicImagingReportDatail__ArgsType;
export const PlasmicImagingReportDatail__ArgProps = new Array<ArgPropType>();

export type PlasmicImagingReportDatail__OverridesType = {
  imagingReportsDatail?: Flex__<"div">;
  header?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  reportDetail?: Flex__<typeof ApiFetcherComponent>;
  imagingReportList?: Flex__<"div">;
  imagingReportCard?: Flex__<"div">;
  imagingReportDate?: Flex__<"div">;
  imagingReport?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  redirectToLoginPage?: Flex__<typeof RedirectToLoginPage>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
};

export interface DefaultImagingReportDatailProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImagingReportDatail__RenderFunc(props: {
  variants: PlasmicImagingReportDatail__VariantsArgs;
  args: PlasmicImagingReportDatail__ArgsType;
  overrides: PlasmicImagingReportDatail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"imagingReportsDatail"}
          data-plasmic-override={overrides.imagingReportsDatail}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.imagingReportsDatail
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            {false ? (
              <ArrowLeftIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToImagingReport1"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/${(() => {
                            try {
                              return $ctx.params.patient_name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/report/list`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToImagingReport1"] != null &&
                    typeof $steps["goToImagingReport1"] === "object" &&
                    typeof $steps["goToImagingReport1"].then === "function"
                  ) {
                    $steps["goToImagingReport1"] = await $steps[
                      "goToImagingReport1"
                    ];
                  }
                }}
                role={"img"}
              />
            ) : null}
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return String($ctx.params.patient_name);
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <ApiFetcherComponent
            data-plasmic-name={"reportDetail"}
            data-plasmic-override={overrides.reportDetail}
            className={classNames("__wab_instance", sty.reportDetail)}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v2/patient/${$ctx.params.code}/radiology_services/recent?offset=0&limit=20`}
            ref={ref => {
              $refs["reportDetail"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx =>
                (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.fetched_data.data.radiology_services;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"imagingReportList"}
                      data-plasmic-override={overrides.imagingReportList}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.imagingReportList
                      )}
                      key={currentIndex}
                    >
                      {currentItem.id == $ctx.params.reportID ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"imagingReportCard"}
                          data-plasmic-override={overrides.imagingReportCard}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.imagingReportCard
                          )}
                        >
                          <div
                            data-plasmic-name={"imagingReportDate"}
                            data-plasmic-override={overrides.imagingReportDate}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.imagingReportDate
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                const gregorianDate = new Date(
                                  currentItem.service_datetime
                                );
                                const shamsiDate = new Intl.DateTimeFormat(
                                  "fa-IR"
                                ).format(gregorianDate);
                                const shamsiTime =
                                  gregorianDate.toLocaleTimeString("fa-IR", {
                                    hour12: false
                                  });
                                const englishDate = shamsiDate.replace(
                                  /[۰-۹]/g,
                                  d =>
                                    String.fromCharCode(d.charCodeAt(0) - 1728)
                                );
                                const englishTime = shamsiTime.replace(
                                  /[۰-۹]/g,
                                  d =>
                                    String.fromCharCode(d.charCodeAt(0) - 1728)
                                );
                                return `${englishDate} - ${englishTime}`;
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"imagingReport"}
                            data-plasmic-override={overrides.imagingReport}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.imagingReport
                            )}
                          >
                            <React.Fragment>
                              {currentItem.report}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      ) : null}
                    </Stack__>
                  );
                })
              }
            </DataCtxReader__>
          </ApiFetcherComponent>
          <div
            data-plasmic-name={"switchingTabs"}
            data-plasmic-override={overrides.switchingTabs}
            className={classNames(projectcss.all, sty.switchingTabs)}
          >
            <SwitchingTab
              data-plasmic-name={"switchingTab"}
              data-plasmic-override={overrides.switchingTab}
              className={classNames("__wab_instance", sty.switchingTab)}
            />
          </div>
          <RedirectToLoginPage
            data-plasmic-name={"redirectToLoginPage"}
            data-plasmic-override={overrides.redirectToLoginPage}
            className={classNames("__wab_instance", sty.redirectToLoginPage)}
          />

          <RedirectToNamespaceSelection
            data-plasmic-name={"redirectToNamespaceSelection"}
            data-plasmic-override={overrides.redirectToNamespaceSelection}
            className={classNames(
              "__wab_instance",
              sty.redirectToNamespaceSelection
            )}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  imagingReportsDatail: [
    "imagingReportsDatail",
    "header",
    "svg",
    "text",
    "reportDetail",
    "imagingReportList",
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport",
    "switchingTabs",
    "switchingTab",
    "redirectToLoginPage",
    "redirectToNamespaceSelection"
  ],
  header: ["header", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  reportDetail: [
    "reportDetail",
    "imagingReportList",
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport"
  ],
  imagingReportList: [
    "imagingReportList",
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport"
  ],
  imagingReportCard: [
    "imagingReportCard",
    "imagingReportDate",
    "imagingReport"
  ],
  imagingReportDate: ["imagingReportDate"],
  imagingReport: ["imagingReport"],
  switchingTabs: ["switchingTabs", "switchingTab"],
  switchingTab: ["switchingTab"],
  redirectToLoginPage: ["redirectToLoginPage"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  imagingReportsDatail: "div";
  header: "div";
  svg: "svg";
  text: "div";
  reportDetail: typeof ApiFetcherComponent;
  imagingReportList: "div";
  imagingReportCard: "div";
  imagingReportDate: "div";
  imagingReport: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  redirectToLoginPage: typeof RedirectToLoginPage;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImagingReportDatail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImagingReportDatail__VariantsArgs;
    args?: PlasmicImagingReportDatail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImagingReportDatail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImagingReportDatail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImagingReportDatail__ArgProps,
          internalVariantPropNames: PlasmicImagingReportDatail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImagingReportDatail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "imagingReportsDatail") {
    func.displayName = "PlasmicImagingReportDatail";
  } else {
    func.displayName = `PlasmicImagingReportDatail.${nodeName}`;
  }
  return func;
}

export const PlasmicImagingReportDatail = Object.assign(
  // Top-level PlasmicImagingReportDatail renders the root element
  makeNodeComponent("imagingReportsDatail"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    reportDetail: makeNodeComponent("reportDetail"),
    imagingReportList: makeNodeComponent("imagingReportList"),
    imagingReportCard: makeNodeComponent("imagingReportCard"),
    imagingReportDate: makeNodeComponent("imagingReportDate"),
    imagingReport: makeNodeComponent("imagingReport"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    redirectToLoginPage: makeNodeComponent("redirectToLoginPage"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),

    // Metadata about props expected for PlasmicImagingReportDatail
    internalVariantProps: PlasmicImagingReportDatail__VariantProps,
    internalArgProps: PlasmicImagingReportDatail__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicImagingReportDatail;
/* prettier-ignore-end */
