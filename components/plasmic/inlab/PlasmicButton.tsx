// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: IoZvAstVrNqa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: IoZvAstVrNqa/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  isDisabled: "isDisabled";
  shape: "rounded" | "round" | "sharp";
  size4: "compact";
  color: "blue" | "green" | "red" | "clear" | "link";
  selected: "selected";
  deselected: "deselected";
  sortDeselected: "sortDeselected";
  sortSelected: "sortSelected";
};
export type PlasmicButton__VariantsArgs = {
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size4?: SingleChoiceArg<"compact">;
  color?: SingleChoiceArg<"blue" | "green" | "red" | "clear" | "link">;
  selected?: SingleBooleanChoiceArg<"selected">;
  deselected?: SingleBooleanChoiceArg<"deselected">;
  sortDeselected?: SingleBooleanChoiceArg<"sortDeselected">;
  sortSelected?: SingleBooleanChoiceArg<"sortSelected">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "isDisabled",
  "shape",
  "size4",
  "color",
  "selected",
  "deselected",
  "sortDeselected",
  "sortSelected"
);

export type PlasmicButton__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  link?: string;
  submitsForm?: boolean;
  target?: boolean;
  onIsDisabledChange?: (val: any) => void;
  onSelectedChange?: (val: any) => void;
  onDeselectedChange?: (val: any) => void;
  onSortDeselectedChange?: (val: any) => void;
  onSortSelectedChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon",
  "link",
  "submitsForm",
  "target",
  "onIsDisabledChange",
  "onSelectedChange",
  "onDeselectedChange",
  "onSortDeselectedChange",
  "onSortSelectedChange"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<"button">;
  contentContainer?: Flex__<"div">;
  startIconContainer?: Flex__<"div">;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultButtonProps extends pp.BaseButtonProps {
  submitsForm?: boolean;
  target?: boolean;
  onIsDisabledChange?: (val: any) => void;
  onSelectedChange?: (val: any) => void;
  onDeselectedChange?: (val: any) => void;
  onSortDeselectedChange?: (val: any) => void;
  onSortSelectedChange?: (val: any) => void;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size4?: SingleChoiceArg<"compact">;
  color?: SingleChoiceArg<"blue" | "green" | "red" | "clear" | "link">;
  selected?: SingleBooleanChoiceArg<"selected">;
  deselected?: SingleBooleanChoiceArg<"deselected">;
  sortDeselected?: SingleBooleanChoiceArg<"sortDeselected">;
  sortSelected?: SingleBooleanChoiceArg<"sortSelected">;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isDisabled",
        type: "writable",
        variableType: "variant",

        valueProp: "isDisabled",
        onChangeProp: "onIsDisabledChange"
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "size4",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size4
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "selected",
        type: "writable",
        variableType: "variant",

        valueProp: "selected",
        onChangeProp: "onSelectedChange"
      },
      {
        path: "deselected",
        type: "writable",
        variableType: "variant",

        valueProp: "deselected",
        onChangeProp: "onDeselectedChange"
      },
      {
        path: "sortDeselected",
        type: "writable",
        variableType: "variant",

        valueProp: "sortDeselected",
        onChangeProp: "onSortDeselectedChange"
      },
      {
        path: "sortSelected",
        type: "writable",
        variableType: "variant",

        valueProp: "sortSelected",
        onChangeProp: "onSortSelectedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_blue]: hasVariant($state, "color", "blue"),
          [sty.rootcolor_clear]: hasVariant($state, "color", "clear"),
          [sty.rootcolor_green]: hasVariant($state, "color", "green"),
          [sty.rootcolor_link]: hasVariant($state, "color", "link"),
          [sty.rootcolor_red]: hasVariant($state, "color", "red"),
          [sty.rootdeselected]: hasVariant($state, "deselected", "deselected"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
          [sty.rootselected_deselected]:
            hasVariant($state, "deselected", "deselected") &&
            hasVariant($state, "selected", "selected"),
          [sty.rootshape_round]: hasVariant($state, "shape", "round"),
          [sty.rootshape_round_size4_compact]:
            hasVariant($state, "shape", "round") &&
            hasVariant($state, "size4", "compact"),
          [sty.rootshape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.rootshape_sharp]: hasVariant($state, "shape", "sharp"),
          [sty.rootsize4_compact]: hasVariant($state, "size4", "compact"),
          [sty.rootsize4_compact_shape_rounded]:
            hasVariant($state, "size4", "compact") &&
            hasVariant($state, "shape", "rounded"),
          [sty.rootsortDeselected]: hasVariant(
            $state,
            "sortDeselected",
            "sortDeselected"
          ),
          [sty.rootsortSelected]: hasVariant(
            $state,
            "sortSelected",
            "sortSelected"
          )
        }
      )}
      disabled={hasVariant($state, "isDisabled", "isDisabled") ? false : false}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___0K9Kh,
          {
            [sty.textcolor_clear___0K9KhQeFss]: hasVariant(
              $state,
              "color",
              "clear"
            ),
            [sty.textselected___0K9KhBtTsH]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          }
        )}
      >
        {"Enter some text"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__cOxxN,
          {
            [sty.textcolor_clear__cOxxNQeFss]: hasVariant(
              $state,
              "color",
              "clear"
            ),
            [sty.textselected__cOxxNBtTsH]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          }
        )}
      >
        {"Enter some text"}
      </div>
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainercolor_clear]: hasVariant(
            $state,
            "color",
            "clear"
          ),
          [sty.contentContainercolor_red]: hasVariant($state, "color", "red"),
          [sty.contentContainerdeselected]: hasVariant(
            $state,
            "deselected",
            "deselected"
          ),
          [sty.contentContainerisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.contentContainerselected]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
          [sty.contentContainershape_rounded]: hasVariant(
            $state,
            "shape",
            "rounded"
          ),
          [sty.contentContainersortDeselected]: hasVariant(
            $state,
            "sortDeselected",
            "sortDeselected"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Button",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_blue]: hasVariant(
              $state,
              "color",
              "blue"
            ),
            [sty.slotTargetChildrencolor_clear]: hasVariant(
              $state,
              "color",
              "clear"
            ),
            [sty.slotTargetChildrencolor_green]: hasVariant(
              $state,
              "color",
              "green"
            ),
            [sty.slotTargetChildrencolor_link]: hasVariant(
              $state,
              "color",
              "link"
            ),
            [sty.slotTargetChildrencolor_red]: hasVariant(
              $state,
              "color",
              "red"
            ),
            [sty.slotTargetChildrendeselected]: hasVariant(
              $state,
              "deselected",
              "deselected"
            ),
            [sty.slotTargetChildrenisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            [sty.slotTargetChildrenselected]: hasVariant(
              $state,
              "selected",
              "selected"
            ),
            [sty.slotTargetChildrenselected_deselected]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "deselected", "deselected"),
            [sty.slotTargetChildrenshape_rounded]: hasVariant(
              $state,
              "shape",
              "rounded"
            ),
            [sty.slotTargetChildrensortDeselected]: hasVariant(
              $state,
              "sortDeselected",
              "sortDeselected"
            ),
            [sty.slotTargetChildrensortSelected]: hasVariant(
              $state,
              "sortSelected",
              "sortSelected"
            )
          })
        })}
      </div>
      {false ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer, {
            [sty.startIconContainercolor_blue]: hasVariant(
              $state,
              "color",
              "blue"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__z81Hd)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconcolor_blue]: hasVariant(
                $state,
                "color",
                "blue"
              ),
              [sty.slotTargetStartIconcolor_clear]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.slotTargetStartIconcolor_link]: hasVariant(
                $state,
                "color",
                "link"
              )
            })
          })}
        </div>
      ) : null}
      {false ? (
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__asUxw)}
                role={"img"}
              />
            ),

            value: args.endIcon,
            className: classNames(sty.slotTargetEndIcon, {
              [sty.slotTargetEndIconcolor_clear]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.slotTargetEndIconcolor_link]: hasVariant(
                $state,
                "color",
                "link"
              )
            })
          })}
        </div>
      ) : null}
    </button>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.PlumeButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicButton>(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = PlasmicLink__;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "nextjs";
  }
  return b;
}

const PlasmicDescendants = {
  root: ["root", "contentContainer", "startIconContainer", "endIconContainer"],
  contentContainer: ["contentContainer"],
  startIconContainer: ["startIconContainer"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  contentContainer: "div";
  startIconContainer: "div";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentContainer: makeNodeComponent("contentContainer"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,

    useBehavior
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
