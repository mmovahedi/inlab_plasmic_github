// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: oQ9IYAdIiE5g

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import BookmarkIcon from "../../BookmarkIcon"; // plasmic-import: zrroSsNrWnZg/component
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import RedirectToLoginPage from "../../RedirectToLoginPage"; // plasmic-import: 0wFpBWYaqpsM/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: aXAcva2etiX1/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: oQ9IYAdIiE5g/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: YlP_1riCYk4W/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: YIqBWKHX3AVs/icon
import Icons8ClosesvgIcon from "./icons/PlasmicIcon__Icons8Closesvg"; // plasmic-import: -xG_spDBispP/icon
import BookmarkPlusSvgrepoComsvgIcon from "./icons/PlasmicIcon__BookmarkPlusSvgrepoComsvg"; // plasmic-import: laC4EyEnFr3s/icon
import BookmarkDashFillSvgrepoComsvgIcon from "./icons/PlasmicIcon__BookmarkDashFillSvgrepoComsvg"; // plasmic-import: OXlS9uB7Ffdy/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: NFXRoS4oqKav/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  bookmarkedSelected: "bookmarkedSelected";
  serviceSelected: "serviceSelected";
  bothFilterSelected: "bothFilterSelected";
};
export type PlasmicHomepage__VariantsArgs = {
  bookmarkedSelected?: SingleBooleanChoiceArg<"bookmarkedSelected">;
  serviceSelected?: SingleBooleanChoiceArg<"serviceSelected">;
  bothFilterSelected?: SingleBooleanChoiceArg<"bothFilterSelected">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "bookmarkedSelected",
  "serviceSelected",
  "bothFilterSelected"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  homepage?: Flex__<"div">;
  pageContent?: Flex__<"div">;
  topPanel?: Flex__<"div">;
  settingIcon?: Flex__<"svg">;
  searchbar?: Flex__<typeof TextInput>;
  bookmarkedPatients?: Flex__<typeof ApiFetcherComponent>;
  بمارافتنشد?: Flex__<"div">;
  bookmarkImage?: Flex__<"svg">;
  bookmarkedImage?: Flex__<"svg">;
  patientCards?: Flex__<"div">;
  patientNameBookmarkIcon?: Flex__<"div">;
  firstLastName?: Flex__<"div">;
  searchedPatientBookmarkIcon?: Flex__<typeof BookmarkIcon>;
  wardRoom?: Flex__<"div">;
  roomBed?: Flex__<"div">;
  ward?: Flex__<"div">;
  patientDataButtons?: Flex__<"div">;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  radiologyReport?: Flex__<typeof PlasmicImg__>;
  laboratoryData?: Flex__<typeof PlasmicImg__>;
  commentButton?: Flex__<typeof Button>;
  redirectToLoginPage?: Flex__<typeof RedirectToLoginPage>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "bookmarkedSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.bookmarkedSelected
      },
      {
        path: "serviceSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.serviceSelected
      },
      {
        path: "bothFilterSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.bothFilterSelected
      },
      {
        path: "commentButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "searchbar.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "searchedPatientBookmarkIcon[].selected2",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"homepage"}
        data-plasmic-override={overrides.homepage}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.homepage
        )}
      >
        <div
          data-plasmic-name={"pageContent"}
          data-plasmic-override={overrides.pageContent}
          className={classNames(projectcss.all, sty.pageContent)}
        >
          <div
            data-plasmic-name={"topPanel"}
            data-plasmic-override={overrides.topPanel}
            className={classNames(projectcss.all, sty.topPanel)}
          >
            <MenuIcon
              data-plasmic-name={"settingIcon"}
              data-plasmic-override={overrides.settingIcon}
              className={classNames(projectcss.all, sty.settingIcon)}
              onClick={async event => {
                const $steps = {};

                $steps["goToUserSetting"] = true
                  ? (() => {
                      const actionArgs = { destination: `/user/setting` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToUserSetting"] != null &&
                  typeof $steps["goToUserSetting"] === "object" &&
                  typeof $steps["goToUserSetting"].then === "function"
                ) {
                  $steps["goToUserSetting"] = await $steps["goToUserSetting"];
                }
              }}
              role={"img"}
            />

            <TextInput
              data-plasmic-name={"searchbar"}
              data-plasmic-override={overrides.searchbar}
              className={classNames("__wab_instance", sty.searchbar)}
              endIcon={
                <Icons8ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__i7Mco)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSearchbarValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["searchbar", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSearchbarValue"] != null &&
                      typeof $steps["updateSearchbarValue"] === "object" &&
                      typeof $steps["updateSearchbarValue"].then === "function"
                    ) {
                      $steps["updateSearchbarValue"] = await $steps[
                        "updateSearchbarValue"
                      ];
                    }

                    $steps["runActionOnBookmarkedPatients"] =
                      $steps.updateSearchbarValue.status === 200
                        ? (() => {
                            const actionArgs = {
                              tplRef: "bookmarkedPatients",
                              action: "reload"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runActionOnBookmarkedPatients"] != null &&
                      typeof $steps["runActionOnBookmarkedPatients"] ===
                        "object" &&
                      typeof $steps["runActionOnBookmarkedPatients"].then ===
                        "function"
                    ) {
                      $steps["runActionOnBookmarkedPatients"] = await $steps[
                        "runActionOnBookmarkedPatients"
                      ];
                    }
                  }}
                  role={"img"}
                />
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["searchbar", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={
                "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
              }
              startIcon={
                <SearchsvgIcon
                  className={classNames(projectcss.all, sty.svg__iIknF)}
                  role={"img"}
                />
              }
              value={
                generateStateValueProp($state, ["searchbar", "value"]) ?? ""
              }
            />
          </div>
          <ApiFetcherComponent
            data-plasmic-name={"bookmarkedPatients"}
            data-plasmic-override={overrides.bookmarkedPatients}
            className={classNames("__wab_instance", sty.bookmarkedPatients)}
            delay={300}
            method={"GET"}
            path={`/n8n/webhook/bookmarked_patientcard?search=${
              $state.searchbar.value
            }&namespace_id=${localStorage.getItem("inlab_user_namespace_id")}`}
            ref={ref => {
              $refs["bookmarkedPatients"] = ref;
            }}
            requestBody={undefined}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetched_data.loading === true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bPmfB
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.fetched_data.loading === false &&
                        $state.searchbar.value === "" &&
                        $ctx.fetched_data.data !== ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4NWqk
                      )}
                    >
                      {
                        "\u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0645\u0646"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.fetched_data.loading === false &&
                        $state.searchbar.value !== "" &&
                        $ctx.fetched_data.data !== ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lg59U
                      )}
                    >
                      {
                        "\u0646\u062a\u0627\u06cc\u062c \u062c\u0633\u062a \u0648 \u062c\u0648"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.fetched_data.loading === false &&
                        $state.searchbar.value !== "" &&
                        $ctx.fetched_data.data === ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={
                        "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f"
                      }
                      data-plasmic-override={overrides.بمارافتنشد}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.بمارافتنشد
                      )}
                    >
                      {
                        "\u0628\u06cc\u0645\u0627\u0631\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.fetched_data.loading === false &&
                        $state.searchbar.value === "" &&
                        $ctx.fetched_data.data === ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zgr5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__meyUm
                        )}
                      >
                        <BookmarkPlusSvgrepoComsvgIcon
                          data-plasmic-name={"bookmarkImage"}
                          data-plasmic-override={overrides.bookmarkImage}
                          className={classNames(
                            projectcss.all,
                            sty.bookmarkImage
                          )}
                          role={"img"}
                        />

                        <BookmarkDashFillSvgrepoComsvgIcon
                          data-plasmic-name={"bookmarkedImage"}
                          data-plasmic-override={overrides.bookmarkedImage}
                          className={classNames(
                            projectcss.all,
                            sty.bookmarkedImage
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3YOe4
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              '\u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 "\u0622\u06cc\u06a9\u0648\u0646 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9" \u0628\u06cc\u0645\u0627\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \n\u0644\u06cc\u0633\u062a '
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {
                              '"\u0628\u06cc\u0645\u0627\u0631 \u0647\u0627\u06cc \u0645\u0646"'
                            }
                          </span>
                          <React.Fragment>
                            {
                              " \u0627\u0636\u0627\u0641\u0647 \u06cc\u0627 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $ctx.fetched_data.data !== "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetched_data.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"patientCards"}
                            data-plasmic-override={overrides.patientCards}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.patientCards
                            )}
                            key={currentIndex}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"patientNameBookmarkIcon"}
                              data-plasmic-override={
                                overrides.patientNameBookmarkIcon
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.patientNameBookmarkIcon
                              )}
                            >
                              <div
                                data-plasmic-name={"firstLastName"}
                                data-plasmic-override={overrides.firstLastName}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.firstLastName
                                )}
                              >
                                <React.Fragment>
                                  {currentItem.first_name +
                                    " " +
                                    currentItem.last_name}
                                </React.Fragment>
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.searchedPatientBookmarkIcon
                                  ),
                                  onSelected2Change: generateStateOnChangeProp(
                                    $state,
                                    [
                                      "searchedPatientBookmarkIcon",
                                      __plasmic_idx_0,
                                      "selected2"
                                    ]
                                  ),
                                  patientId: (() => {
                                    try {
                                      return currentItem.profile_id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  selected2: generateStateValueProp($state, [
                                    "searchedPatientBookmarkIcon",
                                    __plasmic_idx_0,
                                    "selected2"
                                  ]),
                                  trigerReload: async () => {
                                    const $steps = {};

                                    $steps["runActionOnBookmarkedPatients"] =
                                      true
                                        ? (() => {
                                            const actionArgs = {
                                              tplRef: "bookmarkedPatients",
                                              action: "reload"
                                            };
                                            return (({
                                              tplRef,
                                              action,
                                              args
                                            }) => {
                                              return $refs?.[tplRef]?.[
                                                action
                                              ]?.(...(args ?? []));
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["runActionOnBookmarkedPatients"] !=
                                        null &&
                                      typeof $steps[
                                        "runActionOnBookmarkedPatients"
                                      ] === "object" &&
                                      typeof $steps[
                                        "runActionOnBookmarkedPatients"
                                      ].then === "function"
                                    ) {
                                      $steps["runActionOnBookmarkedPatients"] =
                                        await $steps[
                                          "runActionOnBookmarkedPatients"
                                        ];
                                    }
                                  }
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "searchedPatientBookmarkIcon[].selected2",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.bookmarked;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <BookmarkIcon
                                    data-plasmic-name={
                                      "searchedPatientBookmarkIcon"
                                    }
                                    data-plasmic-override={
                                      overrides.searchedPatientBookmarkIcon
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </Stack__>
                            <div
                              data-plasmic-name={"wardRoom"}
                              data-plasmic-override={overrides.wardRoom}
                              className={classNames(
                                projectcss.all,
                                sty.wardRoom
                              )}
                            >
                              <div
                                data-plasmic-name={"roomBed"}
                                data-plasmic-override={overrides.roomBed}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.roomBed
                                )}
                              >
                                <React.Fragment>
                                  {currentItem.room + "-" + currentItem.bed}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"ward"}
                                data-plasmic-override={overrides.ward}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.ward
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.ward.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"patientDataButtons"}
                              data-plasmic-override={
                                overrides.patientDataButtons
                              }
                              className={classNames(
                                projectcss.all,
                                sty.patientDataButtons
                              )}
                            >
                              <PlasmicImg__
                                data-plasmic-name={"patientProfile"}
                                data-plasmic-override={overrides.patientProfile}
                                alt={""}
                                className={classNames(sty.patientProfile)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"22px"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToPatientProfile"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/patient/${(() => {
                                            try {
                                              return currentItem.profile_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/profile`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["goToPatientProfile"] != null &&
                                    typeof $steps["goToPatientProfile"] ===
                                      "object" &&
                                    typeof $steps["goToPatientProfile"].then ===
                                      "function"
                                  ) {
                                    $steps["goToPatientProfile"] = await $steps[
                                      "goToPatientProfile"
                                    ];
                                  }
                                }}
                                src={{
                                  src: "/plasmic/inlab/images/group2063.svg",
                                  fullWidth: 18.77,
                                  fullHeight: 20.34,
                                  aspectRatio: 0.904762
                                }}
                              />

                              <PlasmicImg__
                                data-plasmic-name={"radiologyReport"}
                                data-plasmic-override={
                                  overrides.radiologyReport
                                }
                                alt={""}
                                className={classNames(sty.radiologyReport)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"22px"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToImagingReportList"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/patient/${(() => {
                                            try {
                                              return currentItem.profile_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/report/list`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["goToImagingReportList"] != null &&
                                    typeof $steps["goToImagingReportList"] ===
                                      "object" &&
                                    typeof $steps["goToImagingReportList"]
                                      .then === "function"
                                  ) {
                                    $steps["goToImagingReportList"] =
                                      await $steps["goToImagingReportList"];
                                  }
                                }}
                                src={{
                                  src: "/plasmic/inlab/images/group376.svg",
                                  fullWidth: 19.424,
                                  fullHeight: 19.98,
                                  aspectRatio: 1
                                }}
                              />

                              <PlasmicImg__
                                data-plasmic-name={"laboratoryData"}
                                data-plasmic-override={overrides.laboratoryData}
                                alt={""}
                                className={classNames(sty.laboratoryData)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"22px"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToLaboratoryData"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/patient/${(() => {
                                            try {
                                              return currentItem.profile_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/lab`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["goToLaboratoryData"] != null &&
                                    typeof $steps["goToLaboratoryData"] ===
                                      "object" &&
                                    typeof $steps["goToLaboratoryData"].then ===
                                      "function"
                                  ) {
                                    $steps["goToLaboratoryData"] = await $steps[
                                      "goToLaboratoryData"
                                    ];
                                  }
                                }}
                                src={{
                                  src: "/plasmic/inlab/images/group384.svg",
                                  fullWidth: 14.575,
                                  fullHeight: 18.692,
                                  aspectRatio: 0.789474
                                }}
                              />
                            </div>
                          </Stack__>
                        );
                      })
                    : null}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </div>
        <Button
          data-plasmic-name={"commentButton"}
          data-plasmic-override={overrides.commentButton}
          className={classNames("__wab_instance", sty.commentButton)}
          color={"blue"}
          isDisabled={generateStateValueProp($state, [
            "commentButton",
            "isDisabled"
          ])}
          link={
            "https://docs.google.com/forms/d/e/1FAIpQLSdm--yB5xsMJ_PW-MFyyp_-3APBQ8dzti69zsMuIJz6SfoX-g/viewform?usp=sf_link"
          }
          onIsDisabledChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "isDisabled"])(
              eventArgs[0]
            );
          }}
          shape={"round"}
          size4={"compact"}
          target={true}
        >
          <Icon2Icon
            className={classNames(projectcss.all, sty.svg__c1FGp)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dtHRl
            )}
          >
            {""}
          </div>
        </Button>
        <RedirectToLoginPage
          data-plasmic-name={"redirectToLoginPage"}
          data-plasmic-override={overrides.redirectToLoginPage}
          className={classNames("__wab_instance", sty.redirectToLoginPage)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  homepage: [
    "homepage",
    "pageContent",
    "topPanel",
    "settingIcon",
    "searchbar",
    "bookmarkedPatients",
    "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkImage",
    "bookmarkedImage",
    "patientCards",
    "patientNameBookmarkIcon",
    "firstLastName",
    "searchedPatientBookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData",
    "commentButton",
    "redirectToLoginPage",
    "redirectToNamespaceSelection"
  ],
  pageContent: [
    "pageContent",
    "topPanel",
    "settingIcon",
    "searchbar",
    "bookmarkedPatients",
    "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkImage",
    "bookmarkedImage",
    "patientCards",
    "patientNameBookmarkIcon",
    "firstLastName",
    "searchedPatientBookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  topPanel: ["topPanel", "settingIcon", "searchbar"],
  settingIcon: ["settingIcon"],
  searchbar: ["searchbar"],
  bookmarkedPatients: [
    "bookmarkedPatients",
    "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkImage",
    "bookmarkedImage",
    "patientCards",
    "patientNameBookmarkIcon",
    "firstLastName",
    "searchedPatientBookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  بمارافتنشد: ["\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f"],
  bookmarkImage: ["bookmarkImage"],
  bookmarkedImage: ["bookmarkedImage"],
  patientCards: [
    "patientCards",
    "patientNameBookmarkIcon",
    "firstLastName",
    "searchedPatientBookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  patientNameBookmarkIcon: [
    "patientNameBookmarkIcon",
    "firstLastName",
    "searchedPatientBookmarkIcon"
  ],
  firstLastName: ["firstLastName"],
  searchedPatientBookmarkIcon: ["searchedPatientBookmarkIcon"],
  wardRoom: ["wardRoom", "roomBed", "ward"],
  roomBed: ["roomBed"],
  ward: ["ward"],
  patientDataButtons: [
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  patientProfile: ["patientProfile"],
  radiologyReport: ["radiologyReport"],
  laboratoryData: ["laboratoryData"],
  commentButton: ["commentButton"],
  redirectToLoginPage: ["redirectToLoginPage"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  homepage: "div";
  pageContent: "div";
  topPanel: "div";
  settingIcon: "svg";
  searchbar: typeof TextInput;
  bookmarkedPatients: typeof ApiFetcherComponent;
  بمارافتنشد: "div";
  bookmarkImage: "svg";
  bookmarkedImage: "svg";
  patientCards: "div";
  patientNameBookmarkIcon: "div";
  firstLastName: "div";
  searchedPatientBookmarkIcon: typeof BookmarkIcon;
  wardRoom: "div";
  roomBed: "div";
  ward: "div";
  patientDataButtons: "div";
  patientProfile: typeof PlasmicImg__;
  radiologyReport: typeof PlasmicImg__;
  laboratoryData: typeof PlasmicImg__;
  commentButton: typeof Button;
  redirectToLoginPage: typeof RedirectToLoginPage;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homepage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("homepage"),
  {
    // Helper components rendering sub-elements
    pageContent: makeNodeComponent("pageContent"),
    topPanel: makeNodeComponent("topPanel"),
    settingIcon: makeNodeComponent("settingIcon"),
    searchbar: makeNodeComponent("searchbar"),
    bookmarkedPatients: makeNodeComponent("bookmarkedPatients"),
    بمارافتنشد: makeNodeComponent(
      "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f"
    ),
    bookmarkImage: makeNodeComponent("bookmarkImage"),
    bookmarkedImage: makeNodeComponent("bookmarkedImage"),
    patientCards: makeNodeComponent("patientCards"),
    patientNameBookmarkIcon: makeNodeComponent("patientNameBookmarkIcon"),
    firstLastName: makeNodeComponent("firstLastName"),
    searchedPatientBookmarkIcon: makeNodeComponent(
      "searchedPatientBookmarkIcon"
    ),
    wardRoom: makeNodeComponent("wardRoom"),
    roomBed: makeNodeComponent("roomBed"),
    ward: makeNodeComponent("ward"),
    patientDataButtons: makeNodeComponent("patientDataButtons"),
    patientProfile: makeNodeComponent("patientProfile"),
    radiologyReport: makeNodeComponent("radiologyReport"),
    laboratoryData: makeNodeComponent("laboratoryData"),
    commentButton: makeNodeComponent("commentButton"),
    redirectToLoginPage: makeNodeComponent("redirectToLoginPage"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
