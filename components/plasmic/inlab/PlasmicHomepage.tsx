// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: oQ9IYAdIiE5g

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import Alert from "../../Alert"; // plasmic-import: a9E2wGEF0Qy9/component
import BookmarkIcon from "../../BookmarkIcon"; // plasmic-import: PK_hwsu90gKT/component
import NewFeatureBanner from "../../NewFeatureBanner"; // plasmic-import: 3tcwCShdS0g0/component
import NewNoticeBanner from "../../NewNoticeBanner"; // plasmic-import: X347FgRZh6HH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: oQ9IYAdIiE5g/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: YlP_1riCYk4W/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: YIqBWKHX3AVs/icon
import Icons8CloseSvgIcon from "./icons/PlasmicIcon__Icons8CloseSvg"; // plasmic-import: -xG_spDBispP/icon
import EvaArrowBackFillIcon from "./icons/PlasmicIcon__EvaArrowBackFill"; // plasmic-import: ZONZXYcpoN3U/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: kYUnvWOY7oUw/icon
import BookmarkPlusSvgrepoComSvgIcon from "./icons/PlasmicIcon__BookmarkPlusSvgrepoComSvg"; // plasmic-import: laC4EyEnFr3s/icon
import BookmarkDashFillSvgrepoComSvgIcon from "./icons/PlasmicIcon__BookmarkDashFillSvgrepoComSvg"; // plasmic-import: OXlS9uB7Ffdy/icon
import IndicatorIcon from "./icons/PlasmicIcon__Indicator"; // plasmic-import: B34gCeBlzVGZ/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: qdjybZJw3tm3/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: NFXRoS4oqKav/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  open?: boolean;
  modalOpen2?: boolean;
  newVersionDatetime?: string;
  newNoticeDatetime?: string;
  openModalGeneralHealthStatus?: boolean;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "open",
  "modalOpen2",
  "newVersionDatetime",
  "newNoticeDatetime",
  "openModalGeneralHealthStatus"
);

export type PlasmicHomepage__OverridesType = {
  homepage?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  pageContent?: Flex__<"div">;
  modalRemoveBookmarks?: Flex__<typeof AntdModal>;
  deleteCancel?: Flex__<"div">;
  cancelButton?: Flex__<typeof Button>;
  deleteAllBookmarks?: Flex__<typeof Button>;
  controlPanel?: Flex__<"div">;
  namespaceTitle?: Flex__<"div">;
  searchSetting?: Flex__<"div">;
  settingIcon?: Flex__<"svg">;
  searchbar?: Flex__<typeof TextInput>;
  mainTabs?: Flex__<"div">;
  consultButtonStack?: Flex__<"div">;
  consult?: Flex__<typeof Button>;
  bookmarkedPatientNumber2?: Flex__<"div">;
  patientsButtonStack?: Flex__<"div">;
  patientsTab?: Flex__<typeof Button>;
  نتايحجستوجو?: Flex__<"div">;
  consultInbox?: Flex__<"div">;
  filtersBar?: Flex__<"div">;
  filterContent?: Flex__<"div">;
  filterService?: Flex__<"div">;
  filterType?: Flex__<"div">;
  consults?: Flex__<typeof ApiFetcherComponent>;
  لطفامنتظربمانید2?: Flex__<"div">;
  مشاورهایییافتنشد?: Flex__<"div">;
  inboxConsultCard?: Flex__<"div">;
  sentConsultEmergencyStatus?: Flex__<"div">;
  emergentSign?: Flex__<"div">;
  electiveSign?: Flex__<"div">;
  sentConsultContent?: Flex__<"div">;
  patientSenderReceiver?: Flex__<"div">;
  patientWard?: Flex__<"div">;
  patientName?: Flex__<"div">;
  patientWard2?: Flex__<"div">;
  senderReceiverService?: Flex__<"div">;
  receiverService?: Flex__<"div">;
  arrow?: Flex__<"svg">;
  senderService?: Flex__<"div">;
  senderReceiverDoctor?: Flex__<"div">;
  receiverDoctor?: Flex__<"div">;
  senderDoctor?: Flex__<"div">;
  consultSendDateRepliedStatus?: Flex__<"div">;
  consultSendDate?: Flex__<"div">;
  repliedStatus?: Flex__<"div">;
  replyConsultButton?: Flex__<typeof Button>;
  patientDataButtonsInConsultCard?: Flex__<"div">;
  patientProfile2?: Flex__<typeof PlasmicImg__>;
  consultNotify2?: Flex__<typeof PlasmicImg__>;
  radiologyReport2?: Flex__<typeof PlasmicImg__>;
  laboratoryData2?: Flex__<typeof PlasmicImg__>;
  patients?: Flex__<typeof ApiFetcherComponent>;
  patientsControlpanel?: Flex__<"div">;
  patientsTabs?: Flex__<"div">;
  wardButtonStack?: Flex__<"div">;
  ward2?: Flex__<typeof Button>;
  wardPatientNumber?: Flex__<"div">;
  physicianButtonStack?: Flex__<"div">;
  physician?: Flex__<typeof Button>;
  physicianPatientNumber?: Flex__<"div">;
  bookmarkedButtonStack?: Flex__<"div">;
  bookmarked?: Flex__<typeof Button>;
  bookmarkedPatientNumber?: Flex__<"div">;
  buttonپاککردنهمهبوکمارکها?: Flex__<typeof Button>;
  بیمارییافتنشد?: Flex__<"div">;
  bookmarkGuide?: Flex__<"div">;
  bookmarkImage?: Flex__<"svg">;
  bookmarkedImage?: Flex__<"svg">;
  لطفامنتظربمانید?: Flex__<"div">;
  patientCards?: Flex__<"div">;
  patientNameBookmarkIcon?: Flex__<"div">;
  dismision?: Flex__<"div">;
  modalGeneralHealthStatus?: Flex__<typeof AntdModal>;
  modalContent?: Flex__<"div">;
  criticalCondition?: Flex__<typeof Button>;
  criticalDefinition?: Flex__<"div">;
  stableCondition?: Flex__<typeof Button>;
  criticalConditionAdd?: Flex__<typeof Alert>;
  stableConditionReset?: Flex__<typeof Alert>;
  getMessageHealthStatus?: Flex__<typeof ApiFetcherComponent>;
  generalHealthStatusAnnouncement?: Flex__<"div">;
  numberOfDoctorReporting?: Flex__<"div">;
  firstLastName?: Flex__<"div">;
  bookmarkIcon?: Flex__<typeof BookmarkIcon>;
  wardRoom?: Flex__<"div">;
  roomBed?: Flex__<"div">;
  ward?: Flex__<"div">;
  patientDataButtons?: Flex__<"div">;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  consultNotify?: Flex__<typeof PlasmicImg__>;
  radiologyReport?: Flex__<typeof PlasmicImg__>;
  laboratoryData?: Flex__<typeof PlasmicImg__>;
  commentButton?: Flex__<typeof Button>;
  modalWard?: Flex__<typeof AntdModal>;
  ward3?: Flex__<typeof ApiFetcherComponent>;
  wardsList?: Flex__<"div">;
  wardsName?: Flex__<"div">;
  searchbarWard?: Flex__<typeof TextInput>;
  modalPhysician?: Flex__<typeof AntdModal>;
  physiciansList?: Flex__<typeof ApiFetcherComponent>;
  physiciansList2?: Flex__<"div">;
  physiciansName?: Flex__<"div">;
  searchbarPhysicians?: Flex__<typeof TextInput>;
  modalConsultFilterType?: Flex__<typeof AntdModal>;
  filterTypes?: Flex__<"div">;
  senderServiceType?: Flex__<"div">;
  receiverServiceType?: Flex__<"div">;
  deleteFilters?: Flex__<"div">;
  getServicesForConsult?: Flex__<typeof ApiFetcherComponent>;
  modalConsultSenderService?: Flex__<typeof AntdModal>;
  senderServiceList?: Flex__<"div">;
  servicesName?: Flex__<"div">;
  modalConsultReceiverService?: Flex__<typeof AntdModal>;
  receiverServiceList?: Flex__<"div">;
  servicesName2?: Flex__<"div">;
  modalReplyConsultConfirmation?: Flex__<typeof AntdModal>;
  confirmationContent?: Flex__<"div">;
  confirmationYesNo?: Flex__<"div">;
  noConfirm?: Flex__<typeof Button>;
  confirm?: Flex__<typeof Button>;
  unsuccessfulReplyConsult?: Flex__<typeof Alert>;
  title?: Flex__<"div">;
  guide?: Flex__<"div">;
  modalFeatureBanner?: Flex__<typeof AntdModal>;
  newFeatureBanner?: Flex__<typeof NewFeatureBanner>;
  متوجهشدم?: Flex__<typeof Button>;
  modalNoticeBanner?: Flex__<typeof AntdModal>;
  newNoticeBanner?: Flex__<typeof NewNoticeBanner>;
  متوجهشدم2?: Flex__<typeof Button>;
  modalNps?: Flex__<typeof AntdModal>;
  columns?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          open: false,
          newVersionDatetime: "18/06/1403",
          newNoticeDatetime: "22/05/1403"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchbar.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "ward2.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarked.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commentButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalWard.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst") ? false : false
      },
      {
        path: "bookmarkIcon[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "filterBookmarked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab === "bookmark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "filterWard",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab === "ward";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "ward2.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab === "ward";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "bookmarked.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab === "bookmark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "commentButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ward2.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab !== "ward";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "bookmarked.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab !== "bookmark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "commentButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonپاککردنهمهبوکمارکها.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonپاککردنهمهبوکمارکها.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonپاککردنهمهبوکمارکها.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalRemoveBookmarks.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "ward2.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarked.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonپاککردنهمهبوکمارکها.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commentButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ward2.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarked.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonپاککردنهمهبوکمارکها.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commentButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "searchbarWard.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modalFeatureBanner.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst")
            ? (() => {
                try {
                  return (
                    $props.newVersionDatetime !==
                    localStorage.getItem("new_version_datetime")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (
                    $props.newVersionDatetime !==
                    localStorage.getItem("new_version_datetime")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "متوجهشدم.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterwardname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("filter_ward_name");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "patientsSelectedTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !localStorage.getItem("selected_tab")
                ? "bookmark"
                : localStorage.getItem("selected_tab");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "bookmarkedList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "modalNoticeBanner.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst")
            ? (() => {
                try {
                  return (
                    $props.newNoticeDatetime !==
                    localStorage.getItem("new_notice_datetime")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (
                    $props.newNoticeDatetime !==
                    localStorage.getItem("new_notice_datetime")
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "متوجهشدم2.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم2.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم2.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم2.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "متوجهشدم2.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "patientNumber",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("patients_number");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modalGeneralHealthStatus[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "criticalCondition[].isDisabled",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "criticalCondition[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "criticalCondition[].deselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "criticalCondition[].sortDeselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "criticalCondition[].sortSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "stableCondition[].isDisabled",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "stableCondition[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "stableCondition[].deselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "stableCondition[].sortDeselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "stableCondition[].sortSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "criticalConditionAddAlert",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "stableConditionResetAlert",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalNps.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !localStorage.getItem("NPS_score");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "npsScore",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "consult.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consult.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mainSelectedTab === "consult";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "consult.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mainSelectedTab !== "consult";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "consult.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consult.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalConsultSenderService.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst") ? false : false
      },
      {
        path: "modalConsultFilterType.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst") ? false : false
      },
      {
        path: "modalConsultReceiverService.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst") ? false : false
      },
      {
        path: "physician.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "physician.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab === "physician";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "physician.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab !== "physician";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "physician.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "physician.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalPhysician.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileFirst") ? false : false
      },
      {
        path: "searchbarPhysicians.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "filterphysicianname",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("filter_physician_name");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "filterPhysician",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.patientsSelectedTab === "physician";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "replyConsultButton[].isDisabled",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "replyConsultButton[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "replyConsultButton[].deselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "replyConsultButton[].sortDeselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "replyConsultButton[].sortSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "modalReplyConsultConfirmation.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "noConfirm.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "noConfirm.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "noConfirm.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "noConfirm.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "noConfirm.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirm.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirm.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirm.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirm.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirm.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "replyConsultUnsuccessfullyAlert",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "inboxConsultCardId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "patientsTab.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "patientsTab.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mainSelectedTab === "patients";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "patientsTab.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mainSelectedTab !== "patients";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "patientsTab.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "patientsTab.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mainSelectedTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !localStorage.getItem("main_selected_tab")
                ? "patients"
                : localStorage.getItem("main_selected_tab");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"homepage"}
        data-plasmic-override={overrides.homepage}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.homepage
        )}
      >
        <RedirectToInlabLogin
          data-plasmic-name={"redirectToInlabLogin"}
          data-plasmic-override={overrides.redirectToInlabLogin}
          className={classNames("__wab_instance", sty.redirectToInlabLogin)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <div
          data-plasmic-name={"pageContent"}
          data-plasmic-override={overrides.pageContent}
          className={classNames(projectcss.all, sty.pageContent)}
        >
          <AntdModal
            data-plasmic-name={"modalRemoveBookmarks"}
            data-plasmic-override={overrides.modalRemoveBookmarks}
            cancelText={"\u0644\u063a\u0648"}
            className={classNames("__wab_instance", sty.modalRemoveBookmarks)}
            closeButtonClassName={classNames({
              [sty["pcls_G2iYBhrSoKBv"]]: true
            })}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            footer={
              <Stack__
                as={"div"}
                data-plasmic-name={"deleteCancel"}
                data-plasmic-override={overrides.deleteCancel}
                hasGap={true}
                className={classNames(projectcss.all, sty.deleteCancel)}
              >
                <Button
                  data-plasmic-name={"cancelButton"}
                  data-plasmic-override={overrides.cancelButton}
                  className={classNames("__wab_instance", sty.cancelButton)}
                  color={"clear"}
                  deselected={generateStateValueProp($state, [
                    "cancelButton",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "cancelButton",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalRemoveBookmarksOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modalRemoveBookmarks", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalRemoveBookmarksOpen"] != null &&
                      typeof $steps["updateModalRemoveBookmarksOpen"] ===
                        "object" &&
                      typeof $steps["updateModalRemoveBookmarksOpen"].then ===
                        "function"
                    ) {
                      $steps["updateModalRemoveBookmarksOpen"] = await $steps[
                        "updateModalRemoveBookmarksOpen"
                      ];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "cancelButton",
                    "selected"
                  ])}
                  shape={"sharp"}
                  sortDeselected={generateStateValueProp($state, [
                    "cancelButton",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "cancelButton",
                    "sortSelected"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2Idr
                    )}
                  >
                    {"\u0644\u063a\u0648"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"deleteAllBookmarks"}
                  data-plasmic-override={overrides.deleteAllBookmarks}
                  className={classNames(
                    "__wab_instance",
                    sty.deleteAllBookmarks
                  )}
                  color={"red"}
                  deselected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["deletePatientsBookmarked"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "DELETE",
                              `/n8n/webhook/bookmark_patientcard?namespace_id=${localStorage.getItem(
                                "inlab_user_namespace_id"
                              )}`,
                              {}
                            ]
                          };
                          return $globalActions[
                            "AuthGlobalContext.apiFetcher"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["deletePatientsBookmarked"] != null &&
                      typeof $steps["deletePatientsBookmarked"] === "object" &&
                      typeof $steps["deletePatientsBookmarked"].then ===
                        "function"
                    ) {
                      $steps["deletePatientsBookmarked"] = await $steps[
                        "deletePatientsBookmarked"
                      ];
                    }

                    $steps["updateModalRemoveBookmarksOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modalRemoveBookmarks", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalRemoveBookmarksOpen"] != null &&
                      typeof $steps["updateModalRemoveBookmarksOpen"] ===
                        "object" &&
                      typeof $steps["updateModalRemoveBookmarksOpen"].then ===
                        "function"
                    ) {
                      $steps["updateModalRemoveBookmarksOpen"] = await $steps[
                        "updateModalRemoveBookmarksOpen"
                      ];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "selected"
                  ])}
                  shape={"sharp"}
                  sortDeselected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "sortSelected"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__so9CR
                    )}
                  >
                    {
                      "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
                    }
                  </div>
                </Button>
              </Stack__>
            }
            modalContentClassName={classNames({
              [sty["pcls_pFu_x0Xy_idR"]]: true
            })}
            modalScopeClassName={sty["modalRemoveBookmarks__modal"]}
            okText={
              "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
            }
            onOpenChange={generateStateOnChangeProp($state, [
              "modalRemoveBookmarks",
              "open"
            ])}
            open={generateStateValueProp($state, [
              "modalRemoveBookmarks",
              "open"
            ])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tR3Z
                )}
              >
                {
                  "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0647\u0627"
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_gF08-ctR0P0b"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rSn5A)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vVRbL
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        "آيا اطمينان داريد که مي خواهيد تمام بيماران بوکمارک شده خود در " +
                        localStorage.getItem("inlab_user_namespace_title") +
                        " را پاک کنيد؟ "
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0622\u064a\u0627 \u0627\u0637\u0645\u064a\u0646\u0627\u0646 \u062f\u0627\u0631\u064a\u062f \u06a9\u0647 \u0645\u064a \u062e\u0648\u0627\u0647\u064a\u062f \u062a\u0645\u0627\u0645 \u0628\u064a\u0645\u0627\u0631\u0627\u0646 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0634\u062f\u0647 \u062e\u0648\u062f \u062f\u0631 \u0628\u064a\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u0631\u0627 \u067e\u0627\u06a9 \u06a9\u0646\u064a\u062f\u061f";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </AntdModal>
          <Stack__
            as={"div"}
            data-plasmic-name={"controlPanel"}
            data-plasmic-override={overrides.controlPanel}
            hasGap={true}
            className={classNames(projectcss.all, sty.controlPanel)}
          >
            <div
              data-plasmic-name={"namespaceTitle"}
              data-plasmic-override={overrides.namespaceTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.namespaceTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return localStorage.getItem("inlab_user_namespace_title");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"searchSetting"}
              data-plasmic-override={overrides.searchSetting}
              className={classNames(projectcss.all, sty.searchSetting)}
            >
              <MenuIcon
                data-plasmic-name={"settingIcon"}
                data-plasmic-override={overrides.settingIcon}
                className={classNames(projectcss.all, sty.settingIcon)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToUserSetting"] = true
                    ? (() => {
                        const actionArgs = { destination: `/user/setting` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToUserSetting"] != null &&
                    typeof $steps["goToUserSetting"] === "object" &&
                    typeof $steps["goToUserSetting"].then === "function"
                  ) {
                    $steps["goToUserSetting"] = await $steps["goToUserSetting"];
                  }
                }}
                role={"img"}
              />

              <TextInput
                data-plasmic-name={"searchbar"}
                data-plasmic-override={overrides.searchbar}
                className={classNames("__wab_instance", sty.searchbar)}
                endIcon={
                  <Icons8CloseSvgIcon
                    className={classNames(projectcss.all, sty.svg___2L1F5)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSearchbar2Value"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["searchbar", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSearchbar2Value"] != null &&
                        typeof $steps["updateSearchbar2Value"] === "object" &&
                        typeof $steps["updateSearchbar2Value"].then ===
                          "function"
                      ) {
                        $steps["updateSearchbar2Value"] = await $steps[
                          "updateSearchbar2Value"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["searchbar", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  (async event => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                }}
                placeholder={
                  hasVariant(globalVariants, "screen", "mobileFirst")
                    ? "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633"
                    : "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633"
                }
                startIcon={
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg___2WfJc)}
                    role={"img"}
                  />
                }
                value={
                  generateStateValueProp($state, ["searchbar", "value"]) ?? ""
                }
              />
            </div>
            {(() => {
              try {
                return $state.searchbar.value === "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"mainTabs"}
                data-plasmic-override={overrides.mainTabs}
                hasGap={true}
                className={classNames(projectcss.all, sty.mainTabs)}
              >
                <div
                  data-plasmic-name={"consultButtonStack"}
                  data-plasmic-override={overrides.consultButtonStack}
                  className={classNames(projectcss.all, sty.consultButtonStack)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMainSelectedTab"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["mainSelectedTab"]
                            },
                            operation: 0,
                            value: "consult"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMainSelectedTab"] != null &&
                      typeof $steps["updateMainSelectedTab"] === "object" &&
                      typeof $steps["updateMainSelectedTab"].then === "function"
                    ) {
                      $steps["updateMainSelectedTab"] = await $steps[
                        "updateMainSelectedTab"
                      ];
                    }
                  }}
                >
                  <Icons8CloseSvgIcon
                    className={classNames(projectcss.all, sty.svg__nB2Pe)}
                    role={"img"}
                  />

                  <Button
                    data-plasmic-name={"consult"}
                    data-plasmic-override={overrides.consult}
                    className={classNames("__wab_instance", sty.consult)}
                    deselected={generateStateValueProp($state, [
                      "consult",
                      "deselected"
                    ])}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hnwq5)}
                        role={"img"}
                      />
                    }
                    isDisabled={generateStateValueProp($state, [
                      "consult",
                      "isDisabled"
                    ])}
                    onDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "consult",
                        "deselected"
                      ])(eventArgs[0]);
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "consult",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                    onSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "consult",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    onSortDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "consult",
                        "sortDeselected"
                      ])(eventArgs[0]);
                    }}
                    onSortSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "consult",
                        "sortSelected"
                      ])(eventArgs[0]);
                    }}
                    selected={generateStateValueProp($state, [
                      "consult",
                      "selected"
                    ])}
                    sortDeselected={generateStateValueProp($state, [
                      "consult",
                      "sortDeselected"
                    ])}
                    sortSelected={generateStateValueProp($state, [
                      "consult",
                      "sortSelected"
                    ])}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"bookmarkedPatientNumber2"}
                        data-plasmic-override={
                          overrides.bookmarkedPatientNumber2
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.bookmarkedPatientNumber2
                        )}
                      >
                        {""}
                      </div>
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7MaIw
                      )}
                    >
                      {"\u0645\u0634\u0627\u0648\u0631\u0647 \u0647\u0627"}
                    </div>
                  </Button>
                </div>
                <div
                  data-plasmic-name={"patientsButtonStack"}
                  data-plasmic-override={overrides.patientsButtonStack}
                  className={classNames(
                    projectcss.all,
                    sty.patientsButtonStack
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMainSelectedTab"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["mainSelectedTab"]
                            },
                            operation: 0,
                            value: "patients"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMainSelectedTab"] != null &&
                      typeof $steps["updateMainSelectedTab"] === "object" &&
                      typeof $steps["updateMainSelectedTab"].then === "function"
                    ) {
                      $steps["updateMainSelectedTab"] = await $steps[
                        "updateMainSelectedTab"
                      ];
                    }
                  }}
                >
                  <Icons8CloseSvgIcon
                    className={classNames(projectcss.all, sty.svg__k3F0W)}
                    role={"img"}
                  />

                  <Button
                    data-plasmic-name={"patientsTab"}
                    data-plasmic-override={overrides.patientsTab}
                    className={classNames("__wab_instance", sty.patientsTab)}
                    deselected={generateStateValueProp($state, [
                      "patientsTab",
                      "deselected"
                    ])}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__le76W)}
                        role={"img"}
                      />
                    }
                    isDisabled={generateStateValueProp($state, [
                      "patientsTab",
                      "isDisabled"
                    ])}
                    onDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "patientsTab",
                        "deselected"
                      ])(eventArgs[0]);
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "patientsTab",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                    onSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "patientsTab",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    onSortDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "patientsTab",
                        "sortDeselected"
                      ])(eventArgs[0]);
                    }}
                    onSortSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "patientsTab",
                        "sortSelected"
                      ])(eventArgs[0]);
                    }}
                    selected={generateStateValueProp($state, [
                      "patientsTab",
                      "selected"
                    ])}
                    sortDeselected={generateStateValueProp($state, [
                      "patientsTab",
                      "sortDeselected"
                    ])}
                    sortSelected={generateStateValueProp($state, [
                      "patientsTab",
                      "sortSelected"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3BwK4
                      )}
                    >
                      {"\u0628\u06cc\u0645\u0627\u0631\u0627\u0646"}
                    </div>
                  </Button>
                </div>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $state.searchbar.value !== "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={
                  "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
                }
                data-plasmic-override={overrides.نتايحجستوجو}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.نتايحجستوجو
                )}
              >
                {""}
              </div>
            ) : null}
          </Stack__>
          {(() => {
            try {
              return (
                $state.mainSelectedTab === "consult" &&
                $state.searchbar.value == ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"consultInbox"}
              data-plasmic-override={overrides.consultInbox}
              className={classNames(projectcss.all, sty.consultInbox)}
            >
              <div
                data-plasmic-name={"filtersBar"}
                data-plasmic-override={overrides.filtersBar}
                className={classNames(projectcss.all, sty.filtersBar)}
              >
                <div
                  data-plasmic-name={"filterContent"}
                  data-plasmic-override={overrides.filterContent}
                  className={classNames(projectcss.all, sty.filterContent)}
                >
                  {(() => {
                    try {
                      return (
                        localStorage.getItem("consult_filter_type") !==
                        (null || undefined || "" || "null" || "undefined")
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"filterService"}
                      data-plasmic-override={overrides.filterService}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.filterService
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateModalConsultSenderServiceOpen"] =
                          localStorage.getItem("consult_filter_type") ===
                          "سرویس مبدا"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "modalConsultSenderService",
                                      "open"
                                    ]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateModalConsultSenderServiceOpen"] !=
                            null &&
                          typeof $steps[
                            "updateModalConsultSenderServiceOpen"
                          ] === "object" &&
                          typeof $steps["updateModalConsultSenderServiceOpen"]
                            .then === "function"
                        ) {
                          $steps["updateModalConsultSenderServiceOpen"] =
                            await $steps["updateModalConsultSenderServiceOpen"];
                        }

                        $steps["updateModalConsultReceiverServiceOpen"] =
                          localStorage.getItem("consult_filter_type") ===
                          "سرویس مقصد"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "modalConsultReceiverService",
                                      "open"
                                    ]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateModalConsultReceiverServiceOpen"] !=
                            null &&
                          typeof $steps[
                            "updateModalConsultReceiverServiceOpen"
                          ] === "object" &&
                          typeof $steps["updateModalConsultReceiverServiceOpen"]
                            .then === "function"
                        ) {
                          $steps["updateModalConsultReceiverServiceOpen"] =
                            await $steps[
                              "updateModalConsultReceiverServiceOpen"
                            ];
                        }
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return localStorage.getItem(
                              "filter_service_name"
                            ) !==
                              (null || undefined || "" || "null" || "undefined")
                              ? localStorage.getItem("filter_service_name")
                              : "-";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"filterType"}
                    data-plasmic-override={overrides.filterType}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.filterType
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalConsultFilterTypeOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalConsultFilterType", "open"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalConsultFilterTypeOpen"] != null &&
                        typeof $steps["updateModalConsultFilterTypeOpen"] ===
                          "object" &&
                        typeof $steps["updateModalConsultFilterTypeOpen"]
                          .then === "function"
                      ) {
                        $steps["updateModalConsultFilterTypeOpen"] =
                          await $steps["updateModalConsultFilterTypeOpen"];
                      }
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return localStorage.getItem("consult_filter_type") !==
                            (null || undefined || "" || "null" || "undefined")
                            ? localStorage.getItem("consult_filter_type")
                            : "تعیین نشده";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "-";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k1M
                  )}
                  dir={"rtl"}
                >
                  {"\u0641\u06cc\u0644\u062a\u0631:"}
                </div>
              </div>
              <ApiFetcherComponent
                data-plasmic-name={"consults"}
                data-plasmic-override={overrides.consults}
                className={classNames("__wab_instance", sty.consults)}
                headers={(() => {
                  try {
                    return {
                      "X-Namespace": localStorage.getItem(
                        "inlab_user_namespace_id"
                      )
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                method={"GET"}
                path={`/api/v2/consult?${
                  localStorage.getItem("GET_V2_consult_query_param") !==
                  (null || undefined || "" || "null" || "undefined")
                    ? localStorage.getItem("GET_V2_consult_query_param")
                    : "offset=0&limit=10"
                }`}
                ref={ref => {
                  $refs["consults"] = ref;
                }}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <React.Fragment>
                      {(
                        hasVariant(globalVariants, "screen", "mobileFirst")
                          ? (() => {
                              try {
                                return $ctx.fetched_data.loading == true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : $ctx.fetched_data.loading
                      ) ? (
                        <div
                          data-plasmic-name={
                            "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2"
                          }
                          data-plasmic-override={overrides.لطفامنتظربمانید2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.لطفامنتظربمانید2
                          )}
                        >
                          {
                            "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                          }
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $ctx.fetched_data.loading === false &&
                            $ctx.fetched_data.data.consults == ""
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={
                            "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f"
                          }
                          data-plasmic-override={overrides.مشاورهایییافتنشد}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.مشاورهایییافتنشد
                          )}
                        >
                          {
                            "\u0645\u0634\u0627\u0648\u0631\u0647 \u0627\u06cc\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f"
                          }
                        </div>
                      ) : null}
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetched_data.data.consults;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"inboxConsultCard"}
                            data-plasmic-override={overrides.inboxConsultCard}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.inboxConsultCard
                            )}
                            key={currentIndex}
                          >
                            <div
                              data-plasmic-name={"sentConsultEmergencyStatus"}
                              data-plasmic-override={
                                overrides.sentConsultEmergencyStatus
                              }
                              className={classNames(
                                projectcss.all,
                                sty.sentConsultEmergencyStatus
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    currentItem.priority === 1 ||
                                    currentItem.priority === 2
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"emergentSign"}
                                  data-plasmic-override={overrides.emergentSign}
                                  className={classNames(
                                    projectcss.all,
                                    sty.emergentSign
                                  )}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.priority === 3;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"electiveSign"}
                                  data-plasmic-override={overrides.electiveSign}
                                  className={classNames(
                                    projectcss.all,
                                    sty.electiveSign
                                  )}
                                />
                              ) : null}
                              <div
                                data-plasmic-name={"sentConsultContent"}
                                data-plasmic-override={
                                  overrides.sentConsultContent
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.sentConsultContent
                                )}
                              >
                                <div
                                  data-plasmic-name={"patientSenderReceiver"}
                                  data-plasmic-override={
                                    overrides.patientSenderReceiver
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.patientSenderReceiver
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"patientWard"}
                                    data-plasmic-override={
                                      overrides.patientWard
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.patientWard
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"patientName"}
                                      data-plasmic-override={
                                        overrides.patientName
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.patientName
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              currentItem.patient.first_name +
                                              " " +
                                              currentItem.patient.last_name
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      data-plasmic-name={"patientWard2"}
                                      data-plasmic-override={
                                        overrides.patientWard2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.patientWard2
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.effective_ward
                                              .name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    data-plasmic-name={"senderReceiverService"}
                                    data-plasmic-override={
                                      overrides.senderReceiverService
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.senderReceiverService
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"receiverService"}
                                      data-plasmic-override={
                                        overrides.receiverService
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.receiverService
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem
                                              .consultant_service.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <EvaArrowBackFillIcon
                                      data-plasmic-name={"arrow"}
                                      data-plasmic-override={overrides.arrow}
                                      className={classNames(
                                        projectcss.all,
                                        sty.arrow
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      data-plasmic-name={"senderService"}
                                      data-plasmic-override={
                                        overrides.senderService
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.senderService
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem
                                              .effective_patient_service.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    data-plasmic-name={"senderReceiverDoctor"}
                                    data-plasmic-override={
                                      overrides.senderReceiverDoctor
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.senderReceiverDoctor
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"receiverDoctor"}
                                      data-plasmic-override={
                                        overrides.receiverDoctor
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.receiverDoctor
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              "دکتر" +
                                              " " +
                                              currentItem.suggested_consultant
                                                .first_name +
                                              " " +
                                              currentItem.suggested_consultant
                                                .last_name
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      data-plasmic-name={"senderDoctor"}
                                      data-plasmic-override={
                                        overrides.senderDoctor
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.senderDoctor
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              "دکتر" +
                                              " " +
                                              currentItem.requester.first_name +
                                              " " +
                                              currentItem.requester.last_name
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  data-plasmic-name={
                                    "consultSendDateRepliedStatus"
                                  }
                                  data-plasmic-override={
                                    overrides.consultSendDateRepliedStatus
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.consultSendDateRepliedStatus
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"consultSendDate"}
                                    data-plasmic-override={
                                      overrides.consultSendDate
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.consultSendDate
                                    )}
                                    dir={"rtl"}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const gregorianDate = new Date(
                                              currentItem.effective_request_datetime
                                            );
                                            const shamsiDate =
                                              new Intl.DateTimeFormat(
                                                "fa-IR"
                                              ).format(gregorianDate);
                                            const shamsiTime =
                                              gregorianDate.toLocaleTimeString(
                                                "fa-IR",
                                                { hour12: false }
                                              );
                                            const englishDate =
                                              shamsiDate.replace(/[۰-۹]/g, d =>
                                                String.fromCharCode(
                                                  d.charCodeAt(0) - 1728
                                                )
                                              );
                                            const englishTime =
                                              shamsiTime.replace(/[۰-۹]/g, d =>
                                                String.fromCharCode(
                                                  d.charCodeAt(0) - 1728
                                                )
                                              );
                                            return `${englishTime} ${englishDate} :ارسال`;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(() => {
                                    try {
                                      return currentItem.paper_reply;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"repliedStatus"}
                                      data-plasmic-override={
                                        overrides.repliedStatus
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.repliedStatus
                                      )}
                                    >
                                      {
                                        "\u067e\u0627\u0633\u062e \u062f\u0627\u062f\u0647 \u0634\u062f\u0647"
                                      }
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !currentItem.paper_reply;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                                    ? (() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.replyConsultButton
                                          ),
                                          color: "blue",
                                          deselected: generateStateValueProp(
                                            $state,
                                            [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "deselected"
                                            ]
                                          ),
                                          isDisabled: generateStateValueProp(
                                            $state,
                                            [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "isDisabled"
                                            ]
                                          ),
                                          onClick: async event => {
                                            const $steps = {};

                                            $steps["updateInboxConsultCardId"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "inboxConsultCardId"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem.id
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps[
                                                "updateInboxConsultCardId"
                                              ] != null &&
                                              typeof $steps[
                                                "updateInboxConsultCardId"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateInboxConsultCardId"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateInboxConsultCardId"
                                              ] = await $steps[
                                                "updateInboxConsultCardId"
                                              ];
                                            }

                                            $steps[
                                              "makeFalseReplyConsultUnsuccessfullyAlert"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "replyConsultUnsuccessfullyAlert"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: false
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "makeFalseReplyConsultUnsuccessfullyAlert"
                                              ] != null &&
                                              typeof $steps[
                                                "makeFalseReplyConsultUnsuccessfullyAlert"
                                              ] === "object" &&
                                              typeof $steps[
                                                "makeFalseReplyConsultUnsuccessfullyAlert"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "makeFalseReplyConsultUnsuccessfullyAlert"
                                              ] = await $steps[
                                                "makeFalseReplyConsultUnsuccessfullyAlert"
                                              ];
                                            }

                                            $steps[
                                              "updateModalReplyConsultConfirmationOpen"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "modalReplyConsultConfirmation",
                                                        "open"
                                                      ]
                                                    },
                                                    operation: 4
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    const oldValue = $stateGet(
                                                      objRoot,
                                                      variablePath
                                                    );
                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      !oldValue
                                                    );
                                                    return !oldValue;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateModalReplyConsultConfirmationOpen"
                                              ] != null &&
                                              typeof $steps[
                                                "updateModalReplyConsultConfirmationOpen"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateModalReplyConsultConfirmationOpen"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateModalReplyConsultConfirmationOpen"
                                              ] = await $steps[
                                                "updateModalReplyConsultConfirmationOpen"
                                              ];
                                            }
                                          },
                                          onDeselectedChange: (
                                            ...eventArgs
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "deselected"
                                            ])(eventArgs[0]);
                                          },
                                          onIsDisabledChange: (
                                            ...eventArgs
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "isDisabled"
                                            ])(eventArgs[0]);
                                          },
                                          onSelectedChange: (...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "selected"
                                            ])(eventArgs[0]);
                                          },
                                          onSortDeselectedChange: (
                                            ...eventArgs
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "sortDeselected"
                                            ])(eventArgs[0]);
                                          },
                                          onSortSelectedChange: (
                                            ...eventArgs
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "sortSelected"
                                            ])(eventArgs[0]);
                                          },
                                          selected: generateStateValueProp(
                                            $state,
                                            [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "selected"
                                            ]
                                          ),
                                          shape: "rounded",
                                          sortDeselected:
                                            generateStateValueProp($state, [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "sortDeselected"
                                            ]),
                                          sortSelected: generateStateValueProp(
                                            $state,
                                            [
                                              "replyConsultButton",
                                              __plasmic_idx_0,
                                              "sortSelected"
                                            ]
                                          )
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "replyConsultButton[].isDisabled",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            },
                                            {
                                              name: "replyConsultButton[].selected",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            },
                                            {
                                              name: "replyConsultButton[].deselected",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            },
                                            {
                                              name: "replyConsultButton[].sortDeselected",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            },
                                            {
                                              name: "replyConsultButton[].sortSelected",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            }
                                          ],
                                          [__plasmic_idx_0]
                                        );
                                        return (
                                          <Button
                                            data-plasmic-name={
                                              "replyConsultButton"
                                            }
                                            data-plasmic-override={
                                              overrides.replyConsultButton
                                            }
                                            {...child$Props}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__ahIvw
                                              )}
                                            >
                                              {
                                                "\u0627\u0631\u0633\u0627\u0644 \u067e\u0627\u0633\u062e"
                                              }
                                            </div>
                                          </Button>
                                        );
                                      })()
                                    : null}
                                </div>
                                <div
                                  data-plasmic-name={
                                    "patientDataButtonsInConsultCard"
                                  }
                                  data-plasmic-override={
                                    overrides.patientDataButtonsInConsultCard
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.patientDataButtonsInConsultCard
                                  )}
                                >
                                  <PlasmicImg__
                                    data-plasmic-name={"patientProfile2"}
                                    data-plasmic-override={
                                      overrides.patientProfile2
                                    }
                                    alt={""}
                                    className={classNames(sty.patientProfile2)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"22px"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["goToPatientProfile"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/patient/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .profile_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}/profile/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .admission_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToPatientProfile"] != null &&
                                        typeof $steps["goToPatientProfile"] ===
                                          "object" &&
                                        typeof $steps["goToPatientProfile"]
                                          .then === "function"
                                      ) {
                                        $steps["goToPatientProfile"] =
                                          await $steps["goToPatientProfile"];
                                      }
                                    }}
                                    src={{
                                      src: "/plasmic/inlab/images/group2063.svg",
                                      fullWidth: 18.77,
                                      fullHeight: 20.34,
                                      aspectRatio: 0.904762
                                    }}
                                  />

                                  <PlasmicImg__
                                    data-plasmic-name={"consultNotify2"}
                                    data-plasmic-override={
                                      overrides.consultNotify2
                                    }
                                    alt={""}
                                    className={classNames(sty.consultNotify2)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"25px"}
                                    loading={"lazy"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["goToConsultList"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/consult-list/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .profile_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .admission_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToConsultList"] != null &&
                                        typeof $steps["goToConsultList"] ===
                                          "object" &&
                                        typeof $steps["goToConsultList"]
                                          .then === "function"
                                      ) {
                                        $steps["goToConsultList"] =
                                          await $steps["goToConsultList"];
                                      }
                                    }}
                                    src={{
                                      src: "/plasmic/inlab/images/consult0F4Cb101Svg.svg",
                                      fullWidth: 24,
                                      fullHeight: 24,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <PlasmicImg__
                                    data-plasmic-name={"radiologyReport2"}
                                    data-plasmic-override={
                                      overrides.radiologyReport2
                                    }
                                    alt={""}
                                    className={classNames(sty.radiologyReport2)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"22px"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["goToImagingReportList"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/patient/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .profile_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}/report/list/${(() => {
                                                try {
                                                  return currentItem.admission_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToImagingReportList"] !=
                                          null &&
                                        typeof $steps[
                                          "goToImagingReportList"
                                        ] === "object" &&
                                        typeof $steps["goToImagingReportList"]
                                          .then === "function"
                                      ) {
                                        $steps["goToImagingReportList"] =
                                          await $steps["goToImagingReportList"];
                                      }
                                    }}
                                    src={{
                                      src: "/plasmic/inlab/images/group376.svg",
                                      fullWidth: 19.424,
                                      fullHeight: 19.98,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <PlasmicImg__
                                    data-plasmic-name={"laboratoryData2"}
                                    data-plasmic-override={
                                      overrides.laboratoryData2
                                    }
                                    alt={""}
                                    className={classNames(sty.laboratoryData2)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"22px"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["goToLaboratoryData"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/patient/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .profile_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}/lab/${(() => {
                                                try {
                                                  return currentItem.patient
                                                    .admission_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToLaboratoryData"] != null &&
                                        typeof $steps["goToLaboratoryData"] ===
                                          "object" &&
                                        typeof $steps["goToLaboratoryData"]
                                          .then === "function"
                                      ) {
                                        $steps["goToLaboratoryData"] =
                                          await $steps["goToLaboratoryData"];
                                      }
                                    }}
                                    src={{
                                      src: "/plasmic/inlab/images/group384.svg",
                                      fullWidth: 14.575,
                                      fullHeight: 18.692,
                                      aspectRatio: 0.789474
                                    }}
                                  />
                                </div>
                              </div>
                            </div>
                          </Stack__>
                        );
                      })}
                    </React.Fragment>
                  )}
                </DataCtxReader__>
              </ApiFetcherComponent>
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.mainSelectedTab === "patients" ||
                $state.searchbar.value !== ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ApiFetcherComponent
              data-plasmic-name={"patients"}
              data-plasmic-override={overrides.patients}
              className={classNames("__wab_instance", sty.patients)}
              delay={300}
              method={"GET"}
              path={`/n8n/webhook/patient?search=${
                $state.searchbar.value
              }&namespace_id=${localStorage.getItem(
                "inlab_user_namespace_id"
              )}&ward_id=${
                $state.filterWard ? localStorage.getItem("filter_ward_id") : ""
              }&physician_id=${
                $state.filterPhysician
                  ? localStorage.getItem("filter_physician_id")
                  : ""
              }`}
              ref={ref => {
                $refs["patients"] = ref;
              }}
              requestBody={undefined}
            >
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    <ConditionGuard
                      children={null}
                      className={classNames(
                        "__wab_instance",
                        sty.conditionGuard__lytQs
                      )}
                      condition={(() => {
                        try {
                          return $ctx.fetched_data.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      onNotSatisfied={async () => {
                        const $steps = {};

                        $steps["setLocalBookmarkedList"] =
                          $state.searchbar.value === "" &&
                          $state.filterBookmarked
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "bookmarked_list",
                                        JSON.stringify($ctx.fetched_data.data)
                                      );
                                      return console.log(
                                        `bookmarked_list: ${localStorage.getItem(
                                          "bookmarked_list"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["setLocalBookmarkedList"] != null &&
                          typeof $steps["setLocalBookmarkedList"] ===
                            "object" &&
                          typeof $steps["setLocalBookmarkedList"].then ===
                            "function"
                        ) {
                          $steps["setLocalBookmarkedList"] = await $steps[
                            "setLocalBookmarkedList"
                          ];
                        }

                        $steps["updatePatientNumber"] =
                          $state.searchbar.value == ""
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["patientNumber"]
                                  },
                                  operation: 0,
                                  value:
                                    $ctx.fetched_data.data !=
                                    (null && undefined && "")
                                      ? $ctx.fetched_data.data.length
                                      : ""
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updatePatientNumber"] != null &&
                          typeof $steps["updatePatientNumber"] === "object" &&
                          typeof $steps["updatePatientNumber"].then ===
                            "function"
                        ) {
                          $steps["updatePatientNumber"] = await $steps[
                            "updatePatientNumber"
                          ];
                        }

                        $steps["setLocalPatientsNumber"] =
                          $state.searchbar.value == ""
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "patients_number",
                                        $state.patientNumber
                                      );
                                      return console.log(
                                        `patients_number: ${localStorage.getItem(
                                          "patients_number"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["setLocalPatientsNumber"] != null &&
                          typeof $steps["setLocalPatientsNumber"] ===
                            "object" &&
                          typeof $steps["setLocalPatientsNumber"].then ===
                            "function"
                        ) {
                          $steps["setLocalPatientsNumber"] = await $steps[
                            "setLocalPatientsNumber"
                          ];
                        }
                      }}
                      skipPaths={[]}
                    />

                    <div
                      data-plasmic-name={"patientsControlpanel"}
                      data-plasmic-override={overrides.patientsControlpanel}
                      className={classNames(
                        projectcss.all,
                        sty.patientsControlpanel
                      )}
                    >
                      {(() => {
                        try {
                          return (
                            $state.mainSelectedTab === "patients" &&
                            $state.searchbar.value === ""
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"patientsTabs"}
                          data-plasmic-override={overrides.patientsTabs}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.patientsTabs
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"wardButtonStack"}
                            data-plasmic-override={overrides.wardButtonStack}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.wardButtonStack
                            )}
                          >
                            <Icons8CloseSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jbwB
                              )}
                              role={"img"}
                            />

                            {(
                              hasVariant(
                                globalVariants,
                                "screen",
                                "mobileFirst"
                              )
                                ? false
                                : false
                            ) ? (
                              <Icon4Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fskx3
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Button
                              data-plasmic-name={"ward2"}
                              data-plasmic-override={overrides.ward2}
                              className={classNames(
                                "__wab_instance",
                                sty.ward2
                              )}
                              deselected={generateStateValueProp($state, [
                                "ward2",
                                "deselected"
                              ])}
                              endIcon={
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__uruAv
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={generateStateValueProp($state, [
                                "ward2",
                                "isDisabled"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateModalOpen"] =
                                  $state.filterWard ||
                                  !localStorage.getItem("filter_ward_id") ||
                                  !localStorage.getItem("filter_ward_name")
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["modalWard", "open"]
                                          },
                                          operation: 4
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          const oldValue = $stateGet(
                                            objRoot,
                                            variablePath
                                          );
                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            !oldValue
                                          );
                                          return !oldValue;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateModalOpen"] != null &&
                                  typeof $steps["updateModalOpen"] ===
                                    "object" &&
                                  typeof $steps["updateModalOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalOpen"] = await $steps[
                                    "updateModalOpen"
                                  ];
                                }

                                $steps["setStateSelectedTab"] =
                                  !$state.filterWard &&
                                  localStorage.getItem("filter_ward_id") &&
                                  localStorage.getItem("filter_ward_name")
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "patientsSelectedTab"
                                            ]
                                          },
                                          operation: 0,
                                          value: "ward"
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["setStateSelectedTab"] != null &&
                                  typeof $steps["setStateSelectedTab"] ===
                                    "object" &&
                                  typeof $steps["setStateSelectedTab"].then ===
                                    "function"
                                ) {
                                  $steps["setStateSelectedTab"] = await $steps[
                                    "setStateSelectedTab"
                                  ];
                                }

                                $steps["setSelectedTabLocalStorage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "selected_tab",
                                            $state.patientsSelectedTab.toString()
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["setSelectedTabLocalStorage"] !=
                                    null &&
                                  typeof $steps[
                                    "setSelectedTabLocalStorage"
                                  ] === "object" &&
                                  typeof $steps["setSelectedTabLocalStorage"]
                                    .then === "function"
                                ) {
                                  $steps["setSelectedTabLocalStorage"] =
                                    await $steps["setSelectedTabLocalStorage"];
                                }

                                $steps["logConsole"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            console.log(
                                              `state_selected_tab: ${$state.patientsSelectedTab}`
                                            );
                                            console.log(
                                              `state_filter_bookmarked: ${$state.bookmarked.selected}`
                                            );
                                            console.log(
                                              `state_filter_ward: ${$state.ward2.selected}`
                                            );
                                            console.log(
                                              `state_filter_ward_name: ${$state.filterwardname}`
                                            );
                                            console.log(
                                              `state_filter_professors: ${$state.filterProfessors}`
                                            );
                                            console.log(
                                              `selected_tab: ${localStorage.getItem(
                                                "selected_tab"
                                              )}`
                                            );
                                            console.log(
                                              `filter_ward_name: ${localStorage.getItem(
                                                "filter_ward_name"
                                              )}`
                                            );
                                            return console.log(
                                              `filter_ward_id: ${localStorage.getItem(
                                                "filter_ward_id"
                                              )}`
                                            );
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["logConsole"] != null &&
                                  typeof $steps["logConsole"] === "object" &&
                                  typeof $steps["logConsole"].then ===
                                    "function"
                                ) {
                                  $steps["logConsole"] = await $steps[
                                    "logConsole"
                                  ];
                                }
                              }}
                              onDeselectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "ward2",
                                  "deselected"
                                ])(eventArgs[0]);
                              }}
                              onIsDisabledChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "ward2",
                                  "isDisabled"
                                ])(eventArgs[0]);
                              }}
                              onSelectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "ward2",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              onSortDeselectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "ward2",
                                  "sortDeselected"
                                ])(eventArgs[0]);
                              }}
                              onSortSelectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "ward2",
                                  "sortSelected"
                                ])(eventArgs[0]);
                              }}
                              selected={generateStateValueProp($state, [
                                "ward2",
                                "selected"
                              ])}
                              sortDeselected={generateStateValueProp($state, [
                                "ward2",
                                "sortDeselected"
                              ])}
                              sortSelected={generateStateValueProp($state, [
                                "ward2",
                                "sortSelected"
                              ])}
                            >
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileFirst"
                                )
                                  ? (() => {
                                      try {
                                        return $state.filterWard;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return (
                                          $state.mainSelectedTab ===
                                            "patients" &&
                                          $state.filterWard &&
                                          $state.patientNumber != ""
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  data-plasmic-name={"wardPatientNumber"}
                                  data-plasmic-override={
                                    overrides.wardPatientNumber
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.wardPatientNumber
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.patientNumber;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___69F6Z
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const filterWardName =
                                          $state.filterwardname;
                                        if (filterWardName) {
                                          return filterWardName.includes("بخش")
                                            ? filterWardName
                                            : "بخش " + filterWardName;
                                        } else {
                                          return "بخش";
                                        }
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Button";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Button>
                          </Stack__>
                          <div
                            data-plasmic-name={"physicianButtonStack"}
                            data-plasmic-override={
                              overrides.physicianButtonStack
                            }
                            className={classNames(
                              projectcss.all,
                              sty.physicianButtonStack
                            )}
                          >
                            <Icons8CloseSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o0I05
                              )}
                              role={"img"}
                            />

                            {(
                              hasVariant(
                                globalVariants,
                                "screen",
                                "mobileFirst"
                              )
                                ? false
                                : false
                            ) ? (
                              <Icon4Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uYOsu
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <Button
                              data-plasmic-name={"physician"}
                              data-plasmic-override={overrides.physician}
                              className={classNames(
                                "__wab_instance",
                                sty.physician
                              )}
                              deselected={generateStateValueProp($state, [
                                "physician",
                                "deselected"
                              ])}
                              endIcon={
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__cIycI
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={generateStateValueProp($state, [
                                "physician",
                                "isDisabled"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateModalOpen"] =
                                  !localStorage.getItem(
                                    "filter_physician_id"
                                  ) ||
                                  !localStorage.getItem(
                                    "filter_physician_name"
                                  ) ||
                                  $state.filterPhysician
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "modalPhysician",
                                              "open"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateModalOpen"] != null &&
                                  typeof $steps["updateModalOpen"] ===
                                    "object" &&
                                  typeof $steps["updateModalOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalOpen"] = await $steps[
                                    "updateModalOpen"
                                  ];
                                }

                                $steps["setStateSelectedTab"] =
                                  !$state.filterPhysician &&
                                  localStorage.getItem("filter_physician_id") &&
                                  localStorage.getItem("filter_physician_name")
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "patientsSelectedTab"
                                            ]
                                          },
                                          operation: 0,
                                          value: "physician"
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["setStateSelectedTab"] != null &&
                                  typeof $steps["setStateSelectedTab"] ===
                                    "object" &&
                                  typeof $steps["setStateSelectedTab"].then ===
                                    "function"
                                ) {
                                  $steps["setStateSelectedTab"] = await $steps[
                                    "setStateSelectedTab"
                                  ];
                                }

                                $steps["setSelectedTabLocalStorage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "selected_tab",
                                            $state.patientsSelectedTab.toString()
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["setSelectedTabLocalStorage"] !=
                                    null &&
                                  typeof $steps[
                                    "setSelectedTabLocalStorage"
                                  ] === "object" &&
                                  typeof $steps["setSelectedTabLocalStorage"]
                                    .then === "function"
                                ) {
                                  $steps["setSelectedTabLocalStorage"] =
                                    await $steps["setSelectedTabLocalStorage"];
                                }

                                $steps["logConsole"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            console.log(
                                              `state_selected_tab: ${$state.patientsSelectedTab}`
                                            );
                                            console.log(
                                              `state_filter_physician_name: ${$state.filterphysicianname}`
                                            );
                                            console.log(
                                              `state_filter_physician: ${$state.filterPhysician}`
                                            );
                                            console.log(
                                              `selected_tab: ${localStorage.getItem(
                                                "selected_tab"
                                              )}`
                                            );
                                            console.log(
                                              `filter_physician_name: ${localStorage.getItem(
                                                "filter_physician_name"
                                              )}`
                                            );
                                            return console.log(
                                              `filter_physician_id: ${localStorage.getItem(
                                                "filter_physician_id"
                                              )}`
                                            );
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["logConsole"] != null &&
                                  typeof $steps["logConsole"] === "object" &&
                                  typeof $steps["logConsole"].then ===
                                    "function"
                                ) {
                                  $steps["logConsole"] = await $steps[
                                    "logConsole"
                                  ];
                                }
                              }}
                              onDeselectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "physician",
                                  "deselected"
                                ])(eventArgs[0]);
                              }}
                              onIsDisabledChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "physician",
                                  "isDisabled"
                                ])(eventArgs[0]);
                              }}
                              onSelectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "physician",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              onSortDeselectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "physician",
                                  "sortDeselected"
                                ])(eventArgs[0]);
                              }}
                              onSortSelectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "physician",
                                  "sortSelected"
                                ])(eventArgs[0]);
                              }}
                              selected={generateStateValueProp($state, [
                                "physician",
                                "selected"
                              ])}
                              sortDeselected={generateStateValueProp($state, [
                                "physician",
                                "sortDeselected"
                              ])}
                              sortSelected={generateStateValueProp($state, [
                                "physician",
                                "sortSelected"
                              ])}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.mainSelectedTab === "patients" &&
                                    $state.filterPhysician &&
                                    $state.patientNumber != ""
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"physicianPatientNumber"}
                                  data-plasmic-override={
                                    overrides.physicianPatientNumber
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.physicianPatientNumber
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.patientNumber;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jTn6L
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const filterphysicianName =
                                          $state.filterphysicianname;
                                        if (filterphysicianName) {
                                          return "دکتر " + filterphysicianName;
                                        } else {
                                          return "پزشک";
                                        }
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Button";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Button>
                          </div>
                          <div
                            data-plasmic-name={"bookmarkedButtonStack"}
                            data-plasmic-override={
                              overrides.bookmarkedButtonStack
                            }
                            className={classNames(
                              projectcss.all,
                              sty.bookmarkedButtonStack
                            )}
                          >
                            <Icons8CloseSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rave3
                              )}
                              role={"img"}
                            />

                            <Button
                              data-plasmic-name={"bookmarked"}
                              data-plasmic-override={overrides.bookmarked}
                              className={classNames(
                                "__wab_instance",
                                sty.bookmarked
                              )}
                              deselected={generateStateValueProp($state, [
                                "bookmarked",
                                "deselected"
                              ])}
                              endIcon={
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__eNkB
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={generateStateValueProp($state, [
                                "bookmarked",
                                "isDisabled"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["setBookmarkSelectedTab"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["patientsSelectedTab"]
                                        },
                                        operation: 0,
                                        value: "bookmark"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["setBookmarkSelectedTab"] != null &&
                                  typeof $steps["setBookmarkSelectedTab"] ===
                                    "object" &&
                                  typeof $steps["setBookmarkSelectedTab"]
                                    .then === "function"
                                ) {
                                  $steps["setBookmarkSelectedTab"] =
                                    await $steps["setBookmarkSelectedTab"];
                                }

                                $steps["setSelectedTabLocalStorage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "selected_tab",
                                            $state.patientsSelectedTab.toString()
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["setSelectedTabLocalStorage"] !=
                                    null &&
                                  typeof $steps[
                                    "setSelectedTabLocalStorage"
                                  ] === "object" &&
                                  typeof $steps["setSelectedTabLocalStorage"]
                                    .then === "function"
                                ) {
                                  $steps["setSelectedTabLocalStorage"] =
                                    await $steps["setSelectedTabLocalStorage"];
                                }

                                $steps["consoleLog"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            console.log(
                                              `state_selected_tab: ${$state.patientsSelectedTab} `
                                            );
                                            console.log(
                                              `state_filter_bookmarked: ${$state.filterBookmarked} `
                                            );
                                            return console.log(
                                              `selected_tab: ${localStorage.getItem(
                                                "selected_tab"
                                              )}`
                                            );
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["consoleLog"] != null &&
                                  typeof $steps["consoleLog"] === "object" &&
                                  typeof $steps["consoleLog"].then ===
                                    "function"
                                ) {
                                  $steps["consoleLog"] = await $steps[
                                    "consoleLog"
                                  ];
                                }
                              }}
                              onDeselectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "bookmarked",
                                  "deselected"
                                ])(eventArgs[0]);
                              }}
                              onIsDisabledChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "bookmarked",
                                  "isDisabled"
                                ])(eventArgs[0]);
                              }}
                              onSelectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "bookmarked",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              onSortDeselectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "bookmarked",
                                  "sortDeselected"
                                ])(eventArgs[0]);
                              }}
                              onSortSelectedChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "bookmarked",
                                  "sortSelected"
                                ])(eventArgs[0]);
                              }}
                              selected={generateStateValueProp($state, [
                                "bookmarked",
                                "selected"
                              ])}
                              sortDeselected={generateStateValueProp($state, [
                                "bookmarked",
                                "sortDeselected"
                              ])}
                              sortSelected={generateStateValueProp($state, [
                                "bookmarked",
                                "sortSelected"
                              ])}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.mainSelectedTab === "patients" &&
                                    $state.filterBookmarked &&
                                    $state.patientNumber != ""
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"bookmarkedPatientNumber"}
                                  data-plasmic-override={
                                    overrides.bookmarkedPatientNumber
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.bookmarkedPatientNumber
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.patientNumber;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5DmEl
                                )}
                              >
                                {
                                  "\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0647\u0627"
                                }
                              </div>
                            </Button>
                          </div>
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dgyAh
                        )}
                      >
                        {(() => {
                          try {
                            return (
                              $state.mainSelectedTab === "patients" &&
                              $state.filterBookmarked &&
                              $state.searchbar.value == "" &&
                              $state.patientNumber !== ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            data-plasmic-name={
                              "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627"
                            }
                            data-plasmic-override={
                              overrides.buttonپاککردنهمهبوکمارکها
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.buttonپاککردنهمهبوکمارکها
                            )}
                            color={"red"}
                            deselected={generateStateValueProp($state, [
                              "buttonپاککردنهمهبوکمارکها",
                              "deselected"
                            ])}
                            isDisabled={generateStateValueProp($state, [
                              "buttonپاککردنهمهبوکمارکها",
                              "isDisabled"
                            ])}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateModalRemoveBookmarksOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "modalRemoveBookmarks",
                                          "open"
                                        ]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalRemoveBookmarksOpen"] !=
                                  null &&
                                typeof $steps[
                                  "updateModalRemoveBookmarksOpen"
                                ] === "object" &&
                                typeof $steps["updateModalRemoveBookmarksOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateModalRemoveBookmarksOpen"] =
                                  await $steps[
                                    "updateModalRemoveBookmarksOpen"
                                  ];
                              }
                            }}
                            onDeselectedChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonپاککردنهمهبوکمارکها",
                                "deselected"
                              ])(eventArgs[0]);
                            }}
                            onIsDisabledChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonپاککردنهمهبوکمارکها",
                                "isDisabled"
                              ])(eventArgs[0]);
                            }}
                            onSelectedChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonپاککردنهمهبوکمارکها",
                                "selected"
                              ])(eventArgs[0]);
                            }}
                            onSortDeselectedChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonپاککردنهمهبوکمارکها",
                                "sortDeselected"
                              ])(eventArgs[0]);
                            }}
                            onSortSelectedChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonپاککردنهمهبوکمارکها",
                                "sortSelected"
                              ])(eventArgs[0]);
                            }}
                            selected={generateStateValueProp($state, [
                              "buttonپاککردنهمهبوکمارکها",
                              "selected"
                            ])}
                            sortDeselected={generateStateValueProp($state, [
                              "buttonپاککردنهمهبوکمارکها",
                              "sortDeselected"
                            ])}
                            sortSelected={generateStateValueProp($state, [
                              "buttonپاککردنهمهبوکمارکها",
                              "sortSelected"
                            ])}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ze1An
                              )}
                            >
                              {
                                "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
                              }
                            </div>
                          </Button>
                        ) : null}
                      </div>
                    </div>
                    {(() => {
                      try {
                        return (
                          $ctx.fetched_data.loading === false &&
                          $ctx.fetched_data.data == "" &&
                          $state.searchbar.value !== ""
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={
                          "\u0628\u06cc\u0645\u0627\u0631\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f"
                        }
                        data-plasmic-override={overrides.بیمارییافتنشد}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.بیمارییافتنشد
                        )}
                      >
                        {
                          "\u0628\u06cc\u0645\u0627\u0631\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f"
                        }
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.searchbar.value == "" &&
                          $state.patientNumber === ""
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"bookmarkGuide"}
                        data-plasmic-override={overrides.bookmarkGuide}
                        className={classNames(
                          projectcss.all,
                          sty.bookmarkGuide
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__y0Cq
                          )}
                        >
                          <BookmarkPlusSvgrepoComSvgIcon
                            data-plasmic-name={"bookmarkImage"}
                            data-plasmic-override={overrides.bookmarkImage}
                            className={classNames(
                              projectcss.all,
                              sty.bookmarkImage
                            )}
                            role={"img"}
                          />

                          <BookmarkDashFillSvgrepoComSvgIcon
                            data-plasmic-name={"bookmarkedImage"}
                            data-plasmic-override={overrides.bookmarkedImage}
                            className={classNames(
                              projectcss.all,
                              sty.bookmarkedImage
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jzEz
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                '\u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 "\u0622\u06cc\u06a9\u0648\u0646 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9" \u0628\u06cc\u0645\u0627\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \n\u0644\u06cc\u0633\u062a '
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                '"\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0647\u0627"'
                              }
                            </span>
                            <React.Fragment>
                              {
                                " \u0627\u0636\u0627\u0641\u0647 \u06cc\u0627 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileFirst")
                        ? (() => {
                            try {
                              return $ctx.fetched_data.loading == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $ctx.fetched_data.loading == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <div
                        data-plasmic-name={
                          "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f"
                        }
                        data-plasmic-override={overrides.لطفامنتظربمانید}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.لطفامنتظربمانید
                        )}
                      >
                        {
                          "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                        }
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $ctx.fetched_data.data !== "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                      ? (_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return localStorage.getItem("bookmarked_list") !==
                                (null || undefined || "" || "undefined") &&
                                $ctx.fetched_data.loading &&
                                $state.filterBookmarked &&
                                $state.searchbar.value === ""
                                ? JSON.parse(
                                    localStorage.getItem("bookmarked_list")
                                  )
                                : $ctx.fetched_data.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              data-plasmic-name={"patientCards"}
                              data-plasmic-override={overrides.patientCards}
                              className={classNames(
                                projectcss.all,
                                sty.patientCards
                              )}
                              key={currentIndex}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"patientNameBookmarkIcon"}
                                data-plasmic-override={
                                  overrides.patientNameBookmarkIcon
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.patientNameBookmarkIcon
                                )}
                              >
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"dismision"}
                                    data-plasmic-override={overrides.dismision}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.dismision
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tJgau
                                      )}
                                    >
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{ color: "#DA0000" }}
                                        >
                                          {"\u062a\u0631\u062e\u06cc\u0635"}
                                        </span>
                                      </React.Fragment>
                                    </div>
                                    <IndicatorIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__anjLh
                                      )}
                                      role={"img"}
                                    />
                                  </Stack__>
                                ) : null}
                                {false
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.modalGeneralHealthStatus
                                        ),
                                        defaultStylesClassName: classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        ),
                                        hideFooter: true,
                                        maskClosable: true,
                                        modalContentClassName: classNames({
                                          [sty["pcls_kWuPUuhlM2_n"]]: true
                                        }),
                                        modalScopeClassName:
                                          sty[
                                            "modalGeneralHealthStatus__modal"
                                          ],
                                        onOpenChange: generateStateOnChangeProp(
                                          $state,
                                          [
                                            "modalGeneralHealthStatus",
                                            __plasmic_idx_0,
                                            "open"
                                          ]
                                        ),
                                        open: generateStateValueProp($state, [
                                          "modalGeneralHealthStatus",
                                          __plasmic_idx_0,
                                          "open"
                                        ]),
                                        title: (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__iziA8
                                            )}
                                          >
                                            {
                                              "\u0627\u0639\u0644\u0627\u0645 \u0648\u0636\u0639\u06cc\u062a \u06a9\u0644\u06cc \u0628\u06cc\u0645\u0627\u0631"
                                            }
                                          </div>
                                        ),
                                        trigger: false ? (
                                          <ApiFetcherComponent
                                            data-plasmic-name={
                                              "getMessageHealthStatus"
                                            }
                                            data-plasmic-override={
                                              overrides.getMessageHealthStatus
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.getMessageHealthStatus
                                            )}
                                            method={"GET"}
                                            path={`/api/v3/messages/health-status?namespace_id=${localStorage.getItem(
                                              "inlab_user_namespace_id"
                                            )}&admission_id=${
                                              currentItem.admission_id
                                            }`}
                                            ref={ref => {
                                              $refs["getMessageHealthStatus"] =
                                                ref;
                                            }}
                                          >
                                            <DataCtxReader__>
                                              {$ctx => (
                                                <div
                                                  data-plasmic-name={
                                                    "generalHealthStatusAnnouncement"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.generalHealthStatusAnnouncement
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.generalHealthStatusAnnouncement
                                                  )}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps[
                                                      "makeFalseStableConditionResetAlert"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "stableConditionResetAlert"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: false
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "makeFalseStableConditionResetAlert"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "makeFalseStableConditionResetAlert"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "makeFalseStableConditionResetAlert"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "makeFalseStableConditionResetAlert"
                                                      ] = await $steps[
                                                        "makeFalseStableConditionResetAlert"
                                                      ];
                                                    }

                                                    $steps[
                                                      "makeFalseCriticalConditionAddAlert"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "criticalConditionAddAlert"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: false
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "makeFalseCriticalConditionAddAlert"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "makeFalseCriticalConditionAddAlert"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "makeFalseCriticalConditionAddAlert"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "makeFalseCriticalConditionAddAlert"
                                                      ] = await $steps[
                                                        "makeFalseCriticalConditionAddAlert"
                                                      ];
                                                    }
                                                  }}
                                                >
                                                  {(() => {
                                                    try {
                                                      return (
                                                        $ctx.fetched_data
                                                          .loading === false &&
                                                        $ctx.fetched_data
                                                          .data === 0
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__q9Pfi
                                                      )}
                                                    >
                                                      {
                                                        "\u067e\u0627\u06cc\u062f\u0627\u0631"
                                                      }
                                                    </div>
                                                  ) : null}
                                                  {(() => {
                                                    try {
                                                      return (
                                                        $ctx.fetched_data
                                                          .loading === false &&
                                                        $ctx.fetched_data
                                                          .data !== 0
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__cUnex
                                                      )}
                                                    >
                                                      {
                                                        "\u0628\u062d\u0631\u0627\u0646\u06cc "
                                                      }
                                                    </div>
                                                  ) : null}
                                                  {(() => {
                                                    try {
                                                      return (
                                                        $ctx.fetched_data
                                                          .loading === false &&
                                                        $ctx.fetched_data
                                                          .data !== 0
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      data-plasmic-name={
                                                        "numberOfDoctorReporting"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberOfDoctorReporting
                                                      }
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.numberOfDoctorReporting
                                                      )}
                                                      dir={"rtl"}
                                                    >
                                                      <React.Fragment>
                                                        {`${$ctx.fetched_data.data} پزشک`}
                                                      </React.Fragment>
                                                    </div>
                                                  ) : null}
                                                </div>
                                              )}
                                            </DataCtxReader__>
                                          </ApiFetcherComponent>
                                        ) : null,
                                        wrapClassName: classNames({
                                          [sty["pcls_GAr4R_cSdcgi"]]: true
                                        })
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "open",
                                            plasmicStateName:
                                              "modalGeneralHealthStatus[].open"
                                          }
                                        ],
                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "modalGeneralHealthStatus[].open",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <AntdModal
                                          data-plasmic-name={
                                            "modalGeneralHealthStatus"
                                          }
                                          data-plasmic-override={
                                            overrides.modalGeneralHealthStatus
                                          }
                                          {...child$Props}
                                        >
                                          <div
                                            data-plasmic-name={"modalContent"}
                                            data-plasmic-override={
                                              overrides.modalContent
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.modalContent
                                            )}
                                          >
                                            {(() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.criticalCondition
                                                ),
                                                color: "red",
                                                deselected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "deselected"
                                                    ]
                                                  ),
                                                isDisabled:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "isDisabled"
                                                    ]
                                                  ),
                                                onClick: async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "makeFalseCriticalConditionAddAlertState"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "criticalConditionAddAlert"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: false
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "makeFalseCriticalConditionAddAlertState"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "makeFalseCriticalConditionAddAlertState"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "makeFalseCriticalConditionAddAlertState"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "makeFalseCriticalConditionAddAlertState"
                                                    ] = await $steps[
                                                      "makeFalseCriticalConditionAddAlertState"
                                                    ];
                                                  }

                                                  $steps[
                                                    "makeFalseStableConditionResetAlertState"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "stableConditionResetAlert"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: false
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ] = await $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ];
                                                  }

                                                  $steps[
                                                    "postMessageCriticalCondition"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "POST",
                                                            "/api/v3/messages",
                                                            undefined,
                                                            (() => {
                                                              try {
                                                                return {
                                                                  sender_id:
                                                                    $ctx
                                                                      .inlab_user
                                                                      .user.id,
                                                                  admission_id:
                                                                    currentItem.admission_id,
                                                                  namespace_id:
                                                                    localStorage.getItem(
                                                                      "inlab_user_namespace_id"
                                                                    ),
                                                                  namespace_title:
                                                                    localStorage.getItem(
                                                                      "inlab_user_namespace_title"
                                                                    ),
                                                                  body: "بحرانی"
                                                                };
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "AuthGlobalContext.apiFetcher"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "postMessageCriticalCondition"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "postMessageCriticalCondition"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "postMessageCriticalCondition"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "postMessageCriticalCondition"
                                                    ] = await $steps[
                                                      "postMessageCriticalCondition"
                                                    ];
                                                  }

                                                  $steps[
                                                    "makeTrueCriticalConditionAddAlertState"
                                                  ] =
                                                    $steps
                                                      .postMessageCriticalCondition
                                                      .status === 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "criticalConditionAddAlert"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "True"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "makeTrueCriticalConditionAddAlertState"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "makeTrueCriticalConditionAddAlertState"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "makeTrueCriticalConditionAddAlertState"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "makeTrueCriticalConditionAddAlertState"
                                                    ] = await $steps[
                                                      "makeTrueCriticalConditionAddAlertState"
                                                    ];
                                                  }
                                                },
                                                onDeselectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "deselected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onIsDisabledChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "isDisabled"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onSelectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "selected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onSortDeselectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "sortDeselected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onSortSelectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "sortSelected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                selected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "selected"
                                                    ]
                                                  ),
                                                shape: "rounded",
                                                sortDeselected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "sortDeselected"
                                                    ]
                                                  ),
                                                sortSelected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "criticalCondition",
                                                      __plasmic_idx_0,
                                                      "sortSelected"
                                                    ]
                                                  )
                                              };

                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "criticalCondition[].isDisabled",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "criticalCondition[].selected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "criticalCondition[].deselected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "criticalCondition[].sortDeselected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "criticalCondition[].sortSelected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  }
                                                ],
                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Button
                                                  data-plasmic-name={
                                                    "criticalCondition"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.criticalCondition
                                                  }
                                                  {...child$Props}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__cecl4
                                                    )}
                                                  >
                                                    {
                                                      "\u0648\u0636\u0639\u06cc\u062a \u0628\u062d\u0631\u0627\u0646\u06cc"
                                                    }
                                                  </div>
                                                </Button>
                                              );
                                            })()}
                                            <div
                                              data-plasmic-name={
                                                "criticalDefinition"
                                              }
                                              data-plasmic-override={
                                                overrides.criticalDefinition
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.criticalDefinition
                                              )}
                                              dir={"rtl"}
                                            >
                                              <React.Fragment>
                                                <span
                                                  className={
                                                    "plasmic_default__all plasmic_default__span"
                                                  }
                                                  style={{ color: "#000000" }}
                                                >
                                                  {
                                                    "\u0628\u0647 \u0645\u0639\u0646\u0627\u06cc \u0639\u0644\u0627\u0626\u0645 \u062d\u06cc\u0627\u062a\u06cc \u0646\u0627\u067e\u0627\u06cc\u062f\u0627\u0631 \u06cc\u0627 \u062f\u0631 \u0627\u0646\u062a\u0638\u0627\u0631 \u062a\u062e\u062a ICU \u06cc\u0627 \u0628\u0633\u062a\u0631\u06cc \u062f\u0631 ICU"
                                                  }
                                                </span>
                                                <React.Fragment>
                                                  {"\n"}
                                                </React.Fragment>
                                                <span
                                                  className={
                                                    "plasmic_default__all plasmic_default__span"
                                                  }
                                                  style={{ color: "#000000" }}
                                                >
                                                  {
                                                    "\u0628\u0647 \u062f\u0646\u0628\u0627\u0644 \u0647\u0631 \u0628\u0627\u0631 \u06a9\u0644\u06cc\u06a9\u060c \u06cc\u06a9 \u0646\u0641\u0631 \u0628\u0647 \u062a\u0639\u062f\u0627\u062f \u06af\u0632\u0627\u0631\u0634 \u062f\u0647\u0646\u062f\u06af\u0627\u0646 \u0627\u06cc\u0646 \u0648\u0636\u0639\u06cc\u062a \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc \u0634\u0648\u062f"
                                                  }
                                                </span>
                                              </React.Fragment>
                                            </div>
                                            {(() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.stableCondition
                                                ),
                                                color: "green",
                                                deselected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "deselected"
                                                    ]
                                                  ),
                                                isDisabled:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "isDisabled"
                                                    ]
                                                  ),
                                                onClick: async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "makeFalseStableConditionResetAlertState"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "stableConditionResetAlert"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: false
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ] = await $steps[
                                                      "makeFalseStableConditionResetAlertState"
                                                    ];
                                                  }

                                                  $steps[
                                                    "makeFalseCriticalConditionAddAlert"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "criticalConditionAddAlert"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: false
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "makeFalseCriticalConditionAddAlert"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "makeFalseCriticalConditionAddAlert"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "makeFalseCriticalConditionAddAlert"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "makeFalseCriticalConditionAddAlert"
                                                    ] = await $steps[
                                                      "makeFalseCriticalConditionAddAlert"
                                                    ];
                                                  }

                                                  $steps[
                                                    "postMessageStableCondition"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "POST",
                                                            "/api/v3/messages",
                                                            undefined,
                                                            (() => {
                                                              try {
                                                                return {
                                                                  sender_id:
                                                                    $ctx
                                                                      .inlab_user
                                                                      .user.id,
                                                                  admission_id:
                                                                    currentItem.admission_id,
                                                                  namespace_id:
                                                                    localStorage.getItem(
                                                                      "inlab_user_namespace_id"
                                                                    ),
                                                                  namespace_title:
                                                                    localStorage.getItem(
                                                                      "inlab_user_namespace_title"
                                                                    ),
                                                                  body: "پایدار"
                                                                };
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "AuthGlobalContext.apiFetcher"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "postMessageStableCondition"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "postMessageStableCondition"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "postMessageStableCondition"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "postMessageStableCondition"
                                                    ] = await $steps[
                                                      "postMessageStableCondition"
                                                    ];
                                                  }

                                                  $steps[
                                                    "makeTrueStableConditionResetAlertState"
                                                  ] =
                                                    $steps
                                                      .postMessageStableCondition
                                                      .status === 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "stableConditionResetAlert"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: "True"
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "makeTrueStableConditionResetAlertState"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "makeTrueStableConditionResetAlertState"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "makeTrueStableConditionResetAlertState"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "makeTrueStableConditionResetAlertState"
                                                    ] = await $steps[
                                                      "makeTrueStableConditionResetAlertState"
                                                    ];
                                                  }
                                                },
                                                onDeselectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "deselected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onIsDisabledChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "isDisabled"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onSelectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "selected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onSortDeselectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "sortDeselected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                onSortSelectedChange: (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "sortSelected"
                                                    ]
                                                  )(eventArgs[0]);
                                                },
                                                selected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "selected"
                                                    ]
                                                  ),
                                                shape: "rounded",
                                                sortDeselected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "sortDeselected"
                                                    ]
                                                  ),
                                                sortSelected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "stableCondition",
                                                      __plasmic_idx_0,
                                                      "sortSelected"
                                                    ]
                                                  )
                                              };

                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "stableCondition[].isDisabled",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "stableCondition[].selected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "stableCondition[].deselected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "stableCondition[].sortDeselected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  },
                                                  {
                                                    name: "stableCondition[].sortSelected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => undefined
                                                  }
                                                ],
                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Button
                                                  data-plasmic-name={
                                                    "stableCondition"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.stableCondition
                                                  }
                                                  {...child$Props}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___6MHn
                                                    )}
                                                  >
                                                    {
                                                      "\u0648\u0636\u0639\u06cc\u062a \u067e\u0627\u06cc\u062f\u0627\u0631"
                                                    }
                                                  </div>
                                                </Button>
                                              );
                                            })()}
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___3F4LM
                                              )}
                                            >
                                              <React.Fragment>
                                                <span
                                                  className={
                                                    "plasmic_default__all plasmic_default__span"
                                                  }
                                                  style={{ color: "#000000" }}
                                                >
                                                  {
                                                    "\u0628\u0647 \u0645\u0639\u0646\u0627\u06cc \u062e\u0631\u0648\u062c \u0628\u06cc\u0645\u0627\u0631 \u0627\u0632 \u0648\u0636\u0639\u06cc\u062a \u0628\u062d\u0631\u0627\u0646\u06cc"
                                                  }
                                                </span>
                                                <React.Fragment>
                                                  {"\n"}
                                                </React.Fragment>
                                                <span
                                                  className={
                                                    "plasmic_default__all plasmic_default__span"
                                                  }
                                                  style={{ color: "#000000" }}
                                                >
                                                  {
                                                    "\u0628\u0647 \u062f\u0646\u0628\u0627\u0644 \u0627\u0639\u0644\u0627\u0645\u060c \u0648\u0636\u0639\u06cc\u062a \u0628\u06cc\u0645\u0627\u0631 \u0628\u0647 \u062d\u0627\u0644\u062a \u067e\u06cc\u0634 \u0641\u0631\u0636 \u06cc\u0627 \u067e\u0627\u06cc\u062f\u0627\u0631 \u062f\u0631 \u0645\u06cc \u0622\u06cc\u062f"
                                                  }
                                                </span>
                                              </React.Fragment>
                                            </div>
                                            {(() => {
                                              try {
                                                return $state.criticalConditionAddAlert;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Alert
                                                data-plasmic-name={
                                                  "criticalConditionAdd"
                                                }
                                                data-plasmic-override={
                                                  overrides.criticalConditionAdd
                                                }
                                                body={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__jvZv
                                                    )}
                                                  >
                                                    {
                                                      "\u0628\u0647 \u062a\u0639\u062f\u0627\u062f \u067e\u0632\u0634\u06a9\u0627\u0646 \u0627\u0639\u0644\u0627\u0645 \u06a9\u0646\u0646\u062f\u0647 \u0648\u0636\u0639\u06cc\u062a \u0628\u062d\u0631\u0627\u0646\u06cc \u0628\u06cc\u0645\u0627\u0631 \u06cc\u06a9 \u0646\u0641\u0631 \u0627\u0641\u0632\u0648\u062f\u0647 \u0634\u062f"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.criticalConditionAdd
                                                )}
                                                error={true}
                                                noHeader={true}
                                              />
                                            ) : null}
                                            {(() => {
                                              try {
                                                return $state.stableConditionResetAlert;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Alert
                                                data-plasmic-name={
                                                  "stableConditionReset"
                                                }
                                                data-plasmic-override={
                                                  overrides.stableConditionReset
                                                }
                                                body={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__fJ1Ms
                                                    )}
                                                  >
                                                    {
                                                      "\u0648\u0636\u0639\u06cc\u062a \u067e\u0627\u06cc\u062f\u0627\u0631 \u0628\u06cc\u0645\u0627\u0631 \u062b\u0628\u062a \u0634\u062f"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.stableConditionReset
                                                )}
                                                noHeader={true}
                                                success={true}
                                              />
                                            ) : null}
                                          </div>
                                        </AntdModal>
                                      );
                                    })()
                                  : null}
                                <div
                                  data-plasmic-name={"firstLastName"}
                                  data-plasmic-override={
                                    overrides.firstLastName
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.firstLastName
                                  )}
                                >
                                  <React.Fragment>
                                    {currentItem.first_name +
                                      " " +
                                      currentItem.last_name}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.bookmarkIcon
                                    ),
                                    onSelectedChange: generateStateOnChangeProp(
                                      $state,
                                      [
                                        "bookmarkIcon",
                                        __plasmic_idx_0,
                                        "selected"
                                      ]
                                    ),
                                    patientId: (() => {
                                      try {
                                        return currentItem.profile_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    selected: generateStateValueProp($state, [
                                      "bookmarkIcon",
                                      __plasmic_idx_0,
                                      "selected"
                                    ]),
                                    trigerReload: async () => {
                                      const $steps = {};

                                      $steps["runActionOnPatients"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              tplRef: "patients",
                                              action: "reload"
                                            };
                                            return (({
                                              tplRef,
                                              action,
                                              args
                                            }) => {
                                              return $refs?.[tplRef]?.[
                                                action
                                              ]?.(...(args ?? []));
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runActionOnPatients"] != null &&
                                        typeof $steps["runActionOnPatients"] ===
                                          "object" &&
                                        typeof $steps["runActionOnPatients"]
                                          .then === "function"
                                      ) {
                                        $steps["runActionOnPatients"] =
                                          await $steps["runActionOnPatients"];
                                      }
                                    }
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "bookmarkIcon[].selected",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.bookmarked;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return false;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <BookmarkIcon
                                      data-plasmic-name={"bookmarkIcon"}
                                      data-plasmic-override={
                                        overrides.bookmarkIcon
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </Stack__>
                              <div
                                data-plasmic-name={"wardRoom"}
                                data-plasmic-override={overrides.wardRoom}
                                className={classNames(
                                  projectcss.all,
                                  sty.wardRoom
                                )}
                              >
                                <div
                                  data-plasmic-name={"roomBed"}
                                  data-plasmic-override={overrides.roomBed}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.roomBed
                                  )}
                                >
                                  <React.Fragment>
                                    {currentItem.bed === null
                                      ? ""
                                      : currentItem.bed.includes("تخت")
                                      ? currentItem.bed
                                      : "تخت " + currentItem.bed}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={"ward"}
                                  data-plasmic-override={overrides.ward}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.ward
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.ward.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"patientDataButtons"}
                                data-plasmic-override={
                                  overrides.patientDataButtons
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.patientDataButtons
                                )}
                              >
                                <PlasmicImg__
                                  data-plasmic-name={"patientProfile"}
                                  data-plasmic-override={
                                    overrides.patientProfile
                                  }
                                  alt={""}
                                  className={classNames(sty.patientProfile)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["goToPatientProfile"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: `/patient/${(() => {
                                              try {
                                                return currentItem.profile_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}/profile/${(() => {
                                              try {
                                                return currentItem.admission_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}`
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToPatientProfile"] != null &&
                                      typeof $steps["goToPatientProfile"] ===
                                        "object" &&
                                      typeof $steps["goToPatientProfile"]
                                        .then === "function"
                                    ) {
                                      $steps["goToPatientProfile"] =
                                        await $steps["goToPatientProfile"];
                                    }
                                  }}
                                  src={{
                                    src: "/plasmic/inlab/images/group2063.svg",
                                    fullWidth: 18.77,
                                    fullHeight: 20.34,
                                    aspectRatio: 0.904762
                                  }}
                                />

                                <PlasmicImg__
                                  data-plasmic-name={"consultNotify"}
                                  data-plasmic-override={
                                    overrides.consultNotify
                                  }
                                  alt={""}
                                  className={classNames(sty.consultNotify)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  loading={"lazy"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["goToConsultList"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: `/consult-list/${(() => {
                                              try {
                                                return currentItem.profile_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}/${(() => {
                                              try {
                                                return currentItem.admission_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}`
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToConsultList"] != null &&
                                      typeof $steps["goToConsultList"] ===
                                        "object" &&
                                      typeof $steps["goToConsultList"].then ===
                                        "function"
                                    ) {
                                      $steps["goToConsultList"] = await $steps[
                                        "goToConsultList"
                                      ];
                                    }
                                  }}
                                  src={{
                                    src: "/plasmic/inlab/images/consult0F4Cb101Svg.svg",
                                    fullWidth: 24,
                                    fullHeight: 24,
                                    aspectRatio: 1
                                  }}
                                />

                                <PlasmicImg__
                                  data-plasmic-name={"radiologyReport"}
                                  data-plasmic-override={
                                    overrides.radiologyReport
                                  }
                                  alt={""}
                                  className={classNames(sty.radiologyReport)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["goToImagingReportList"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: `/patient/${(() => {
                                              try {
                                                return currentItem.profile_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}/report/list/${(() => {
                                              try {
                                                return currentItem.admission_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}`
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToImagingReportList"] != null &&
                                      typeof $steps["goToImagingReportList"] ===
                                        "object" &&
                                      typeof $steps["goToImagingReportList"]
                                        .then === "function"
                                    ) {
                                      $steps["goToImagingReportList"] =
                                        await $steps["goToImagingReportList"];
                                    }
                                  }}
                                  src={{
                                    src: "/plasmic/inlab/images/group376.svg",
                                    fullWidth: 19.424,
                                    fullHeight: 19.98,
                                    aspectRatio: 1
                                  }}
                                />

                                <PlasmicImg__
                                  data-plasmic-name={"laboratoryData"}
                                  data-plasmic-override={
                                    overrides.laboratoryData
                                  }
                                  alt={""}
                                  className={classNames(sty.laboratoryData)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["goToLaboratoryData"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: `/patient/${(() => {
                                              try {
                                                return currentItem.profile_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}/lab/${(() => {
                                              try {
                                                return currentItem.admission_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}`
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToLaboratoryData"] != null &&
                                      typeof $steps["goToLaboratoryData"] ===
                                        "object" &&
                                      typeof $steps["goToLaboratoryData"]
                                        .then === "function"
                                    ) {
                                      $steps["goToLaboratoryData"] =
                                        await $steps["goToLaboratoryData"];
                                    }
                                  }}
                                  src={{
                                    src: "/plasmic/inlab/images/group384.svg",
                                    fullWidth: 14.575,
                                    fullHeight: 18.692,
                                    aspectRatio: 0.789474
                                  }}
                                />
                              </div>
                            </div>
                          );
                        })
                      : null}
                  </React.Fragment>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          ) : null}
        </div>
        <Button
          data-plasmic-name={"commentButton"}
          data-plasmic-override={overrides.commentButton}
          className={classNames("__wab_instance", sty.commentButton)}
          color={"blue"}
          deselected={generateStateValueProp($state, [
            "commentButton",
            "deselected"
          ])}
          isDisabled={generateStateValueProp($state, [
            "commentButton",
            "isDisabled"
          ])}
          link={
            "https://docs.google.com/forms/d/e/1FAIpQLSdm--yB5xsMJ_PW-MFyyp_-3APBQ8dzti69zsMuIJz6SfoX-g/viewform?usp=sf_link"
          }
          onDeselectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "deselected"])(
              eventArgs[0]
            );
          }}
          onIsDisabledChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "isDisabled"])(
              eventArgs[0]
            );
          }}
          onSelectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "selected"])(
              eventArgs[0]
            );
          }}
          onSortDeselectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, [
              "commentButton",
              "sortDeselected"
            ])(eventArgs[0]);
          }}
          onSortSelectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, [
              "commentButton",
              "sortSelected"
            ])(eventArgs[0]);
          }}
          selected={generateStateValueProp($state, [
            "commentButton",
            "selected"
          ])}
          shape={"round"}
          size4={"compact"}
          sortDeselected={generateStateValueProp($state, [
            "commentButton",
            "sortDeselected"
          ])}
          sortSelected={generateStateValueProp($state, [
            "commentButton",
            "sortSelected"
          ])}
          target={true}
        >
          <Icon2Icon
            className={classNames(projectcss.all, sty.svg__rkQ3J)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bLr8V
            )}
          >
            {""}
          </div>
        </Button>
        <AntdModal
          data-plasmic-name={"modalWard"}
          data-plasmic-override={overrides.modalWard}
          className={classNames("__wab_instance", sty.modalWard)}
          closeButtonClassName={classNames({
            [sty["pcls_d2EHzAfk33c5"]]: true
          })}
          closeIcon={null}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={false}
          modalContentClassName={classNames({
            [sty["pcls_ovYNN16Mla3e"]]: true
          })}
          modalScopeClassName={sty["modalWard__modal"]}
          onOpenChange={generateStateOnChangeProp($state, [
            "modalWard",
            "open"
          ])}
          open={generateStateValueProp($state, ["modalWard", "open"])}
          title={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rmb7C)}
            >
              <Icons8CloseSvgIcon
                className={classNames(projectcss.all, sty.svg__iTh9P)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalWardOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalWard", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalWardOpen"] != null &&
                    typeof $steps["updateModalWardOpen"] === "object" &&
                    typeof $steps["updateModalWardOpen"].then === "function"
                  ) {
                    $steps["updateModalWardOpen"] = await $steps[
                      "updateModalWardOpen"
                    ];
                  }

                  $steps["runActionOnPatients"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "patients",
                          action: "reload"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runActionOnPatients"] != null &&
                    typeof $steps["runActionOnPatients"] === "object" &&
                    typeof $steps["runActionOnPatients"].then === "function"
                  ) {
                    $steps["runActionOnPatients"] = await $steps[
                      "runActionOnPatients"
                    ];
                  }
                }}
                role={"img"}
              />

              <TextInput
                data-plasmic-name={"searchbarWard"}
                data-plasmic-override={overrides.searchbarWard}
                className={classNames("__wab_instance", sty.searchbarWard)}
                endIcon={
                  <Icons8CloseSvgIcon
                    className={classNames(projectcss.all, sty.svg__zAnQd)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSearchbarWardValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["searchbarWard", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSearchbarWardValue"] != null &&
                        typeof $steps["updateSearchbarWardValue"] ===
                          "object" &&
                        typeof $steps["updateSearchbarWardValue"].then ===
                          "function"
                      ) {
                        $steps["updateSearchbarWardValue"] = await $steps[
                          "updateSearchbarWardValue"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                }
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["searchbarWard", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={
                  hasVariant(globalVariants, "screen", "mobileFirst")
                    ? "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633"
                    : "\u0646\u0627\u0645 \u0628\u062e\u0634 \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                }
                startIcon={
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg__pLnXy)}
                    role={"img"}
                  />
                }
                value={
                  generateStateValueProp($state, ["searchbarWard", "value"]) ??
                  ""
                }
              />
            </Stack__>
          }
          trigger={null}
          wrapClassName={classNames({ [sty["pcls_9pcykcaA_oRg"]]: true })}
        >
          <ApiFetcherComponent
            data-plasmic-name={"ward3"}
            data-plasmic-override={overrides.ward3}
            className={classNames("__wab_instance", sty.ward3)}
            delay={300}
            method={"GET"}
            path={`/n8n/webhook/ward?namespace=${localStorage.getItem(
              "inlab_user_namespace_id"
            )}&search=${$state.searchbarWard.value}`}
            ref={ref => {
              $refs["ward3"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <ConditionGuard
                    children={null}
                    className={classNames(
                      "__wab_instance",
                      sty.conditionGuard__vzTt2
                    )}
                    condition={(() => {
                      try {
                        return $ctx.fetched_data.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    onNotSatisfied={async () => {
                      const $steps = {};

                      $steps["setLocalWardList"] =
                        $state.searchbarWard.value == ""
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    localStorage.setItem(
                                      "ward_list",
                                      JSON.stringify($ctx.fetched_data.data)
                                    );
                                    return console.log(
                                      `ward_list: ${localStorage.getItem(
                                        "ward_list"
                                      )}`
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["setLocalWardList"] != null &&
                        typeof $steps["setLocalWardList"] === "object" &&
                        typeof $steps["setLocalWardList"].then === "function"
                      ) {
                        $steps["setLocalWardList"] = await $steps[
                          "setLocalWardList"
                        ];
                      }
                    }}
                    skipPaths={[]}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"wardsList"}
                    data-plasmic-override={overrides.wardsList}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.wardsList)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return localStorage.getItem("ward_list") &&
                            $state.searchbarWard.value === ""
                            ? JSON.parse(localStorage.getItem("ward_list"))
                            : $ctx.fetched_data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"wardsName"}
                          data-plasmic-override={overrides.wardsName}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.wardsName
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateModalWardOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalWard", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalWardOpen"] != null &&
                              typeof $steps["updateModalWardOpen"] ===
                                "object" &&
                              typeof $steps["updateModalWardOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalWardOpen"] = await $steps[
                                "updateModalWardOpen"
                              ];
                            }

                            $steps["setStateSelectedTab"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["patientsSelectedTab"]
                                    },
                                    operation: 0,
                                    value: "ward"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setStateSelectedTab"] != null &&
                              typeof $steps["setStateSelectedTab"] ===
                                "object" &&
                              typeof $steps["setStateSelectedTab"].then ===
                                "function"
                            ) {
                              $steps["setStateSelectedTab"] = await $steps[
                                "setStateSelectedTab"
                              ];
                            }

                            $steps["setSelectedTabLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "selected_tab",
                                        $state.patientsSelectedTab.toString()
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setSelectedTabLocalStorage"] != null &&
                              typeof $steps["setSelectedTabLocalStorage"] ===
                                "object" &&
                              typeof $steps["setSelectedTabLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["setSelectedTabLocalStorage"] =
                                await $steps["setSelectedTabLocalStorage"];
                            }

                            $steps["setStateFilterwardname"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["filterwardname"]
                                    },
                                    operation: 0,
                                    value: currentItem.name
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setStateFilterwardname"] != null &&
                              typeof $steps["setStateFilterwardname"] ===
                                "object" &&
                              typeof $steps["setStateFilterwardname"].then ===
                                "function"
                            ) {
                              $steps["setStateFilterwardname"] = await $steps[
                                "setStateFilterwardname"
                              ];
                            }

                            $steps["setWardNameWardIdLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        localStorage.setItem(
                                          "filter_ward_name",
                                          $state.filterwardname.toString()
                                        );
                                        return localStorage.setItem(
                                          "filter_ward_id",
                                          currentItem.id
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setWardNameWardIdLocalStorage"] != null &&
                              typeof $steps["setWardNameWardIdLocalStorage"] ===
                                "object" &&
                              typeof $steps["setWardNameWardIdLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["setWardNameWardIdLocalStorage"] =
                                await $steps["setWardNameWardIdLocalStorage"];
                            }

                            $steps["logConsole"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        console.log(
                                          `state_selected_tab: ${$state.patientsSelectedTab}`
                                        );
                                        console.log(
                                          `state_filter_bookmarked: ${$state.bookmarked.selected}`
                                        );
                                        console.log(
                                          `state_filter_ward: ${$state.ward2.selected}`
                                        );
                                        console.log(
                                          `state_filter_ward_name: ${$state.filterwardname}`
                                        );
                                        console.log(
                                          `state_filter_professors: ${$state.filterProfessors}`
                                        );
                                        console.log(
                                          `selected_tab: ${localStorage.getItem(
                                            "selected_tab"
                                          )}`
                                        );
                                        console.log(
                                          `filter_ward_name: ${localStorage.getItem(
                                            "filter_ward_name"
                                          )}`
                                        );
                                        return console.log(
                                          `filter_ward_id: ${localStorage.getItem(
                                            "filter_ward_id"
                                          )}`
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["logConsole"] != null &&
                              typeof $steps["logConsole"] === "object" &&
                              typeof $steps["logConsole"].then === "function"
                            ) {
                              $steps["logConsole"] = await $steps["logConsole"];
                            }
                          }}
                        >
                          <React.Fragment>{currentItem.name}</React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modalPhysician"}
          data-plasmic-override={overrides.modalPhysician}
          className={classNames("__wab_instance", sty.modalPhysician)}
          closeButtonClassName={classNames({
            [sty["pcls_hdcm5qbTGf-c"]]: true
          })}
          closeIcon={null}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={false}
          modalContentClassName={classNames({
            [sty["pcls_KLtjHhS7Dowx"]]: true
          })}
          modalScopeClassName={sty["modalPhysician__modal"]}
          onOpenChange={generateStateOnChangeProp($state, [
            "modalPhysician",
            "open"
          ])}
          open={generateStateValueProp($state, ["modalPhysician", "open"])}
          title={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rkeNk)}
            >
              <Icons8CloseSvgIcon
                className={classNames(projectcss.all, sty.svg___0Tmhc)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalphysicianOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalPhysician", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalphysicianOpen"] != null &&
                    typeof $steps["updateModalphysicianOpen"] === "object" &&
                    typeof $steps["updateModalphysicianOpen"].then ===
                      "function"
                  ) {
                    $steps["updateModalphysicianOpen"] = await $steps[
                      "updateModalphysicianOpen"
                    ];
                  }

                  $steps["runActionOnPatients"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "patients",
                          action: "reload"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runActionOnPatients"] != null &&
                    typeof $steps["runActionOnPatients"] === "object" &&
                    typeof $steps["runActionOnPatients"].then === "function"
                  ) {
                    $steps["runActionOnPatients"] = await $steps[
                      "runActionOnPatients"
                    ];
                  }
                }}
                role={"img"}
              />

              <TextInput
                data-plasmic-name={"searchbarPhysicians"}
                data-plasmic-override={overrides.searchbarPhysicians}
                className={classNames(
                  "__wab_instance",
                  sty.searchbarPhysicians
                )}
                endIcon={
                  <Icons8CloseSvgIcon
                    className={classNames(projectcss.all, sty.svg__ebXu6)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSearchbarWardValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["searchbarPhysicians", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSearchbarWardValue"] != null &&
                        typeof $steps["updateSearchbarWardValue"] ===
                          "object" &&
                        typeof $steps["updateSearchbarWardValue"].then ===
                          "function"
                      ) {
                        $steps["updateSearchbarWardValue"] = await $steps[
                          "updateSearchbarWardValue"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                }
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "searchbarPhysicians",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }}
                placeholder={
                  hasVariant(globalVariants, "screen", "mobileFirst")
                    ? "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633"
                    : "\u0646\u0627\u0645 \u064a\u0627 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u064a \u0627\u0633\u062a\u0627\u062f \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                }
                startIcon={
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg__eefHg)}
                    role={"img"}
                  />
                }
                value={
                  generateStateValueProp($state, [
                    "searchbarPhysicians",
                    "value"
                  ]) ?? ""
                }
              />
            </Stack__>
          }
          trigger={null}
          wrapClassName={classNames({ [sty["pcls_IF4RfoWSlpeq"]]: true })}
        >
          <ApiFetcherComponent
            data-plasmic-name={"physiciansList"}
            data-plasmic-override={overrides.physiciansList}
            className={classNames("__wab_instance", sty.physiciansList)}
            delay={300}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v3/patient/physician?physician_name=${$state.searchbarPhysicians.value}&patient_id=0`}
            ref={ref => {
              $refs["physiciansList"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <ConditionGuard
                    children={null}
                    className={classNames(
                      "__wab_instance",
                      sty.conditionGuard__zAYx0
                    )}
                    condition={(() => {
                      try {
                        return $ctx.fetched_data.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    onNotSatisfied={async () => {
                      const $steps = {};

                      $steps["setLocalPhysiciansList"] =
                        $state.searchbarPhysicians.value == ""
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    localStorage.setItem(
                                      "physicians_list",
                                      JSON.stringify($ctx.fetched_data.data)
                                    );
                                    return console.log(
                                      `physicians_list: ${localStorage.getItem(
                                        "physicians_list"
                                      )}`
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["setLocalPhysiciansList"] != null &&
                        typeof $steps["setLocalPhysiciansList"] === "object" &&
                        typeof $steps["setLocalPhysiciansList"].then ===
                          "function"
                      ) {
                        $steps["setLocalPhysiciansList"] = await $steps[
                          "setLocalPhysiciansList"
                        ];
                      }
                    }}
                    skipPaths={[]}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"physiciansList2"}
                    data-plasmic-override={overrides.physiciansList2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.physiciansList2)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return localStorage.getItem("physicians_list") &&
                            $state.searchbarPhysicians.value === ""
                            ? JSON.parse(
                                localStorage.getItem("physicians_list")
                              )
                            : $ctx.fetched_data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"physiciansName"}
                          data-plasmic-override={overrides.physiciansName}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.physiciansName
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateModalphysicianOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalPhysician", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalphysicianOpen"] != null &&
                              typeof $steps["updateModalphysicianOpen"] ===
                                "object" &&
                              typeof $steps["updateModalphysicianOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalphysicianOpen"] = await $steps[
                                "updateModalphysicianOpen"
                              ];
                            }

                            $steps["setStateSelectedTab"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["patientsSelectedTab"]
                                    },
                                    operation: 0,
                                    value: "physician"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setStateSelectedTab"] != null &&
                              typeof $steps["setStateSelectedTab"] ===
                                "object" &&
                              typeof $steps["setStateSelectedTab"].then ===
                                "function"
                            ) {
                              $steps["setStateSelectedTab"] = await $steps[
                                "setStateSelectedTab"
                              ];
                            }

                            $steps["setSelectedTabLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "selected_tab",
                                        $state.patientsSelectedTab.toString()
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setSelectedTabLocalStorage"] != null &&
                              typeof $steps["setSelectedTabLocalStorage"] ===
                                "object" &&
                              typeof $steps["setSelectedTabLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["setSelectedTabLocalStorage"] =
                                await $steps["setSelectedTabLocalStorage"];
                            }

                            $steps["setStateFilterphysicianname"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["filterphysicianname"]
                                    },
                                    operation: 0,
                                    value: currentItem.name
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setStateFilterphysicianname"] != null &&
                              typeof $steps["setStateFilterphysicianname"] ===
                                "object" &&
                              typeof $steps["setStateFilterphysicianname"]
                                .then === "function"
                            ) {
                              $steps["setStateFilterphysicianname"] =
                                await $steps["setStateFilterphysicianname"];
                            }

                            $steps["setPhysicianNamePhysicianIdLocalStorage"] =
                              true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          localStorage.setItem(
                                            "filter_physician_name",
                                            $state.filterphysicianname.toString()
                                          );
                                          return localStorage.setItem(
                                            "filter_physician_id",
                                            currentItem.code
                                          );
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps[
                                "setPhysicianNamePhysicianIdLocalStorage"
                              ] != null &&
                              typeof $steps[
                                "setPhysicianNamePhysicianIdLocalStorage"
                              ] === "object" &&
                              typeof $steps[
                                "setPhysicianNamePhysicianIdLocalStorage"
                              ].then === "function"
                            ) {
                              $steps[
                                "setPhysicianNamePhysicianIdLocalStorage"
                              ] = await $steps[
                                "setPhysicianNamePhysicianIdLocalStorage"
                              ];
                            }

                            $steps["logConsole"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        console.log(
                                          `state_selected_tab: ${$state.patientsSelectedTab}`
                                        );
                                        console.log(
                                          `state_filter_bookmarked: ${$state.bookmarked.selected}`
                                        );
                                        console.log(
                                          `state_filter_ward: ${$state.ward2.selected}`
                                        );
                                        console.log(
                                          `state_filter_ward_name: ${$state.filterwardname}`
                                        );
                                        console.log(
                                          `state_filter_physician_name: ${$state.filterphysicianname}`
                                        );
                                        console.log(
                                          `state_filter_physicians: ${$state.filterphysician}`
                                        );
                                        console.log(
                                          `selected_tab: ${localStorage.getItem(
                                            "selected_tab"
                                          )}`
                                        );
                                        console.log(
                                          `filter_physician_name: ${localStorage.getItem(
                                            "filter_physician_name"
                                          )}`
                                        );
                                        return console.log(
                                          `filter_physician_id: ${localStorage.getItem(
                                            "filter_physician_id"
                                          )}`
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["logConsole"] != null &&
                              typeof $steps["logConsole"] === "object" &&
                              typeof $steps["logConsole"].then === "function"
                            ) {
                              $steps["logConsole"] = await $steps["logConsole"];
                            }
                          }}
                        >
                          <React.Fragment>{currentItem.name}</React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </AntdModal>
        {(() => {
          try {
            return $state.mainSelectedTab === "consult";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <AntdModal
            data-plasmic-name={"modalConsultFilterType"}
            data-plasmic-override={overrides.modalConsultFilterType}
            className={classNames("__wab_instance", sty.modalConsultFilterType)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={true}
            modalContentClassName={classNames({
              [sty["pcls_TxpP0WANneR1"]]: true
            })}
            modalScopeClassName={sty["modalConsultFilterType__modal"]}
            onOpenChange={generateStateOnChangeProp($state, [
              "modalConsultFilterType",
              "open"
            ])}
            open={generateStateValueProp($state, [
              "modalConsultFilterType",
              "open"
            ])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sja3A
                )}
              >
                {
                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0648\u0639 \u0641\u06cc\u0644\u062a\u0631 \u0645\u0634\u0627\u0648\u0631\u0647"
                }
              </div>
            }
            trigger={null}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"filterTypes"}
              data-plasmic-override={overrides.filterTypes}
              hasGap={true}
              className={classNames(projectcss.all, sty.filterTypes)}
            >
              <div
                data-plasmic-name={"senderServiceType"}
                data-plasmic-override={overrides.senderServiceType}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.senderServiceType
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["setLocalConsultFilterType"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.setItem(
                              "consult_filter_type",
                              "سرویس مبدا"
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLocalConsultFilterType"] != null &&
                    typeof $steps["setLocalConsultFilterType"] === "object" &&
                    typeof $steps["setLocalConsultFilterType"].then ===
                      "function"
                  ) {
                    $steps["setLocalConsultFilterType"] = await $steps[
                      "setLocalConsultFilterType"
                    ];
                  }

                  $steps["updateModalConsultFilterTypeOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalConsultFilterType", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalConsultFilterTypeOpen"] != null &&
                    typeof $steps["updateModalConsultFilterTypeOpen"] ===
                      "object" &&
                    typeof $steps["updateModalConsultFilterTypeOpen"].then ===
                      "function"
                  ) {
                    $steps["updateModalConsultFilterTypeOpen"] = await $steps[
                      "updateModalConsultFilterTypeOpen"
                    ];
                  }

                  $steps["updateModalConsultSenderServiceOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalConsultSenderService", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalConsultSenderServiceOpen"] != null &&
                    typeof $steps["updateModalConsultSenderServiceOpen"] ===
                      "object" &&
                    typeof $steps["updateModalConsultSenderServiceOpen"]
                      .then === "function"
                  ) {
                    $steps["updateModalConsultSenderServiceOpen"] =
                      await $steps["updateModalConsultSenderServiceOpen"];
                  }
                }}
              >
                {"\u0633\u0631\u0648\u06cc\u0633 \u0645\u0628\u062f\u0627"}
              </div>
              <div
                data-plasmic-name={"receiverServiceType"}
                data-plasmic-override={overrides.receiverServiceType}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.receiverServiceType
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["setLocalConsultFilterType"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.setItem(
                              "consult_filter_type",
                              "سرویس مقصد"
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLocalConsultFilterType"] != null &&
                    typeof $steps["setLocalConsultFilterType"] === "object" &&
                    typeof $steps["setLocalConsultFilterType"].then ===
                      "function"
                  ) {
                    $steps["setLocalConsultFilterType"] = await $steps[
                      "setLocalConsultFilterType"
                    ];
                  }

                  $steps["updateModalConsultFilterTypeOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalConsultFilterType", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalConsultFilterTypeOpen"] != null &&
                    typeof $steps["updateModalConsultFilterTypeOpen"] ===
                      "object" &&
                    typeof $steps["updateModalConsultFilterTypeOpen"].then ===
                      "function"
                  ) {
                    $steps["updateModalConsultFilterTypeOpen"] = await $steps[
                      "updateModalConsultFilterTypeOpen"
                    ];
                  }

                  $steps["updateModalConsultReceiverServiceOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: [
                              "modalConsultReceiverService",
                              "open"
                            ]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalConsultReceiverServiceOpen"] != null &&
                    typeof $steps["updateModalConsultReceiverServiceOpen"] ===
                      "object" &&
                    typeof $steps["updateModalConsultReceiverServiceOpen"]
                      .then === "function"
                  ) {
                    $steps["updateModalConsultReceiverServiceOpen"] =
                      await $steps["updateModalConsultReceiverServiceOpen"];
                  }
                }}
              >
                {"\u0633\u0631\u0648\u06cc\u0633 \u0645\u0642\u0635\u062f"}
              </div>
              <div
                data-plasmic-name={"deleteFilters"}
                data-plasmic-override={overrides.deleteFilters}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.deleteFilters
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["setLocalConsultFilterType"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.removeItem(
                              "consult_filter_type"
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLocalConsultFilterType"] != null &&
                    typeof $steps["setLocalConsultFilterType"] === "object" &&
                    typeof $steps["setLocalConsultFilterType"].then ===
                      "function"
                  ) {
                    $steps["setLocalConsultFilterType"] = await $steps[
                      "setLocalConsultFilterType"
                    ];
                  }

                  $steps["setLocalFilterServiceId"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.removeItem("filter_service_id");
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLocalFilterServiceId"] != null &&
                    typeof $steps["setLocalFilterServiceId"] === "object" &&
                    typeof $steps["setLocalFilterServiceId"].then === "function"
                  ) {
                    $steps["setLocalFilterServiceId"] = await $steps[
                      "setLocalFilterServiceId"
                    ];
                  }

                  $steps["setLocalFilterServiceName"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.removeItem(
                              "filter_service_name"
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLocalFilterServiceName"] != null &&
                    typeof $steps["setLocalFilterServiceName"] === "object" &&
                    typeof $steps["setLocalFilterServiceName"].then ===
                      "function"
                  ) {
                    $steps["setLocalFilterServiceName"] = await $steps[
                      "setLocalFilterServiceName"
                    ];
                  }

                  $steps["setLocalGetV2ConsultQueryParam"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.removeItem(
                              "GET_V2_consult_query_param"
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLocalGetV2ConsultQueryParam"] != null &&
                    typeof $steps["setLocalGetV2ConsultQueryParam"] ===
                      "object" &&
                    typeof $steps["setLocalGetV2ConsultQueryParam"].then ===
                      "function"
                  ) {
                    $steps["setLocalGetV2ConsultQueryParam"] = await $steps[
                      "setLocalGetV2ConsultQueryParam"
                    ];
                  }

                  $steps["updateModalConsultFilterTypeOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalConsultFilterType", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalConsultFilterTypeOpen"] != null &&
                    typeof $steps["updateModalConsultFilterTypeOpen"] ===
                      "object" &&
                    typeof $steps["updateModalConsultFilterTypeOpen"].then ===
                      "function"
                  ) {
                    $steps["updateModalConsultFilterTypeOpen"] = await $steps[
                      "updateModalConsultFilterTypeOpen"
                    ];
                  }
                }}
              >
                {
                  "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0641\u06cc\u0644\u062a\u0631 \u0647\u0627"
                }
              </div>
            </Stack__>
          </AntdModal>
        ) : null}
        {(() => {
          try {
            return $state.mainSelectedTab === "consult";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <ApiFetcherComponent
            data-plasmic-name={"getServicesForConsult"}
            data-plasmic-override={overrides.getServicesForConsult}
            className={classNames("__wab_instance", sty.getServicesForConsult)}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={"/api/v2/service"}
            ref={ref => {
              $refs["getServicesForConsult"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <AntdModal
                    data-plasmic-name={"modalConsultSenderService"}
                    data-plasmic-override={overrides.modalConsultSenderService}
                    className={classNames(
                      "__wab_instance",
                      sty.modalConsultSenderService
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    maskClosable={true}
                    modalContentClassName={classNames({
                      [sty["pcls_THa7BUI8A7ZH"]]: true
                    })}
                    modalScopeClassName={
                      sty["modalConsultSenderService__modal"]
                    }
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modalConsultSenderService",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "modalConsultSenderService",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n6NNv
                        )}
                      >
                        {
                          "\u0641\u06cc\u0644\u062a\u0631 \u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0627 \u0633\u0631\u0648\u06cc\u0633 \u0645\u0628\u062f\u0627"
                        }
                      </div>
                    }
                    trigger={null}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"senderServiceList"}
                      data-plasmic-override={overrides.senderServiceList}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.senderServiceList
                      )}
                    >
                      <ConditionGuard
                        children={null}
                        className={classNames(
                          "__wab_instance",
                          sty.conditionGuard__pCbE
                        )}
                        condition={(() => {
                          try {
                            return $ctx.fetched_data.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        onNotSatisfied={async () => {
                          const $steps = {};

                          $steps["setLocalFilterConsultSenderServiceList"] =
                            true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        localStorage.setItem(
                                          "consult_sender_service_list_for_filter",
                                          JSON.stringify(
                                            $ctx.fetched_data.data.services
                                          )
                                        );
                                        return console.log(
                                          `consult_sender_service_list_for_filter: ${localStorage.getItem(
                                            "consult_sender_service_list_for_filter"
                                          )}`
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["setLocalFilterConsultSenderServiceList"] !=
                              null &&
                            typeof $steps[
                              "setLocalFilterConsultSenderServiceList"
                            ] === "object" &&
                            typeof $steps[
                              "setLocalFilterConsultSenderServiceList"
                            ].then === "function"
                          ) {
                            $steps["setLocalFilterConsultSenderServiceList"] =
                              await $steps[
                                "setLocalFilterConsultSenderServiceList"
                              ];
                          }
                        }}
                        skipPaths={[]}
                      />

                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return localStorage.getItem(
                              "consult_sender_service_list_for_filter"
                            )
                              ? JSON.parse(
                                  localStorage.getItem(
                                    "consult_sender_service_list_for_filter"
                                  )
                                )
                              : $ctx.fetched_data.data.services;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"servicesName"}
                            data-plasmic-override={overrides.servicesName}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.servicesName
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["localStorageSetFilterServiceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "filter_service_id",
                                          currentItem.id
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["localStorageSetFilterServiceId"] !=
                                  null &&
                                typeof $steps[
                                  "localStorageSetFilterServiceId"
                                ] === "object" &&
                                typeof $steps["localStorageSetFilterServiceId"]
                                  .then === "function"
                              ) {
                                $steps["localStorageSetFilterServiceId"] =
                                  await $steps[
                                    "localStorageSetFilterServiceId"
                                  ];
                              }

                              $steps["localStorageSetFilterServiceName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "filter_service_name",
                                          currentItem.name
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["localStorageSetFilterServiceName"] !=
                                  null &&
                                typeof $steps[
                                  "localStorageSetFilterServiceName"
                                ] === "object" &&
                                typeof $steps[
                                  "localStorageSetFilterServiceName"
                                ].then === "function"
                              ) {
                                $steps["localStorageSetFilterServiceName"] =
                                  await $steps[
                                    "localStorageSetFilterServiceName"
                                  ];
                              }

                              $steps["localStorageSetGetV2ConsultQueryParam"] =
                                true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "GET_V2_consult_query_param",
                                            `offset=0&limit=10&effective_patient_service_id=${localStorage.getItem(
                                              "filter_service_id"
                                            )}`
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps[
                                  "localStorageSetGetV2ConsultQueryParam"
                                ] != null &&
                                typeof $steps[
                                  "localStorageSetGetV2ConsultQueryParam"
                                ] === "object" &&
                                typeof $steps[
                                  "localStorageSetGetV2ConsultQueryParam"
                                ].then === "function"
                              ) {
                                $steps[
                                  "localStorageSetGetV2ConsultQueryParam"
                                ] = await $steps[
                                  "localStorageSetGetV2ConsultQueryParam"
                                ];
                              }

                              $steps["consoleLogFilterServiceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "filter_service_id: ",
                                          localStorage.getItem(
                                            "filter_service_id"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogFilterServiceId"] != null &&
                                typeof $steps["consoleLogFilterServiceId"] ===
                                  "object" &&
                                typeof $steps["consoleLogFilterServiceId"]
                                  .then === "function"
                              ) {
                                $steps["consoleLogFilterServiceId"] =
                                  await $steps["consoleLogFilterServiceId"];
                              }

                              $steps["consoleLogFilterServiceName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "filter_service_name: ",
                                          localStorage.getItem(
                                            "filter_service_name"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogFilterServiceName"] != null &&
                                typeof $steps["consoleLogFilterServiceName"] ===
                                  "object" &&
                                typeof $steps["consoleLogFilterServiceName"]
                                  .then === "function"
                              ) {
                                $steps["consoleLogFilterServiceName"] =
                                  await $steps["consoleLogFilterServiceName"];
                              }

                              $steps["consoleLogGetV2ConsultQueryParam"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "GET_V2_consult_query_param:",
                                          localStorage.getItem(
                                            "GET_V2_consult_query_param"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogGetV2ConsultQueryParam"] !=
                                  null &&
                                typeof $steps[
                                  "consoleLogGetV2ConsultQueryParam"
                                ] === "object" &&
                                typeof $steps[
                                  "consoleLogGetV2ConsultQueryParam"
                                ].then === "function"
                              ) {
                                $steps["consoleLogGetV2ConsultQueryParam"] =
                                  await $steps[
                                    "consoleLogGetV2ConsultQueryParam"
                                  ];
                              }

                              $steps["updateModalConsultSenderServiceOpen"] =
                                true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "modalConsultSenderService",
                                            "open"
                                          ]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["updateModalConsultSenderServiceOpen"] !=
                                  null &&
                                typeof $steps[
                                  "updateModalConsultSenderServiceOpen"
                                ] === "object" &&
                                typeof $steps[
                                  "updateModalConsultSenderServiceOpen"
                                ].then === "function"
                              ) {
                                $steps["updateModalConsultSenderServiceOpen"] =
                                  await $steps[
                                    "updateModalConsultSenderServiceOpen"
                                  ];
                              }
                            }}
                          >
                            <React.Fragment>{currentItem.name}</React.Fragment>
                          </div>
                        );
                      })}
                    </Stack__>
                  </AntdModal>
                  <AntdModal
                    data-plasmic-name={"modalConsultReceiverService"}
                    data-plasmic-override={
                      overrides.modalConsultReceiverService
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.modalConsultReceiverService
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    maskClosable={true}
                    modalContentClassName={classNames({
                      [sty["pcls_oRgYWFPy3jBh"]]: true
                    })}
                    modalScopeClassName={
                      sty["modalConsultReceiverService__modal"]
                    }
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modalConsultReceiverService",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "modalConsultReceiverService",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cRpHl
                        )}
                      >
                        {
                          "\u0641\u06cc\u0644\u062a\u0631 \u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0627 \u0633\u0631\u0648\u06cc\u0633 \u0645\u0642\u0635\u062f"
                        }
                      </div>
                    }
                    trigger={null}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"receiverServiceList"}
                      data-plasmic-override={overrides.receiverServiceList}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.receiverServiceList
                      )}
                    >
                      <ConditionGuard
                        className={classNames(
                          "__wab_instance",
                          sty.conditionGuard___60Nkj
                        )}
                        condition={(() => {
                          try {
                            return $ctx.fetched_data.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        onNotSatisfied={async () => {
                          const $steps = {};

                          $steps["setLocalFilterConsultReceiverServiceList"] =
                            true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        localStorage.setItem(
                                          "consult_receiver_service_list_for_filter",
                                          JSON.stringify(
                                            $ctx.fetched_data.data.services
                                          )
                                        );
                                        return console.log(
                                          `consult_receiver_service_list_for_filter: ${localStorage.getItem(
                                            "consult_receiver_service_list_for_filter"
                                          )}`
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps[
                              "setLocalFilterConsultReceiverServiceList"
                            ] != null &&
                            typeof $steps[
                              "setLocalFilterConsultReceiverServiceList"
                            ] === "object" &&
                            typeof $steps[
                              "setLocalFilterConsultReceiverServiceList"
                            ].then === "function"
                          ) {
                            $steps["setLocalFilterConsultReceiverServiceList"] =
                              await $steps[
                                "setLocalFilterConsultReceiverServiceList"
                              ];
                          }
                        }}
                        skipPaths={[]}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return localStorage.getItem(
                                "consult_receiver_service_list_for_filter"
                              )
                                ? JSON.parse(
                                    localStorage.getItem(
                                      "consult_receiver_service_list_for_filter"
                                    )
                                  )
                                : $ctx.fetched_data.data.services;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              data-plasmic-name={"servicesName2"}
                              data-plasmic-override={overrides.servicesName2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.servicesName2
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["localStorageSetFilterServiceId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "filter_service_id",
                                            currentItem.id
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["localStorageSetFilterServiceId"] !=
                                    null &&
                                  typeof $steps[
                                    "localStorageSetFilterServiceId"
                                  ] === "object" &&
                                  typeof $steps[
                                    "localStorageSetFilterServiceId"
                                  ].then === "function"
                                ) {
                                  $steps["localStorageSetFilterServiceId"] =
                                    await $steps[
                                      "localStorageSetFilterServiceId"
                                    ];
                                }

                                $steps["localStorageSetFilterServiceName"] =
                                  true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return localStorage.setItem(
                                              "filter_service_name",
                                              currentItem.name
                                            );
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["localStorageSetFilterServiceName"] !=
                                    null &&
                                  typeof $steps[
                                    "localStorageSetFilterServiceName"
                                  ] === "object" &&
                                  typeof $steps[
                                    "localStorageSetFilterServiceName"
                                  ].then === "function"
                                ) {
                                  $steps["localStorageSetFilterServiceName"] =
                                    await $steps[
                                      "localStorageSetFilterServiceName"
                                    ];
                                }

                                $steps[
                                  "localStorageSetGetV2ConsultQueryParam"
                                ] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "GET_V2_consult_query_param",
                                            `offset=0&limit=10&consultant_service_id=${localStorage.getItem(
                                              "filter_service_id"
                                            )}`
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps[
                                    "localStorageSetGetV2ConsultQueryParam"
                                  ] != null &&
                                  typeof $steps[
                                    "localStorageSetGetV2ConsultQueryParam"
                                  ] === "object" &&
                                  typeof $steps[
                                    "localStorageSetGetV2ConsultQueryParam"
                                  ].then === "function"
                                ) {
                                  $steps[
                                    "localStorageSetGetV2ConsultQueryParam"
                                  ] = await $steps[
                                    "localStorageSetGetV2ConsultQueryParam"
                                  ];
                                }

                                $steps["consoleLogFilterServiceId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return console.log(
                                            "filter_service_id: ",
                                            localStorage.getItem(
                                              "filter_service_id"
                                            )
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["consoleLogFilterServiceId"] != null &&
                                  typeof $steps["consoleLogFilterServiceId"] ===
                                    "object" &&
                                  typeof $steps["consoleLogFilterServiceId"]
                                    .then === "function"
                                ) {
                                  $steps["consoleLogFilterServiceId"] =
                                    await $steps["consoleLogFilterServiceId"];
                                }

                                $steps["consoleLogFilterServiceName"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return console.log(
                                            "filter_service_name: ",
                                            localStorage.getItem(
                                              "filter_service_name"
                                            )
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["consoleLogFilterServiceName"] !=
                                    null &&
                                  typeof $steps[
                                    "consoleLogFilterServiceName"
                                  ] === "object" &&
                                  typeof $steps["consoleLogFilterServiceName"]
                                    .then === "function"
                                ) {
                                  $steps["consoleLogFilterServiceName"] =
                                    await $steps["consoleLogFilterServiceName"];
                                }

                                $steps["consoleLogGetV2ConsultQueryParam"] =
                                  true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return console.log(
                                              "GET_V2_consult_query_param:",
                                              localStorage.getItem(
                                                "GET_V2_consult_query_param"
                                              )
                                            );
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["consoleLogGetV2ConsultQueryParam"] !=
                                    null &&
                                  typeof $steps[
                                    "consoleLogGetV2ConsultQueryParam"
                                  ] === "object" &&
                                  typeof $steps[
                                    "consoleLogGetV2ConsultQueryParam"
                                  ].then === "function"
                                ) {
                                  $steps["consoleLogGetV2ConsultQueryParam"] =
                                    await $steps[
                                      "consoleLogGetV2ConsultQueryParam"
                                    ];
                                }

                                $steps[
                                  "updateModalConsultReceiverServiceOpen"
                                ] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "modalConsultReceiverService",
                                            "open"
                                          ]
                                        },
                                        operation: 4
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          !oldValue
                                        );
                                        return !oldValue;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps[
                                    "updateModalConsultReceiverServiceOpen"
                                  ] != null &&
                                  typeof $steps[
                                    "updateModalConsultReceiverServiceOpen"
                                  ] === "object" &&
                                  typeof $steps[
                                    "updateModalConsultReceiverServiceOpen"
                                  ].then === "function"
                                ) {
                                  $steps[
                                    "updateModalConsultReceiverServiceOpen"
                                  ] = await $steps[
                                    "updateModalConsultReceiverServiceOpen"
                                  ];
                                }
                              }}
                            >
                              <React.Fragment>
                                {currentItem.name}
                              </React.Fragment>
                            </div>
                          );
                        })}
                      </ConditionGuard>
                    </Stack__>
                  </AntdModal>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        ) : null}
        {(() => {
          try {
            return $state.mainSelectedTab === "consult";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <AntdModal
            data-plasmic-name={"modalReplyConsultConfirmation"}
            data-plasmic-override={overrides.modalReplyConsultConfirmation}
            className={classNames(
              "__wab_instance",
              sty.modalReplyConsultConfirmation
            )}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_OnbOf6iM02Q7"]]: true
            })}
            modalScopeClassName={sty["modalReplyConsultConfirmation__modal"]}
            onOpenChange={generateStateOnChangeProp($state, [
              "modalReplyConsultConfirmation",
              "open"
            ])}
            open={generateStateValueProp($state, [
              "modalReplyConsultConfirmation",
              "open"
            ])}
            title={
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lHSv
                  )}
                >
                  {
                    "\u0622\u06cc\u0627 \u0627\u0632 \u062b\u0628\u062a \u067e\u0627\u0633\u062e \u062f\u0631 \u0628\u0631\u06af\u0647 \u0645\u0634\u0627\u0648\u0631\u0647 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f\u061f"
                  }
                </div>
                <div
                  data-plasmic-name={"guide"}
                  data-plasmic-override={overrides.guide}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.guide
                  )}
                >
                  {
                    '\u0628\u0647 \u062f\u0646\u0628\u0627\u0644 \u062a\u0627\u06cc\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0631\u0686\u0633\u0628 "\u067e\u0627\u0633\u062e \u062f\u0627\u062f\u0647 \u0634\u062f\u0647" \u062e\u0648\u0631\u062f\u0647 \u0648 \u0628\u0647 \u0627\u0646\u062a\u0647\u0627\u06cc \u0644\u06cc\u0633\u062a \u0645\u0646\u062a\u0642\u0644 \u0645\u06cc \u0634\u0648\u062f'
                  }
                </div>
              </div>
            }
            trigger={null}
          >
            <div
              data-plasmic-name={"confirmationContent"}
              data-plasmic-override={overrides.confirmationContent}
              className={classNames(projectcss.all, sty.confirmationContent)}
            >
              <div
                data-plasmic-name={"confirmationYesNo"}
                data-plasmic-override={overrides.confirmationYesNo}
                className={classNames(projectcss.all, sty.confirmationYesNo)}
              >
                <Button
                  data-plasmic-name={"noConfirm"}
                  data-plasmic-override={overrides.noConfirm}
                  className={classNames("__wab_instance", sty.noConfirm)}
                  color={"red"}
                  deselected={generateStateValueProp($state, [
                    "noConfirm",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "noConfirm",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalReplyConsultConfirmationOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: [
                                "modalReplyConsultConfirmation",
                                "open"
                              ]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalReplyConsultConfirmationOpen"] !=
                        null &&
                      typeof $steps[
                        "updateModalReplyConsultConfirmationOpen"
                      ] === "object" &&
                      typeof $steps["updateModalReplyConsultConfirmationOpen"]
                        .then === "function"
                    ) {
                      $steps["updateModalReplyConsultConfirmationOpen"] =
                        await $steps["updateModalReplyConsultConfirmationOpen"];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "noConfirm",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "noConfirm",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "noConfirm",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "noConfirm",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "noConfirm",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "noConfirm",
                    "selected"
                  ])}
                  shape={"rounded"}
                  sortDeselected={generateStateValueProp($state, [
                    "noConfirm",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "noConfirm",
                    "sortSelected"
                  ])}
                >
                  {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                </Button>
                <Button
                  data-plasmic-name={"confirm"}
                  data-plasmic-override={overrides.confirm}
                  className={classNames("__wab_instance", sty.confirm)}
                  color={"blue"}
                  deselected={generateStateValueProp($state, [
                    "confirm",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "confirm",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["makeFalseReplyConsultUnsuccessfullyAlert"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["replyConsultUnsuccessfullyAlert"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["makeFalseReplyConsultUnsuccessfullyAlert"] !=
                        null &&
                      typeof $steps[
                        "makeFalseReplyConsultUnsuccessfullyAlert"
                      ] === "object" &&
                      typeof $steps["makeFalseReplyConsultUnsuccessfullyAlert"]
                        .then === "function"
                    ) {
                      $steps["makeFalseReplyConsultUnsuccessfullyAlert"] =
                        await $steps[
                          "makeFalseReplyConsultUnsuccessfullyAlert"
                        ];
                    }

                    $steps["postReplyConsult"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              `/api/v2/consult/${$state.inboxConsultCardId}/reply`,
                              (() => {
                                try {
                                  return {
                                    "X-Namespace": localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    paper_reply: true,
                                    reply: ""
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "AuthGlobalContext.apiFetcher"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["postReplyConsult"] != null &&
                      typeof $steps["postReplyConsult"] === "object" &&
                      typeof $steps["postReplyConsult"].then === "function"
                    ) {
                      $steps["postReplyConsult"] = await $steps[
                        "postReplyConsult"
                      ];
                    }

                    $steps["makeTrueReplyConsultUnsuccessfullyAlert"] =
                      $steps.postReplyConsult?.status != 200
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "replyConsultUnsuccessfullyAlert"
                                ]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["makeTrueReplyConsultUnsuccessfullyAlert"] !=
                        null &&
                      typeof $steps[
                        "makeTrueReplyConsultUnsuccessfullyAlert"
                      ] === "object" &&
                      typeof $steps["makeTrueReplyConsultUnsuccessfullyAlert"]
                        .then === "function"
                    ) {
                      $steps["makeTrueReplyConsultUnsuccessfullyAlert"] =
                        await $steps["makeTrueReplyConsultUnsuccessfullyAlert"];
                    }

                    $steps["runActionOnConsults"] =
                      $steps.postReplyConsult?.status === 200
                        ? (() => {
                            const actionArgs = {
                              tplRef: "consults",
                              action: "reload"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runActionOnConsults"] != null &&
                      typeof $steps["runActionOnConsults"] === "object" &&
                      typeof $steps["runActionOnConsults"].then === "function"
                    ) {
                      $steps["runActionOnConsults"] = await $steps[
                        "runActionOnConsults"
                      ];
                    }

                    $steps["updateModalReplyConsultConfirmationOpen"] =
                      $steps.postReplyConsult?.status === 200
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "modalReplyConsultConfirmation",
                                  "open"
                                ]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateModalReplyConsultConfirmationOpen"] !=
                        null &&
                      typeof $steps[
                        "updateModalReplyConsultConfirmationOpen"
                      ] === "object" &&
                      typeof $steps["updateModalReplyConsultConfirmationOpen"]
                        .then === "function"
                    ) {
                      $steps["updateModalReplyConsultConfirmationOpen"] =
                        await $steps["updateModalReplyConsultConfirmationOpen"];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "confirm",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "confirm",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["confirm", "selected"])(
                      eventArgs[0]
                    );
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "confirm",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "confirm",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "confirm",
                    "selected"
                  ])}
                  shape={"rounded"}
                  sortDeselected={generateStateValueProp($state, [
                    "confirm",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "confirm",
                    "sortSelected"
                  ])}
                >
                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                </Button>
              </div>
              {(() => {
                try {
                  return $state.replyConsultUnsuccessfullyAlert;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Alert
                  data-plasmic-name={"unsuccessfulReplyConsult"}
                  data-plasmic-override={overrides.unsuccessfulReplyConsult}
                  body={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5UtyF
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0627\u0639\u0644\u0627\u0645 \u067e\u0627\u0633\u062e \u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0627 \u062e\u0637\u0627 \u0647\u0645\u0631\u0627\u0647 \u0634\u062f"
                      }
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.unsuccessfulReplyConsult
                  )}
                  error={true}
                  noHeader={true}
                  noIcon={true}
                />
              ) : null}
            </div>
          </AntdModal>
        ) : null}
        {false
          ? (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.modalFeatureBanner),
                closeButtonClassName: classNames({
                  [sty["pcls_LFU_8oG2APY4"]]: true
                }),
                closeIcon: null,
                defaultStylesClassName: classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                ),
                hideFooter: true,
                maskClosable: false,
                modalContentClassName: classNames({
                  [sty["pcls_W8KQUTE3lWjO"]]: true
                }),
                modalScopeClassName: sty["modalFeatureBanner__modal"],
                onOpenChange: generateStateOnChangeProp($state, [
                  "modalFeatureBanner",
                  "open"
                ]),
                open: generateStateValueProp($state, [
                  "modalFeatureBanner",
                  "open"
                ]),
                title: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zLxjE
                    )}
                  >
                    {
                      "\u0648\u06cc\u0698\u06af\u06cc \u0647\u0627\u06cc \u062c\u062f\u06cc\u062f"
                    }
                  </div>
                ),
                trigger: null,
                wrapClassName: classNames({ [sty["pcls_SijkiB5x5hlZ"]]: true })
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "open",
                    plasmicStateName: "modalFeatureBanner.open"
                  }
                ],
                [],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "modalFeatureBanner.open",
                    initFunc: ({ $props, $state, $queries }) =>
                      hasVariant(globalVariants, "screen", "mobileFirst")
                        ? (() => {
                            try {
                              return (
                                $props.newVersionDatetime !==
                                localStorage.getItem("new_version_datetime")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (
                                $props.newVersionDatetime !==
                                localStorage.getItem("new_version_datetime")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                  }
                ],
                []
              );
              return (
                <AntdModal
                  data-plasmic-name={"modalFeatureBanner"}
                  data-plasmic-override={overrides.modalFeatureBanner}
                  {...child$Props}
                >
                  <NewFeatureBanner
                    data-plasmic-name={"newFeatureBanner"}
                    data-plasmic-override={overrides.newFeatureBanner}
                    className={classNames(
                      "__wab_instance",
                      sty.newFeatureBanner
                    )}
                    newVersionDatetime2={args.newVersionDatetime}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o7FzR
                      )}
                      dir={"rtl"}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__tVrkg
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li___2GatI
                              )}
                            >
                              {
                                "\u062a\u0645\u0627\u06cc\u0632 \u0627\u0632\u0645\u0627\u06cc\u0634 \u0647\u0627 \u0648 \u06af\u0632\u0627\u0631\u0634 \u0647\u0627\u06cc \u0631\u0627\u062f\u06cc\u0648\u0644\u0648\u0698\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u062f\u0631 \u0628\u0633\u062a\u0631\u06cc \u0641\u0639\u0644\u06cc \u0627\u0632 \u0628\u0633\u062a\u0631\u06cc \u0647\u0627\u06cc \u0642\u0628\u0644\u06cc \u0628\u06cc\u0645\u0627\u0631 "
                              }
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__gwCgY
                              )}
                            >
                              {
                                "\u0641\u0631\u0627\u0647\u0645 \u0634\u062f\u0646 \u0627\u0645\u06a9\u0627\u0646 \u0645\u0634\u062e\u0635 \u06a9\u0631\u062f\u0646 \u0627\u0632\u0645\u0627\u06cc\u0634 \u0647\u0627\u06cc \u0645\u0647\u0645 \u0628\u06cc\u0645\u0627\u0631 \u0628\u0631\u0627\u06cc \u062e\u0648\u062f \u0648 \u062f\u06cc\u06af\u0631 \u0647\u0645\u06a9\u0627\u0631\u0627\u0646 "
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__vhe3O
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__huxmq
                              )}
                            >
                              {
                                '\u0641\u0631\u0627\u0647\u0645 \u0634\u062f\u0646 \u0627\u0645\u06a9\u0627\u0646 \u0627\u0639\u0644\u0627\u0645 \u0648\u0636\u0639\u06cc\u062a \u0628\u06cc\u0645\u0627\u0631 ("\u0628\u062d\u0631\u0627\u0646\u06cc" \u06cc\u0627 "\u067e\u0627\u06cc\u062f\u0627\u0631")\u060c \u062f\u0631 \u06a9\u0627\u0631\u062a \u0628\u06cc\u0645\u0627\u0631 \u062a\u0648\u0633\u0637 \u067e\u0632\u0634\u06a9\u060c \u0628\u0647 \u0647\u062f\u0641 \u0645\u0637\u0644\u0639 \u0646\u0645\u0648\u062f\u0646 \u062f\u06cc\u06af\u0631 \u0647\u0645\u06a9\u0627\u0631\u0627\u0646'
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul___0Txdk
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__x1Jmu
                              )}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0622\u0632\u0645\u0627\u06cc\u0634 \u0647\u0627\u06cc \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u062f\u0647 \u0628\u0631\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631 "
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__tNiCb
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__vwTnk
                              )}
                            >
                              {
                                "\u0627\u0645\u06a9\u0627\u0646 \u062a\u063a\u06cc\u06cc\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0647 \u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 "
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__j2Q7Y
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__vol
                              )}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u062a\u0639\u062f\u0627\u062f \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0634\u062f\u0647"
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__uLr3K
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__xs4
                              )}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0646\u062a\u06cc\u062c\u0647 \u0622\u0632\u0645\u0627\u06cc\u0634 \u0622\u0646\u062a\u06cc \u0628\u06cc\u0648\u06af\u0631\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631"
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__ctBZ
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__cXPbD
                              )}
                            >
                              {
                                "\u062f\u0631\u0635\u0648\u0631\u062a \u0639\u062f\u0645 \u0646\u0645\u0627\u06cc\u0634 \u0644\u06cc\u0633\u062a \u0628\u062e\u0634 \u0647\u0627\u060c \u0628\u0627 \u0632\u062f\u0646 \u06a9\u0646\u0627\u0631 \u0622\u062f\u0631\u0633 \u0645\u0631\u0648\u0631\u06af\u0631\u060c \u06a9\u064e\u0634 \u0645\u0631\u0648\u0631\u06af\u0631 \u0631\u0627 \u067e\u0627\u06a9 \u0646\u0645\u0627\u06cc\u06cc\u062f (Clear cache)"
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </NewFeatureBanner>
                  <Button
                    data-plasmic-name={
                      "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u0645"
                    }
                    data-plasmic-override={overrides.متوجهشدم}
                    className={classNames("__wab_instance", sty.متوجهشدم)}
                    color={"blue"}
                    deselected={generateStateValueProp($state, [
                      "متوجهشدم",
                      "deselected"
                    ])}
                    isDisabled={generateStateValueProp($state, [
                      "متوجهشدم",
                      "isDisabled"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["setUpdateVersionLocalStorage"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "new_version_datetime",
                                  $props.newVersionDatetime
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["setUpdateVersionLocalStorage"] != null &&
                        typeof $steps["setUpdateVersionLocalStorage"] ===
                          "object" &&
                        typeof $steps["setUpdateVersionLocalStorage"].then ===
                          "function"
                      ) {
                        $steps["setUpdateVersionLocalStorage"] = await $steps[
                          "setUpdateVersionLocalStorage"
                        ];
                      }

                      $steps["updateModalFeatureBannerOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalFeatureBanner", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalFeatureBannerOpen"] != null &&
                        typeof $steps["updateModalFeatureBannerOpen"] ===
                          "object" &&
                        typeof $steps["updateModalFeatureBannerOpen"].then ===
                          "function"
                      ) {
                        $steps["updateModalFeatureBannerOpen"] = await $steps[
                          "updateModalFeatureBannerOpen"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return console.log(
                                    `"new_version_datetime": ${localStorage.getItem(
                                      "new_version_datetime"
                                    )}`
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم",
                        "deselected"
                      ])(eventArgs[0]);
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                    onSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    onSortDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم",
                        "sortDeselected"
                      ])(eventArgs[0]);
                    }}
                    onSortSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم",
                        "sortSelected"
                      ])(eventArgs[0]);
                    }}
                    selected={generateStateValueProp($state, [
                      "متوجهشدم",
                      "selected"
                    ])}
                    shape={"sharp"}
                    sortDeselected={generateStateValueProp($state, [
                      "متوجهشدم",
                      "sortDeselected"
                    ])}
                    sortSelected={generateStateValueProp($state, [
                      "متوجهشدم",
                      "sortSelected"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0JqOy
                      )}
                    >
                      {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                    </div>
                  </Button>
                </AntdModal>
              );
            })()
          : null}
        {false
          ? (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.modalNoticeBanner),
                closeButtonClassName: classNames({
                  [sty["pcls_-p1PGff7sV5P"]]: true
                }),
                closeIcon: null,
                defaultStylesClassName: classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                ),
                hideFooter: true,
                maskClosable: false,
                modalContentClassName: classNames({
                  [sty["pcls_meaj_737D3HF"]]: true
                }),
                modalScopeClassName: sty["modalNoticeBanner__modal"],
                onOpenChange: generateStateOnChangeProp($state, [
                  "modalNoticeBanner",
                  "open"
                ]),
                open: generateStateValueProp($state, [
                  "modalNoticeBanner",
                  "open"
                ]),
                title: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xga15
                    )}
                  >
                    {"\u0627\u0637\u0644\u0627\u0639\u06cc\u0647"}
                  </div>
                ),
                trigger: null,
                wrapClassName: classNames({ [sty["pcls_TufeBRfdpEOi"]]: true })
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "open",
                    plasmicStateName: "modalNoticeBanner.open"
                  }
                ],
                [],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "modalNoticeBanner.open",
                    initFunc: ({ $props, $state, $queries }) =>
                      hasVariant(globalVariants, "screen", "mobileFirst")
                        ? (() => {
                            try {
                              return (
                                $props.newNoticeDatetime !==
                                localStorage.getItem("new_notice_datetime")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (
                                $props.newNoticeDatetime !==
                                localStorage.getItem("new_notice_datetime")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                  }
                ],
                []
              );
              return (
                <AntdModal
                  data-plasmic-name={"modalNoticeBanner"}
                  data-plasmic-override={overrides.modalNoticeBanner}
                  {...child$Props}
                >
                  <NewNoticeBanner
                    data-plasmic-name={"newNoticeBanner"}
                    data-plasmic-override={overrides.newNoticeBanner}
                    className={classNames(
                      "__wab_instance",
                      sty.newNoticeBanner
                    )}
                    newNoticeDatetime={args.newNoticeDatetime}
                  />

                  <Button
                    data-plasmic-name={
                      "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u06452"
                    }
                    data-plasmic-override={overrides.متوجهشدم2}
                    className={classNames("__wab_instance", sty.متوجهشدم2)}
                    color={"blue"}
                    deselected={generateStateValueProp($state, [
                      "متوجهشدم2",
                      "deselected"
                    ])}
                    isDisabled={generateStateValueProp($state, [
                      "متوجهشدم2",
                      "isDisabled"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["setUpdateVersionLocalStorage"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "new_notice_datetime",
                                  $props.newNoticeDatetime
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["setUpdateVersionLocalStorage"] != null &&
                        typeof $steps["setUpdateVersionLocalStorage"] ===
                          "object" &&
                        typeof $steps["setUpdateVersionLocalStorage"].then ===
                          "function"
                      ) {
                        $steps["setUpdateVersionLocalStorage"] = await $steps[
                          "setUpdateVersionLocalStorage"
                        ];
                      }

                      $steps["updateModalNoticeBannerOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalNoticeBanner", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalNoticeBannerOpen"] != null &&
                        typeof $steps["updateModalNoticeBannerOpen"] ===
                          "object" &&
                        typeof $steps["updateModalNoticeBannerOpen"].then ===
                          "function"
                      ) {
                        $steps["updateModalNoticeBannerOpen"] = await $steps[
                          "updateModalNoticeBannerOpen"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return console.log(
                                  `"new_notice_datetime": ${localStorage.getItem(
                                    "new_notice_datetime"
                                  )}`
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم2",
                        "deselected"
                      ])(eventArgs[0]);
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم2",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                    onSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم2",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    onSortDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم2",
                        "sortDeselected"
                      ])(eventArgs[0]);
                    }}
                    onSortSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "متوجهشدم2",
                        "sortSelected"
                      ])(eventArgs[0]);
                    }}
                    selected={generateStateValueProp($state, [
                      "متوجهشدم2",
                      "selected"
                    ])}
                    shape={"sharp"}
                    sortDeselected={generateStateValueProp($state, [
                      "متوجهشدم2",
                      "sortDeselected"
                    ])}
                    sortSelected={generateStateValueProp($state, [
                      "متوجهشدم2",
                      "sortSelected"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3SwMh
                      )}
                    >
                      {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                    </div>
                  </Button>
                </AntdModal>
              );
            })()
          : null}
        {false
          ? (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.modalNps),
                closeIcon: null,
                defaultStylesClassName: classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                ),
                hideFooter: true,
                maskClosable: false,
                modalContentClassName: classNames({
                  [sty["pcls_O5s2E5s6CSo-"]]: true
                }),
                modalScopeClassName: sty["modalNps__modal"],
                onOpenChange: generateStateOnChangeProp($state, [
                  "modalNps",
                  "open"
                ]),
                open: generateStateValueProp($state, ["modalNps", "open"]),
                title: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zOiDr
                    )}
                    dir={"rtl"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileFirst") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontWeight: 800 }}
                        >
                          {
                            "\u0686\u0642\u062f\u0631 \u062d\u0627\u0636\u0631 \u0647\u0633\u062a\u06cc\u062f \u0627\u06cc\u0646\u0644\u0628\u200c\u067e\u0644\u0627\u0633 \u0631\u0627 \u0628\u0647 \u0633\u0627\u06cc\u0631\u06cc\u0646 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u062f\u061f "
                          }
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontWeight: 800 }}
                        >
                          {
                            "( 0 : \u0647\u0631\u06af\u0632    10 : \u062e\u06cc\u0644\u06cc \u0632\u06cc\u0627\u062f )"
                          }
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontWeight: 800 }}
                        >
                          {
                            "\u0686\u0642\u062f\u0631 \u062d\u0627\u0636\u0631 \u0647\u0633\u062a\u06cc\u062f \u0627\u06cc\u0646\u0644\u0628\u200c\u067e\u0644\u0627\u0633 \u0631\u0627 \u0628\u0647 \u0633\u0627\u06cc\u0631\u06cc\u0646 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u062f\u061f ( 0 : \u0647\u0631\u06af\u0632     10 : \u062e\u06cc\u0644\u06cc \u0632\u06cc\u0627\u062f )"
                          }
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                ),
                trigger: null,
                width: "85%"
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "open",
                    plasmicStateName: "modalNps.open"
                  }
                ],
                [],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "modalNps.open",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return !localStorage.getItem("NPS_score");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                []
              );
              return (
                <AntdModal
                  data-plasmic-name={"modalNps"}
                  data-plasmic-override={overrides.modalNps}
                  {...child$Props}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__jN2Lb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__awXqP
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 0
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"0"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__vouX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m5Bdj
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"1"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__rH3P)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__glBnQ
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"2"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__u5JYs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jpf1G
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"3"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__qo37P)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7D4XV
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"4"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__nTn8H)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yfPmS
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 5
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"5"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__uMkJu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__in5S
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 6
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"6"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__g9D50)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__axA4C
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 7
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"7"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__gEBse)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jAhAx
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 8
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"\ufeff8"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__ghPy9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k5MHa
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 9
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"\ufeff9"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__t0CWh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3DYqN
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateNpsScore"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["npsScore"]
                                  },
                                  operation: 0,
                                  value: 10
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNpsScore"] != null &&
                            typeof $steps["updateStateNpsScore"] === "object" &&
                            typeof $steps["updateStateNpsScore"].then ===
                              "function"
                          ) {
                            $steps["updateStateNpsScore"] = await $steps[
                              "updateStateNpsScore"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "NPS_score",
                                        $state.npsScore
                                      );
                                      console.log(
                                        `state_NPS_score: ${$state.npsScore}`
                                      );
                                      return console.log(
                                        `local_NPS_score: ${localStorage.getItem(
                                          "NPS_score"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["postNps"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    `/n8n/webhook/NPS?namespace_id=${localStorage.getItem(
                                      "inlab_user_namespace_id"
                                    )}&score=${localStorage.getItem(
                                      "NPS_score"
                                    )}`
                                  ]
                                };
                                return $globalActions[
                                  "AuthGlobalContext.apiFetcher"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["postNps"] != null &&
                            typeof $steps["postNps"] === "object" &&
                            typeof $steps["postNps"].then === "function"
                          ) {
                            $steps["postNps"] = await $steps["postNps"];
                          }

                          $steps["updateModalNpsOpen"] =
                            $steps.postNps.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalNps", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalNpsOpen"] != null &&
                            typeof $steps["updateModalNpsOpen"] === "object" &&
                            typeof $steps["updateModalNpsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalNpsOpen"] = await $steps[
                              "updateModalNpsOpen"
                            ];
                          }
                        }}
                      >
                        {"10"}
                      </div>
                    </div>
                  </Stack__>
                </AntdModal>
              );
            })()
          : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  homepage: [
    "homepage",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "pageContent",
    "modalRemoveBookmarks",
    "deleteCancel",
    "cancelButton",
    "deleteAllBookmarks",
    "controlPanel",
    "namespaceTitle",
    "searchSetting",
    "settingIcon",
    "searchbar",
    "mainTabs",
    "consultButtonStack",
    "consult",
    "bookmarkedPatientNumber2",
    "patientsButtonStack",
    "patientsTab",
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648",
    "consultInbox",
    "filtersBar",
    "filterContent",
    "filterService",
    "filterType",
    "consults",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "inboxConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2",
    "patients",
    "patientsControlpanel",
    "patientsTabs",
    "wardButtonStack",
    "ward2",
    "wardPatientNumber",
    "physicianButtonStack",
    "physician",
    "physicianPatientNumber",
    "bookmarkedButtonStack",
    "bookmarked",
    "bookmarkedPatientNumber",
    "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627",
    "\u0628\u06cc\u0645\u0627\u0631\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkGuide",
    "bookmarkImage",
    "bookmarkedImage",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f",
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "modalGeneralHealthStatus",
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset",
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "consultNotify",
    "radiologyReport",
    "laboratoryData",
    "commentButton",
    "modalWard",
    "ward3",
    "wardsList",
    "wardsName",
    "searchbarWard",
    "modalPhysician",
    "physiciansList",
    "physiciansList2",
    "physiciansName",
    "searchbarPhysicians",
    "modalConsultFilterType",
    "filterTypes",
    "senderServiceType",
    "receiverServiceType",
    "deleteFilters",
    "getServicesForConsult",
    "modalConsultSenderService",
    "senderServiceList",
    "servicesName",
    "modalConsultReceiverService",
    "receiverServiceList",
    "servicesName2",
    "modalReplyConsultConfirmation",
    "confirmationContent",
    "confirmationYesNo",
    "noConfirm",
    "confirm",
    "unsuccessfulReplyConsult",
    "title",
    "guide",
    "modalFeatureBanner",
    "newFeatureBanner",
    "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u0645",
    "modalNoticeBanner",
    "newNoticeBanner",
    "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u06452",
    "modalNps",
    "columns"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  pageContent: [
    "pageContent",
    "modalRemoveBookmarks",
    "deleteCancel",
    "cancelButton",
    "deleteAllBookmarks",
    "controlPanel",
    "namespaceTitle",
    "searchSetting",
    "settingIcon",
    "searchbar",
    "mainTabs",
    "consultButtonStack",
    "consult",
    "bookmarkedPatientNumber2",
    "patientsButtonStack",
    "patientsTab",
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648",
    "consultInbox",
    "filtersBar",
    "filterContent",
    "filterService",
    "filterType",
    "consults",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "inboxConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2",
    "patients",
    "patientsControlpanel",
    "patientsTabs",
    "wardButtonStack",
    "ward2",
    "wardPatientNumber",
    "physicianButtonStack",
    "physician",
    "physicianPatientNumber",
    "bookmarkedButtonStack",
    "bookmarked",
    "bookmarkedPatientNumber",
    "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627",
    "\u0628\u06cc\u0645\u0627\u0631\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkGuide",
    "bookmarkImage",
    "bookmarkedImage",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f",
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "modalGeneralHealthStatus",
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset",
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "consultNotify",
    "radiologyReport",
    "laboratoryData"
  ],
  modalRemoveBookmarks: [
    "modalRemoveBookmarks",
    "deleteCancel",
    "cancelButton",
    "deleteAllBookmarks"
  ],
  deleteCancel: ["deleteCancel", "cancelButton", "deleteAllBookmarks"],
  cancelButton: ["cancelButton"],
  deleteAllBookmarks: ["deleteAllBookmarks"],
  controlPanel: [
    "controlPanel",
    "namespaceTitle",
    "searchSetting",
    "settingIcon",
    "searchbar",
    "mainTabs",
    "consultButtonStack",
    "consult",
    "bookmarkedPatientNumber2",
    "patientsButtonStack",
    "patientsTab",
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
  ],
  namespaceTitle: ["namespaceTitle"],
  searchSetting: ["searchSetting", "settingIcon", "searchbar"],
  settingIcon: ["settingIcon"],
  searchbar: ["searchbar"],
  mainTabs: [
    "mainTabs",
    "consultButtonStack",
    "consult",
    "bookmarkedPatientNumber2",
    "patientsButtonStack",
    "patientsTab"
  ],
  consultButtonStack: [
    "consultButtonStack",
    "consult",
    "bookmarkedPatientNumber2"
  ],
  consult: ["consult", "bookmarkedPatientNumber2"],
  bookmarkedPatientNumber2: ["bookmarkedPatientNumber2"],
  patientsButtonStack: ["patientsButtonStack", "patientsTab"],
  patientsTab: ["patientsTab"],
  نتايحجستوجو: [
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
  ],
  consultInbox: [
    "consultInbox",
    "filtersBar",
    "filterContent",
    "filterService",
    "filterType",
    "consults",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "inboxConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2"
  ],
  filtersBar: ["filtersBar", "filterContent", "filterService", "filterType"],
  filterContent: ["filterContent", "filterService", "filterType"],
  filterService: ["filterService"],
  filterType: ["filterType"],
  consults: [
    "consults",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "inboxConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2"
  ],
  لطفامنتظربمانید2: [
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2"
  ],
  مشاورهایییافتنشد: [
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f"
  ],
  inboxConsultCard: [
    "inboxConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2"
  ],
  sentConsultEmergencyStatus: [
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2"
  ],
  emergentSign: ["emergentSign"],
  electiveSign: ["electiveSign"],
  sentConsultContent: [
    "sentConsultContent",
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton",
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2"
  ],
  patientSenderReceiver: [
    "patientSenderReceiver",
    "patientWard",
    "patientName",
    "patientWard2",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor"
  ],
  patientWard: ["patientWard", "patientName", "patientWard2"],
  patientName: ["patientName"],
  patientWard2: ["patientWard2"],
  senderReceiverService: [
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService"
  ],
  receiverService: ["receiverService"],
  arrow: ["arrow"],
  senderService: ["senderService"],
  senderReceiverDoctor: [
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor"
  ],
  receiverDoctor: ["receiverDoctor"],
  senderDoctor: ["senderDoctor"],
  consultSendDateRepliedStatus: [
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "replyConsultButton"
  ],
  consultSendDate: ["consultSendDate"],
  repliedStatus: ["repliedStatus"],
  replyConsultButton: ["replyConsultButton"],
  patientDataButtonsInConsultCard: [
    "patientDataButtonsInConsultCard",
    "patientProfile2",
    "consultNotify2",
    "radiologyReport2",
    "laboratoryData2"
  ],
  patientProfile2: ["patientProfile2"],
  consultNotify2: ["consultNotify2"],
  radiologyReport2: ["radiologyReport2"],
  laboratoryData2: ["laboratoryData2"],
  patients: [
    "patients",
    "patientsControlpanel",
    "patientsTabs",
    "wardButtonStack",
    "ward2",
    "wardPatientNumber",
    "physicianButtonStack",
    "physician",
    "physicianPatientNumber",
    "bookmarkedButtonStack",
    "bookmarked",
    "bookmarkedPatientNumber",
    "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627",
    "\u0628\u06cc\u0645\u0627\u0631\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkGuide",
    "bookmarkImage",
    "bookmarkedImage",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f",
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "modalGeneralHealthStatus",
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset",
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "consultNotify",
    "radiologyReport",
    "laboratoryData"
  ],
  patientsControlpanel: [
    "patientsControlpanel",
    "patientsTabs",
    "wardButtonStack",
    "ward2",
    "wardPatientNumber",
    "physicianButtonStack",
    "physician",
    "physicianPatientNumber",
    "bookmarkedButtonStack",
    "bookmarked",
    "bookmarkedPatientNumber",
    "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627"
  ],
  patientsTabs: [
    "patientsTabs",
    "wardButtonStack",
    "ward2",
    "wardPatientNumber",
    "physicianButtonStack",
    "physician",
    "physicianPatientNumber",
    "bookmarkedButtonStack",
    "bookmarked",
    "bookmarkedPatientNumber"
  ],
  wardButtonStack: ["wardButtonStack", "ward2", "wardPatientNumber"],
  ward2: ["ward2", "wardPatientNumber"],
  wardPatientNumber: ["wardPatientNumber"],
  physicianButtonStack: [
    "physicianButtonStack",
    "physician",
    "physicianPatientNumber"
  ],
  physician: ["physician", "physicianPatientNumber"],
  physicianPatientNumber: ["physicianPatientNumber"],
  bookmarkedButtonStack: [
    "bookmarkedButtonStack",
    "bookmarked",
    "bookmarkedPatientNumber"
  ],
  bookmarked: ["bookmarked", "bookmarkedPatientNumber"],
  bookmarkedPatientNumber: ["bookmarkedPatientNumber"],
  buttonپاککردنهمهبوکمارکها: [
    "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627"
  ],
  بیمارییافتنشد: [
    "\u0628\u06cc\u0645\u0627\u0631\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f"
  ],
  bookmarkGuide: ["bookmarkGuide", "bookmarkImage", "bookmarkedImage"],
  bookmarkImage: ["bookmarkImage"],
  bookmarkedImage: ["bookmarkedImage"],
  لطفامنتظربمانید: [
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f"
  ],
  patientCards: [
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "modalGeneralHealthStatus",
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset",
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "consultNotify",
    "radiologyReport",
    "laboratoryData"
  ],
  patientNameBookmarkIcon: [
    "patientNameBookmarkIcon",
    "dismision",
    "modalGeneralHealthStatus",
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset",
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting",
    "firstLastName",
    "bookmarkIcon"
  ],
  dismision: ["dismision"],
  modalGeneralHealthStatus: [
    "modalGeneralHealthStatus",
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset",
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting"
  ],
  modalContent: [
    "modalContent",
    "criticalCondition",
    "criticalDefinition",
    "stableCondition",
    "criticalConditionAdd",
    "stableConditionReset"
  ],
  criticalCondition: ["criticalCondition"],
  criticalDefinition: ["criticalDefinition"],
  stableCondition: ["stableCondition"],
  criticalConditionAdd: ["criticalConditionAdd"],
  stableConditionReset: ["stableConditionReset"],
  getMessageHealthStatus: [
    "getMessageHealthStatus",
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting"
  ],
  generalHealthStatusAnnouncement: [
    "generalHealthStatusAnnouncement",
    "numberOfDoctorReporting"
  ],
  numberOfDoctorReporting: ["numberOfDoctorReporting"],
  firstLastName: ["firstLastName"],
  bookmarkIcon: ["bookmarkIcon"],
  wardRoom: ["wardRoom", "roomBed", "ward"],
  roomBed: ["roomBed"],
  ward: ["ward"],
  patientDataButtons: [
    "patientDataButtons",
    "patientProfile",
    "consultNotify",
    "radiologyReport",
    "laboratoryData"
  ],
  patientProfile: ["patientProfile"],
  consultNotify: ["consultNotify"],
  radiologyReport: ["radiologyReport"],
  laboratoryData: ["laboratoryData"],
  commentButton: ["commentButton"],
  modalWard: ["modalWard", "ward3", "wardsList", "wardsName", "searchbarWard"],
  ward3: ["ward3", "wardsList", "wardsName"],
  wardsList: ["wardsList", "wardsName"],
  wardsName: ["wardsName"],
  searchbarWard: ["searchbarWard"],
  modalPhysician: [
    "modalPhysician",
    "physiciansList",
    "physiciansList2",
    "physiciansName",
    "searchbarPhysicians"
  ],
  physiciansList: ["physiciansList", "physiciansList2", "physiciansName"],
  physiciansList2: ["physiciansList2", "physiciansName"],
  physiciansName: ["physiciansName"],
  searchbarPhysicians: ["searchbarPhysicians"],
  modalConsultFilterType: [
    "modalConsultFilterType",
    "filterTypes",
    "senderServiceType",
    "receiverServiceType",
    "deleteFilters"
  ],
  filterTypes: [
    "filterTypes",
    "senderServiceType",
    "receiverServiceType",
    "deleteFilters"
  ],
  senderServiceType: ["senderServiceType"],
  receiverServiceType: ["receiverServiceType"],
  deleteFilters: ["deleteFilters"],
  getServicesForConsult: [
    "getServicesForConsult",
    "modalConsultSenderService",
    "senderServiceList",
    "servicesName",
    "modalConsultReceiverService",
    "receiverServiceList",
    "servicesName2"
  ],
  modalConsultSenderService: [
    "modalConsultSenderService",
    "senderServiceList",
    "servicesName"
  ],
  senderServiceList: ["senderServiceList", "servicesName"],
  servicesName: ["servicesName"],
  modalConsultReceiverService: [
    "modalConsultReceiverService",
    "receiverServiceList",
    "servicesName2"
  ],
  receiverServiceList: ["receiverServiceList", "servicesName2"],
  servicesName2: ["servicesName2"],
  modalReplyConsultConfirmation: [
    "modalReplyConsultConfirmation",
    "confirmationContent",
    "confirmationYesNo",
    "noConfirm",
    "confirm",
    "unsuccessfulReplyConsult",
    "title",
    "guide"
  ],
  confirmationContent: [
    "confirmationContent",
    "confirmationYesNo",
    "noConfirm",
    "confirm",
    "unsuccessfulReplyConsult"
  ],
  confirmationYesNo: ["confirmationYesNo", "noConfirm", "confirm"],
  noConfirm: ["noConfirm"],
  confirm: ["confirm"],
  unsuccessfulReplyConsult: ["unsuccessfulReplyConsult"],
  title: ["title", "guide"],
  guide: ["guide"],
  modalFeatureBanner: [
    "modalFeatureBanner",
    "newFeatureBanner",
    "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u0645"
  ],
  newFeatureBanner: ["newFeatureBanner"],
  متوجهشدم: ["\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u0645"],
  modalNoticeBanner: [
    "modalNoticeBanner",
    "newNoticeBanner",
    "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u06452"
  ],
  newNoticeBanner: ["newNoticeBanner"],
  متوجهشدم2: ["\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u06452"],
  modalNps: ["modalNps", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  homepage: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  pageContent: "div";
  modalRemoveBookmarks: typeof AntdModal;
  deleteCancel: "div";
  cancelButton: typeof Button;
  deleteAllBookmarks: typeof Button;
  controlPanel: "div";
  namespaceTitle: "div";
  searchSetting: "div";
  settingIcon: "svg";
  searchbar: typeof TextInput;
  mainTabs: "div";
  consultButtonStack: "div";
  consult: typeof Button;
  bookmarkedPatientNumber2: "div";
  patientsButtonStack: "div";
  patientsTab: typeof Button;
  نتايحجستوجو: "div";
  consultInbox: "div";
  filtersBar: "div";
  filterContent: "div";
  filterService: "div";
  filterType: "div";
  consults: typeof ApiFetcherComponent;
  لطفامنتظربمانید2: "div";
  مشاورهایییافتنشد: "div";
  inboxConsultCard: "div";
  sentConsultEmergencyStatus: "div";
  emergentSign: "div";
  electiveSign: "div";
  sentConsultContent: "div";
  patientSenderReceiver: "div";
  patientWard: "div";
  patientName: "div";
  patientWard2: "div";
  senderReceiverService: "div";
  receiverService: "div";
  arrow: "svg";
  senderService: "div";
  senderReceiverDoctor: "div";
  receiverDoctor: "div";
  senderDoctor: "div";
  consultSendDateRepliedStatus: "div";
  consultSendDate: "div";
  repliedStatus: "div";
  replyConsultButton: typeof Button;
  patientDataButtonsInConsultCard: "div";
  patientProfile2: typeof PlasmicImg__;
  consultNotify2: typeof PlasmicImg__;
  radiologyReport2: typeof PlasmicImg__;
  laboratoryData2: typeof PlasmicImg__;
  patients: typeof ApiFetcherComponent;
  patientsControlpanel: "div";
  patientsTabs: "div";
  wardButtonStack: "div";
  ward2: typeof Button;
  wardPatientNumber: "div";
  physicianButtonStack: "div";
  physician: typeof Button;
  physicianPatientNumber: "div";
  bookmarkedButtonStack: "div";
  bookmarked: typeof Button;
  bookmarkedPatientNumber: "div";
  buttonپاککردنهمهبوکمارکها: typeof Button;
  بیمارییافتنشد: "div";
  bookmarkGuide: "div";
  bookmarkImage: "svg";
  bookmarkedImage: "svg";
  لطفامنتظربمانید: "div";
  patientCards: "div";
  patientNameBookmarkIcon: "div";
  dismision: "div";
  modalGeneralHealthStatus: typeof AntdModal;
  modalContent: "div";
  criticalCondition: typeof Button;
  criticalDefinition: "div";
  stableCondition: typeof Button;
  criticalConditionAdd: typeof Alert;
  stableConditionReset: typeof Alert;
  getMessageHealthStatus: typeof ApiFetcherComponent;
  generalHealthStatusAnnouncement: "div";
  numberOfDoctorReporting: "div";
  firstLastName: "div";
  bookmarkIcon: typeof BookmarkIcon;
  wardRoom: "div";
  roomBed: "div";
  ward: "div";
  patientDataButtons: "div";
  patientProfile: typeof PlasmicImg__;
  consultNotify: typeof PlasmicImg__;
  radiologyReport: typeof PlasmicImg__;
  laboratoryData: typeof PlasmicImg__;
  commentButton: typeof Button;
  modalWard: typeof AntdModal;
  ward3: typeof ApiFetcherComponent;
  wardsList: "div";
  wardsName: "div";
  searchbarWard: typeof TextInput;
  modalPhysician: typeof AntdModal;
  physiciansList: typeof ApiFetcherComponent;
  physiciansList2: "div";
  physiciansName: "div";
  searchbarPhysicians: typeof TextInput;
  modalConsultFilterType: typeof AntdModal;
  filterTypes: "div";
  senderServiceType: "div";
  receiverServiceType: "div";
  deleteFilters: "div";
  getServicesForConsult: typeof ApiFetcherComponent;
  modalConsultSenderService: typeof AntdModal;
  senderServiceList: "div";
  servicesName: "div";
  modalConsultReceiverService: typeof AntdModal;
  receiverServiceList: "div";
  servicesName2: "div";
  modalReplyConsultConfirmation: typeof AntdModal;
  confirmationContent: "div";
  confirmationYesNo: "div";
  noConfirm: typeof Button;
  confirm: typeof Button;
  unsuccessfulReplyConsult: typeof Alert;
  title: "div";
  guide: "div";
  modalFeatureBanner: typeof AntdModal;
  newFeatureBanner: typeof NewFeatureBanner;
  متوجهشدم: typeof Button;
  modalNoticeBanner: typeof AntdModal;
  newNoticeBanner: typeof NewNoticeBanner;
  متوجهشدم2: typeof Button;
  modalNps: typeof AntdModal;
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homepage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("homepage"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    pageContent: makeNodeComponent("pageContent"),
    modalRemoveBookmarks: makeNodeComponent("modalRemoveBookmarks"),
    deleteCancel: makeNodeComponent("deleteCancel"),
    cancelButton: makeNodeComponent("cancelButton"),
    deleteAllBookmarks: makeNodeComponent("deleteAllBookmarks"),
    controlPanel: makeNodeComponent("controlPanel"),
    namespaceTitle: makeNodeComponent("namespaceTitle"),
    searchSetting: makeNodeComponent("searchSetting"),
    settingIcon: makeNodeComponent("settingIcon"),
    searchbar: makeNodeComponent("searchbar"),
    mainTabs: makeNodeComponent("mainTabs"),
    consultButtonStack: makeNodeComponent("consultButtonStack"),
    consult: makeNodeComponent("consult"),
    bookmarkedPatientNumber2: makeNodeComponent("bookmarkedPatientNumber2"),
    patientsButtonStack: makeNodeComponent("patientsButtonStack"),
    patientsTab: makeNodeComponent("patientsTab"),
    نتايحجستوجو: makeNodeComponent(
      "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
    ),
    consultInbox: makeNodeComponent("consultInbox"),
    filtersBar: makeNodeComponent("filtersBar"),
    filterContent: makeNodeComponent("filterContent"),
    filterService: makeNodeComponent("filterService"),
    filterType: makeNodeComponent("filterType"),
    consults: makeNodeComponent("consults"),
    لطفامنتظربمانید2: makeNodeComponent(
      "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f2"
    ),
    مشاورهایییافتنشد: makeNodeComponent(
      "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f"
    ),
    inboxConsultCard: makeNodeComponent("inboxConsultCard"),
    sentConsultEmergencyStatus: makeNodeComponent("sentConsultEmergencyStatus"),
    emergentSign: makeNodeComponent("emergentSign"),
    electiveSign: makeNodeComponent("electiveSign"),
    sentConsultContent: makeNodeComponent("sentConsultContent"),
    patientSenderReceiver: makeNodeComponent("patientSenderReceiver"),
    patientWard: makeNodeComponent("patientWard"),
    patientName: makeNodeComponent("patientName"),
    patientWard2: makeNodeComponent("patientWard2"),
    senderReceiverService: makeNodeComponent("senderReceiverService"),
    receiverService: makeNodeComponent("receiverService"),
    arrow: makeNodeComponent("arrow"),
    senderService: makeNodeComponent("senderService"),
    senderReceiverDoctor: makeNodeComponent("senderReceiverDoctor"),
    receiverDoctor: makeNodeComponent("receiverDoctor"),
    senderDoctor: makeNodeComponent("senderDoctor"),
    consultSendDateRepliedStatus: makeNodeComponent(
      "consultSendDateRepliedStatus"
    ),
    consultSendDate: makeNodeComponent("consultSendDate"),
    repliedStatus: makeNodeComponent("repliedStatus"),
    replyConsultButton: makeNodeComponent("replyConsultButton"),
    patientDataButtonsInConsultCard: makeNodeComponent(
      "patientDataButtonsInConsultCard"
    ),
    patientProfile2: makeNodeComponent("patientProfile2"),
    consultNotify2: makeNodeComponent("consultNotify2"),
    radiologyReport2: makeNodeComponent("radiologyReport2"),
    laboratoryData2: makeNodeComponent("laboratoryData2"),
    patients: makeNodeComponent("patients"),
    patientsControlpanel: makeNodeComponent("patientsControlpanel"),
    patientsTabs: makeNodeComponent("patientsTabs"),
    wardButtonStack: makeNodeComponent("wardButtonStack"),
    ward2: makeNodeComponent("ward2"),
    wardPatientNumber: makeNodeComponent("wardPatientNumber"),
    physicianButtonStack: makeNodeComponent("physicianButtonStack"),
    physician: makeNodeComponent("physician"),
    physicianPatientNumber: makeNodeComponent("physicianPatientNumber"),
    bookmarkedButtonStack: makeNodeComponent("bookmarkedButtonStack"),
    bookmarked: makeNodeComponent("bookmarked"),
    bookmarkedPatientNumber: makeNodeComponent("bookmarkedPatientNumber"),
    buttonپاککردنهمهبوکمارکها: makeNodeComponent(
      "button\u067e\u0627\u06a9\u06a9\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9\u0647\u0627"
    ),
    بیمارییافتنشد: makeNodeComponent(
      "\u0628\u06cc\u0645\u0627\u0631\u06cc\u06cc\u0627\u0641\u062a\u0646\u0634\u062f"
    ),
    bookmarkGuide: makeNodeComponent("bookmarkGuide"),
    bookmarkImage: makeNodeComponent("bookmarkImage"),
    bookmarkedImage: makeNodeComponent("bookmarkedImage"),
    لطفامنتظربمانید: makeNodeComponent(
      "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u06cc\u062f"
    ),
    patientCards: makeNodeComponent("patientCards"),
    patientNameBookmarkIcon: makeNodeComponent("patientNameBookmarkIcon"),
    dismision: makeNodeComponent("dismision"),
    modalGeneralHealthStatus: makeNodeComponent("modalGeneralHealthStatus"),
    modalContent: makeNodeComponent("modalContent"),
    criticalCondition: makeNodeComponent("criticalCondition"),
    criticalDefinition: makeNodeComponent("criticalDefinition"),
    stableCondition: makeNodeComponent("stableCondition"),
    criticalConditionAdd: makeNodeComponent("criticalConditionAdd"),
    stableConditionReset: makeNodeComponent("stableConditionReset"),
    getMessageHealthStatus: makeNodeComponent("getMessageHealthStatus"),
    generalHealthStatusAnnouncement: makeNodeComponent(
      "generalHealthStatusAnnouncement"
    ),
    numberOfDoctorReporting: makeNodeComponent("numberOfDoctorReporting"),
    firstLastName: makeNodeComponent("firstLastName"),
    bookmarkIcon: makeNodeComponent("bookmarkIcon"),
    wardRoom: makeNodeComponent("wardRoom"),
    roomBed: makeNodeComponent("roomBed"),
    ward: makeNodeComponent("ward"),
    patientDataButtons: makeNodeComponent("patientDataButtons"),
    patientProfile: makeNodeComponent("patientProfile"),
    consultNotify: makeNodeComponent("consultNotify"),
    radiologyReport: makeNodeComponent("radiologyReport"),
    laboratoryData: makeNodeComponent("laboratoryData"),
    commentButton: makeNodeComponent("commentButton"),
    modalWard: makeNodeComponent("modalWard"),
    ward3: makeNodeComponent("ward3"),
    wardsList: makeNodeComponent("wardsList"),
    wardsName: makeNodeComponent("wardsName"),
    searchbarWard: makeNodeComponent("searchbarWard"),
    modalPhysician: makeNodeComponent("modalPhysician"),
    physiciansList: makeNodeComponent("physiciansList"),
    physiciansList2: makeNodeComponent("physiciansList2"),
    physiciansName: makeNodeComponent("physiciansName"),
    searchbarPhysicians: makeNodeComponent("searchbarPhysicians"),
    modalConsultFilterType: makeNodeComponent("modalConsultFilterType"),
    filterTypes: makeNodeComponent("filterTypes"),
    senderServiceType: makeNodeComponent("senderServiceType"),
    receiverServiceType: makeNodeComponent("receiverServiceType"),
    deleteFilters: makeNodeComponent("deleteFilters"),
    getServicesForConsult: makeNodeComponent("getServicesForConsult"),
    modalConsultSenderService: makeNodeComponent("modalConsultSenderService"),
    senderServiceList: makeNodeComponent("senderServiceList"),
    servicesName: makeNodeComponent("servicesName"),
    modalConsultReceiverService: makeNodeComponent(
      "modalConsultReceiverService"
    ),
    receiverServiceList: makeNodeComponent("receiverServiceList"),
    servicesName2: makeNodeComponent("servicesName2"),
    modalReplyConsultConfirmation: makeNodeComponent(
      "modalReplyConsultConfirmation"
    ),
    confirmationContent: makeNodeComponent("confirmationContent"),
    confirmationYesNo: makeNodeComponent("confirmationYesNo"),
    noConfirm: makeNodeComponent("noConfirm"),
    confirm: makeNodeComponent("confirm"),
    unsuccessfulReplyConsult: makeNodeComponent("unsuccessfulReplyConsult"),
    title: makeNodeComponent("title"),
    guide: makeNodeComponent("guide"),
    modalFeatureBanner: makeNodeComponent("modalFeatureBanner"),
    newFeatureBanner: makeNodeComponent("newFeatureBanner"),
    متوجهشدم: makeNodeComponent(
      "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u0645"
    ),
    modalNoticeBanner: makeNodeComponent("modalNoticeBanner"),
    newNoticeBanner: makeNodeComponent("newNoticeBanner"),
    متوجهشدم2: makeNodeComponent(
      "\u0645\u062a\u0648\u062c\u0647\u0634\u062f\u06452"
    ),
    modalNps: makeNodeComponent("modalNps"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/957a77907b71a1e7f098ff6c3ef9914b.jpg",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
