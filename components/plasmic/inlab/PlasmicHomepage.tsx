// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: oQ9IYAdIiE5g

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import BookmarkIcon from "../../BookmarkIcon"; // plasmic-import: PK_hwsu90gKT/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: oQ9IYAdIiE5g/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: YlP_1riCYk4W/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: YIqBWKHX3AVs/icon
import Icons8ClosesvgIcon from "./icons/PlasmicIcon__Icons8Closesvg"; // plasmic-import: -xG_spDBispP/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: kYUnvWOY7oUw/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: AgX6cnN3YV61/icon
import BookmarkPlusSvgrepoComsvgIcon from "./icons/PlasmicIcon__BookmarkPlusSvgrepoComsvg"; // plasmic-import: laC4EyEnFr3s/icon
import BookmarkDashFillSvgrepoComsvgIcon from "./icons/PlasmicIcon__BookmarkDashFillSvgrepoComsvg"; // plasmic-import: OXlS9uB7Ffdy/icon
import IndicatorIcon from "./icons/PlasmicIcon__Indicator"; // plasmic-import: B34gCeBlzVGZ/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: NFXRoS4oqKav/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  open?: boolean;
  modalOpen2?: boolean;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "open",
  "modalOpen2"
);

export type PlasmicHomepage__OverridesType = {
  homepage?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  pageContent?: Flex__<"div">;
  modalRemoveBookmarks?: Flex__<typeof AntdModal>;
  deletecancel?: Flex__<"div">;
  cancelButton?: Flex__<typeof Button>;
  deleteAllBookmarks?: Flex__<typeof Button>;
  controlPanel?: Flex__<"div">;
  namespaceTitle?: Flex__<"div">;
  searchSetting?: Flex__<"div">;
  settingIcon?: Flex__<"svg">;
  searchbar?: Flex__<typeof TextInput>;
  tabs?: Flex__<"div">;
  serviceButtonStack?: Flex__<"div">;
  service?: Flex__<typeof Button>;
  bookmarkedButtonStack?: Flex__<"div">;
  bookmarked?: Flex__<typeof Button>;
  نتايحجستوجو?: Flex__<"div">;
  patients?: Flex__<typeof ApiFetcherComponent>;
  header2?: Flex__<"div">;
  buttonاردنهمهبومارها?: Flex__<typeof Button>;
  bookmarksSort?: Flex__<typeof Button>;
  بمارافتنشد?: Flex__<"div">;
  bookmarkGuide?: Flex__<"div">;
  bookmarkImage?: Flex__<"svg">;
  bookmarkedImage?: Flex__<"svg">;
  لطفامنتظربماند?: Flex__<"div">;
  patientCards?: Flex__<"div">;
  patientNameBookmarkIcon?: Flex__<"div">;
  dismision?: Flex__<"div">;
  firstLastName?: Flex__<"div">;
  bookmarkIcon?: Flex__<typeof BookmarkIcon>;
  wardRoom?: Flex__<"div">;
  roomBed?: Flex__<"div">;
  ward?: Flex__<"div">;
  patientDataButtons?: Flex__<"div">;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  radiologyReport?: Flex__<typeof PlasmicImg__>;
  laboratoryData?: Flex__<typeof PlasmicImg__>;
  commentButton?: Flex__<typeof Button>;
  modalServices?: Flex__<typeof AntdModal>;
  services?: Flex__<typeof ApiFetcherComponent>;
  servicesList?: Flex__<"div">;
  servicesName?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          open: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchbar.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "service.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarked.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commentButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalServices.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarkIcon[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "filterBookmarked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "filterService",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "service.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.filterService === "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "bookmarked.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.filterBookmarked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "commentButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "service.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.filterService !== "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "bookmarked.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !$state.filterBookmarked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "commentButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonاردنهمهبومارها.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonاردنهمهبومارها.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonاردنهمهبومارها.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalRemoveBookmarks.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarksSort.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarksSort.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarksSort.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "service.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarked.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonاردنهمهبومارها.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarksSort.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !$state.bookmarksSort2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "commentButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "service.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarked.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonاردنهمهبومارها.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarksSort.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.bookmarksSort2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "commentButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookmarksSort2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("bookmarks_sort") === "تخت"
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "cancelButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAllBookmarks.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"homepage"}
        data-plasmic-override={overrides.homepage}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.homepage
        )}
      >
        <RedirectToInlabLogin
          data-plasmic-name={"redirectToInlabLogin"}
          data-plasmic-override={overrides.redirectToInlabLogin}
          className={classNames("__wab_instance", sty.redirectToInlabLogin)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <div
          data-plasmic-name={"pageContent"}
          data-plasmic-override={overrides.pageContent}
          className={classNames(projectcss.all, sty.pageContent)}
        >
          <AntdModal
            data-plasmic-name={"modalRemoveBookmarks"}
            data-plasmic-override={overrides.modalRemoveBookmarks}
            cancelText={"\u0644\u063a\u0648"}
            className={classNames("__wab_instance", sty.modalRemoveBookmarks)}
            closeButtonClassName={classNames({
              [sty["pcls_G2iYBhrSoKBv"]]: true
            })}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            footer={
              <Stack__
                as={"div"}
                data-plasmic-name={"deletecancel"}
                data-plasmic-override={overrides.deletecancel}
                hasGap={true}
                className={classNames(projectcss.all, sty.deletecancel)}
              >
                <Button
                  data-plasmic-name={"cancelButton"}
                  data-plasmic-override={overrides.cancelButton}
                  className={classNames("__wab_instance", sty.cancelButton)}
                  color={"clear"}
                  deselected={generateStateValueProp($state, [
                    "cancelButton",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "cancelButton",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalRemoveBookmarksOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modalRemoveBookmarks", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalRemoveBookmarksOpen"] != null &&
                      typeof $steps["updateModalRemoveBookmarksOpen"] ===
                        "object" &&
                      typeof $steps["updateModalRemoveBookmarksOpen"].then ===
                        "function"
                    ) {
                      $steps["updateModalRemoveBookmarksOpen"] = await $steps[
                        "updateModalRemoveBookmarksOpen"
                      ];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cancelButton",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "cancelButton",
                    "selected"
                  ])}
                  shape={"sharp"}
                  sortDeselected={generateStateValueProp($state, [
                    "cancelButton",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "cancelButton",
                    "sortSelected"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2Idr
                    )}
                  >
                    {"\u0644\u063a\u0648"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"deleteAllBookmarks"}
                  data-plasmic-override={overrides.deleteAllBookmarks}
                  className={classNames(
                    "__wab_instance",
                    sty.deleteAllBookmarks
                  )}
                  color={"red"}
                  deselected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["deletePatientsBookmarked"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "DELETE",
                              `/n8n/webhook/bookmark_patientcard?namespace_id=${localStorage.getItem(
                                "inlab_user_namespace_id"
                              )}`,
                              {}
                            ]
                          };
                          return $globalActions[
                            "AuthGlobalContext.apiFetcher"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["deletePatientsBookmarked"] != null &&
                      typeof $steps["deletePatientsBookmarked"] === "object" &&
                      typeof $steps["deletePatientsBookmarked"].then ===
                        "function"
                    ) {
                      $steps["deletePatientsBookmarked"] = await $steps[
                        "deletePatientsBookmarked"
                      ];
                    }

                    $steps["updateModalRemoveBookmarksOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modalRemoveBookmarks", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalRemoveBookmarksOpen"] != null &&
                      typeof $steps["updateModalRemoveBookmarksOpen"] ===
                        "object" &&
                      typeof $steps["updateModalRemoveBookmarksOpen"].then ===
                        "function"
                    ) {
                      $steps["updateModalRemoveBookmarksOpen"] = await $steps[
                        "updateModalRemoveBookmarksOpen"
                      ];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "deleteAllBookmarks",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "selected"
                  ])}
                  shape={"sharp"}
                  sortDeselected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "deleteAllBookmarks",
                    "sortSelected"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__so9CR
                    )}
                  >
                    {
                      "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
                    }
                  </div>
                </Button>
              </Stack__>
            }
            modalContentClassName={classNames({
              [sty["pcls_pFu_x0Xy_idR"]]: true
            })}
            modalScopeClassName={sty["modalRemoveBookmarks__modal"]}
            okText={
              "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
            }
            onOpenChange={generateStateOnChangeProp($state, [
              "modalRemoveBookmarks",
              "open"
            ])}
            open={generateStateValueProp($state, [
              "modalRemoveBookmarks",
              "open"
            ])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tR3Z
                )}
              >
                {
                  "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0647\u0627"
                }
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_gF08-ctR0P0b"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rSn5A)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vVRbL
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        "آيا اطمينان داريد که مي خواهيد تمام بيماران بوکمارک شده خود در " +
                        localStorage.getItem("inlab_user_namespace_title") +
                        " را پاک کنيد؟ "
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0622\u064a\u0627 \u0627\u0637\u0645\u064a\u0646\u0627\u0646 \u062f\u0627\u0631\u064a\u062f \u06a9\u0647 \u0645\u064a \u062e\u0648\u0627\u0647\u064a\u062f \u062a\u0645\u0627\u0645 \u0628\u064a\u0645\u0627\u0631\u0627\u0646 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0634\u062f\u0647 \u062e\u0648\u062f \u062f\u0631 \u0628\u064a\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u0631\u0627 \u067e\u0627\u06a9 \u06a9\u0646\u064a\u062f\u061f";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </AntdModal>
          <Stack__
            as={"div"}
            data-plasmic-name={"controlPanel"}
            data-plasmic-override={overrides.controlPanel}
            hasGap={true}
            className={classNames(projectcss.all, sty.controlPanel)}
          >
            <div
              data-plasmic-name={"namespaceTitle"}
              data-plasmic-override={overrides.namespaceTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.namespaceTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return localStorage.getItem("inlab_user_namespace_title");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"searchSetting"}
              data-plasmic-override={overrides.searchSetting}
              className={classNames(projectcss.all, sty.searchSetting)}
            >
              <MenuIcon
                data-plasmic-name={"settingIcon"}
                data-plasmic-override={overrides.settingIcon}
                className={classNames(projectcss.all, sty.settingIcon)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToUserSetting"] = true
                    ? (() => {
                        const actionArgs = { destination: `/user/setting` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToUserSetting"] != null &&
                    typeof $steps["goToUserSetting"] === "object" &&
                    typeof $steps["goToUserSetting"].then === "function"
                  ) {
                    $steps["goToUserSetting"] = await $steps["goToUserSetting"];
                  }
                }}
                role={"img"}
              />

              <TextInput
                data-plasmic-name={"searchbar"}
                data-plasmic-override={overrides.searchbar}
                className={classNames("__wab_instance", sty.searchbar)}
                endIcon={
                  <Icons8ClosesvgIcon
                    className={classNames(projectcss.all, sty.svg___2L1F5)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSearchbar2Value"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["searchbar", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSearchbar2Value"] != null &&
                        typeof $steps["updateSearchbar2Value"] === "object" &&
                        typeof $steps["updateSearchbar2Value"].then ===
                          "function"
                      ) {
                        $steps["updateSearchbar2Value"] = await $steps[
                          "updateSearchbar2Value"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["searchbar", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  (async event => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                }}
                placeholder={
                  hasVariant(globalVariants, "screen", "mobileFirst")
                    ? "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633"
                    : "\u0646\u0627\u0645\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0646\u062f\u0647\u060c \u06a9\u062f \u0645\u0644\u06cc\u060c \u06a9\u062f \u067e\u06a9\u0633"
                }
                startIcon={
                  <SearchsvgIcon
                    className={classNames(projectcss.all, sty.svg___2WfJc)}
                    role={"img"}
                  />
                }
                value={
                  generateStateValueProp($state, ["searchbar", "value"]) ?? ""
                }
              />
            </div>
            {(() => {
              try {
                return $state.searchbar.value === "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"tabs"}
                data-plasmic-override={overrides.tabs}
                hasGap={true}
                className={classNames(projectcss.all, sty.tabs)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"serviceButtonStack"}
                    data-plasmic-override={overrides.serviceButtonStack}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.serviceButtonStack
                    )}
                  >
                    <Icons8ClosesvgIcon
                      className={classNames(projectcss.all, sty.svg__jbwB)}
                      role={"img"}
                    />

                    {(() => {
                      try {
                        return $state.service.selected;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__fskx3)}
                        role={"img"}
                      />
                    ) : null}
                    {false ? (
                      <Button
                        data-plasmic-name={"service"}
                        data-plasmic-override={overrides.service}
                        className={classNames("__wab_instance", sty.service)}
                        deselected={generateStateValueProp($state, [
                          "service",
                          "deselected"
                        ])}
                        endIcon={
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uruAv
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={generateStateValueProp($state, [
                          "service",
                          "isDisabled"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateModalOpen"] =
                            localStorage.getItem("filter_service") === "true" ||
                            (localStorage.getItem("filter_service_id") ||
                              localStorage.getItem("filter_service_name")) ===
                              null
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalServices", "open"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }

                          $steps["setTrueFilterServiceLocalStorage"] =
                            (localStorage.getItem("filter_service_id") ||
                              localStorage.getItem("filter_service_name")) !==
                            null
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "filter_service",
                                        "true"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["setTrueFilterServiceLocalStorage"] !=
                              null &&
                            typeof $steps[
                              "setTrueFilterServiceLocalStorage"
                            ] === "object" &&
                            typeof $steps["setTrueFilterServiceLocalStorage"]
                              .then === "function"
                          ) {
                            $steps["setTrueFilterServiceLocalStorage"] =
                              await $steps["setTrueFilterServiceLocalStorage"];
                          }

                          $steps["trueStateFilterService"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["filterService"]
                                  },
                                  operation: 0,
                                  value: localStorage.getItem("filter_service")
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["trueStateFilterService"] != null &&
                            typeof $steps["trueStateFilterService"] ===
                              "object" &&
                            typeof $steps["trueStateFilterService"].then ===
                              "function"
                          ) {
                            $steps["trueStateFilterService"] = await $steps[
                              "trueStateFilterService"
                            ];
                          }

                          $steps["setFalseFilterBookmarkedLocalStorage"] =
                            (localStorage.getItem("filter_service_id") ||
                              localStorage.getItem("filter_service_name")) !==
                            null
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "filter_bookmarked",
                                        "false"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["setFalseFilterBookmarkedLocalStorage"] !=
                              null &&
                            typeof $steps[
                              "setFalseFilterBookmarkedLocalStorage"
                            ] === "object" &&
                            typeof $steps[
                              "setFalseFilterBookmarkedLocalStorage"
                            ].then === "function"
                          ) {
                            $steps["setFalseFilterBookmarkedLocalStorage"] =
                              await $steps[
                                "setFalseFilterBookmarkedLocalStorage"
                              ];
                          }

                          $steps["falseStateFilterBookmarked"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["filterBookmarked"]
                                  },
                                  operation: 0,
                                  value:
                                    localStorage.getItem("filter_bookmarked")
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["falseStateFilterBookmarked"] != null &&
                            typeof $steps["falseStateFilterBookmarked"] ===
                              "object" &&
                            typeof $steps["falseStateFilterBookmarked"].then ===
                              "function"
                          ) {
                            $steps["falseStateFilterBookmarked"] = await $steps[
                              "falseStateFilterBookmarked"
                            ];
                          }

                          $steps["logConsole"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      console.log(
                                        `filter_bookmarked: ${localStorage.getItem(
                                          "filter_bookmarked"
                                        )}`
                                      );
                                      return console.log(
                                        `filter_service: ${localStorage.getItem(
                                          "filter_service"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["logConsole"] != null &&
                            typeof $steps["logConsole"] === "object" &&
                            typeof $steps["logConsole"].then === "function"
                          ) {
                            $steps["logConsole"] = await $steps["logConsole"];
                          }

                          $steps["reloadPatients"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "patients",
                                  action: "reload"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["reloadPatients"] != null &&
                            typeof $steps["reloadPatients"] === "object" &&
                            typeof $steps["reloadPatients"].then === "function"
                          ) {
                            $steps["reloadPatients"] = await $steps[
                              "reloadPatients"
                            ];
                          }
                        }}
                        onDeselectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "service",
                            "deselected"
                          ])(eventArgs[0]);
                        }}
                        onIsDisabledChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "service",
                            "isDisabled"
                          ])(eventArgs[0]);
                        }}
                        onSelectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "service",
                            "selected"
                          ])(eventArgs[0]);
                        }}
                        onSortDeselectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "service",
                            "sortDeselected"
                          ])(eventArgs[0]);
                        }}
                        onSortSelectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "service",
                            "sortSelected"
                          ])(eventArgs[0]);
                        }}
                        selected={generateStateValueProp($state, [
                          "service",
                          "selected"
                        ])}
                        sortDeselected={generateStateValueProp($state, [
                          "service",
                          "sortDeselected"
                        ])}
                        sortSelected={generateStateValueProp($state, [
                          "service",
                          "sortSelected"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___69F6Z
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  if (
                                    localStorage.getItem(
                                      "filter_service_name"
                                    ) !== null
                                  ) {
                                    return (
                                      "سرویس : " +
                                      localStorage.getItem(
                                        "filter_service_name"
                                      )
                                    );
                                  } else {
                                    return "سرویس";
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                    ) : null}
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"bookmarkedButtonStack"}
                  data-plasmic-override={overrides.bookmarkedButtonStack}
                  className={classNames(
                    projectcss.all,
                    sty.bookmarkedButtonStack
                  )}
                >
                  <Icons8ClosesvgIcon
                    className={classNames(projectcss.all, sty.svg__rave3)}
                    role={"img"}
                  />

                  <Button
                    data-plasmic-name={"bookmarked"}
                    data-plasmic-override={overrides.bookmarked}
                    className={classNames("__wab_instance", sty.bookmarked)}
                    deselected={generateStateValueProp($state, [
                      "bookmarked",
                      "deselected"
                    ])}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__eNkB)}
                        role={"img"}
                      />
                    }
                    isDisabled={generateStateValueProp($state, [
                      "bookmarked",
                      "isDisabled"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["setTrueFilterBookmarkedLocalStorage"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "filter_bookmarked",
                                  "true"
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["setTrueFilterBookmarkedLocalStorage"] != null &&
                        typeof $steps["setTrueFilterBookmarkedLocalStorage"] ===
                          "object" &&
                        typeof $steps["setTrueFilterBookmarkedLocalStorage"]
                          .then === "function"
                      ) {
                        $steps["setTrueFilterBookmarkedLocalStorage"] =
                          await $steps["setTrueFilterBookmarkedLocalStorage"];
                      }

                      $steps["consoleLog"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return console.log(
                                  `filter_bookmarked: ${localStorage.getItem(
                                    "filter_bookmarked"
                                  )}`
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["consoleLog"] != null &&
                        typeof $steps["consoleLog"] === "object" &&
                        typeof $steps["consoleLog"].then === "function"
                      ) {
                        $steps["consoleLog"] = await $steps["consoleLog"];
                      }

                      $steps["trueStateFilterBookmarked"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["filterBookmarked"]
                              },
                              operation: 0,
                              value: localStorage.getItem("filter_bookmarked")
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["trueStateFilterBookmarked"] != null &&
                        typeof $steps["trueStateFilterBookmarked"] ===
                          "object" &&
                        typeof $steps["trueStateFilterBookmarked"].then ===
                          "function"
                      ) {
                        $steps["trueStateFilterBookmarked"] = await $steps[
                          "trueStateFilterBookmarked"
                        ];
                      }

                      $steps["consoleLog3"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return console.log(
                                  `state_filter_bookmarked: ${$state.filterBookmarked} `
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["consoleLog3"] != null &&
                        typeof $steps["consoleLog3"] === "object" &&
                        typeof $steps["consoleLog3"].then === "function"
                      ) {
                        $steps["consoleLog3"] = await $steps["consoleLog3"];
                      }

                      $steps["setFalseFilterServiceLocalStorage"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "filter_service",
                                  "false"
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["setFalseFilterServiceLocalStorage"] != null &&
                        typeof $steps["setFalseFilterServiceLocalStorage"] ===
                          "object" &&
                        typeof $steps["setFalseFilterServiceLocalStorage"]
                          .then === "function"
                      ) {
                        $steps["setFalseFilterServiceLocalStorage"] =
                          await $steps["setFalseFilterServiceLocalStorage"];
                      }

                      $steps["consoleLog2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return console.log(
                                  `filter_service: ${localStorage.getItem(
                                    "filter_service"
                                  )}`
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["consoleLog2"] != null &&
                        typeof $steps["consoleLog2"] === "object" &&
                        typeof $steps["consoleLog2"].then === "function"
                      ) {
                        $steps["consoleLog2"] = await $steps["consoleLog2"];
                      }

                      $steps["falseStateFilterService"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["filterService"]
                              },
                              operation: 0,
                              value: localStorage.getItem("filter_service")
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["falseStateFilterService"] != null &&
                        typeof $steps["falseStateFilterService"] === "object" &&
                        typeof $steps["falseStateFilterService"].then ===
                          "function"
                      ) {
                        $steps["falseStateFilterService"] = await $steps[
                          "falseStateFilterService"
                        ];
                      }

                      $steps["consoleLog4"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return console.log(
                                  `state_filter_service: ${$state.filterService} `
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["consoleLog4"] != null &&
                        typeof $steps["consoleLog4"] === "object" &&
                        typeof $steps["consoleLog4"].then === "function"
                      ) {
                        $steps["consoleLog4"] = await $steps["consoleLog4"];
                      }

                      $steps["reloadPatients"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "patients",
                              action: "reload"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["reloadPatients"] != null &&
                        typeof $steps["reloadPatients"] === "object" &&
                        typeof $steps["reloadPatients"].then === "function"
                      ) {
                        $steps["reloadPatients"] = await $steps[
                          "reloadPatients"
                        ];
                      }
                    }}
                    onDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "bookmarked",
                        "deselected"
                      ])(eventArgs[0]);
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "bookmarked",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                    onSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "bookmarked",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    onSortDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "bookmarked",
                        "sortDeselected"
                      ])(eventArgs[0]);
                    }}
                    onSortSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "bookmarked",
                        "sortSelected"
                      ])(eventArgs[0]);
                    }}
                    selected={generateStateValueProp($state, [
                      "bookmarked",
                      "selected"
                    ])}
                    sortDeselected={generateStateValueProp($state, [
                      "bookmarked",
                      "sortDeselected"
                    ])}
                    sortSelected={generateStateValueProp($state, [
                      "bookmarked",
                      "sortSelected"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5DmEl
                      )}
                    >
                      {
                        "\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0647\u0627"
                      }
                    </div>
                  </Button>
                </div>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $state.searchbar.value !== "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={
                  "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
                }
                data-plasmic-override={overrides.نتايحجستوجو}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.نتايحجستوجو
                )}
              >
                {""}
              </div>
            ) : null}
          </Stack__>
          <ApiFetcherComponent
            data-plasmic-name={"patients"}
            data-plasmic-override={overrides.patients}
            className={classNames("__wab_instance", sty.patients)}
            delay={300}
            method={"GET"}
            path={`/n8n/webhook/patient?search=${
              $state.searchbar.value
            }&namespace_id=${localStorage.getItem(
              "inlab_user_namespace_id"
            )}&sort=${localStorage.getItem("bookmarks_sort")}`}
            ref={ref => {
              $refs["patients"] = ref;
            }}
            requestBody={undefined}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $state.bookmarked.selected &&
                        $state.searchbar.value === "" &&
                        $ctx.fetched_data.data !== ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"header2"}
                      data-plasmic-override={overrides.header2}
                      className={classNames(projectcss.all, sty.header2)}
                    >
                      <Button
                        data-plasmic-name={
                          "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627"
                        }
                        data-plasmic-override={overrides.buttonاردنهمهبومارها}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonاردنهمهبومارها
                        )}
                        color={"red"}
                        deselected={generateStateValueProp($state, [
                          "buttonاردنهمهبومارها",
                          "deselected"
                        ])}
                        isDisabled={generateStateValueProp($state, [
                          "buttonاردنهمهبومارها",
                          "isDisabled"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateModalRemoveBookmarksOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "modalRemoveBookmarks",
                                      "open"
                                    ]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalRemoveBookmarksOpen"] != null &&
                            typeof $steps["updateModalRemoveBookmarksOpen"] ===
                              "object" &&
                            typeof $steps["updateModalRemoveBookmarksOpen"]
                              .then === "function"
                          ) {
                            $steps["updateModalRemoveBookmarksOpen"] =
                              await $steps["updateModalRemoveBookmarksOpen"];
                          }
                        }}
                        onDeselectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonاردنهمهبومارها",
                            "deselected"
                          ])(eventArgs[0]);
                        }}
                        onIsDisabledChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonاردنهمهبومارها",
                            "isDisabled"
                          ])(eventArgs[0]);
                        }}
                        onSelectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonاردنهمهبومارها",
                            "selected"
                          ])(eventArgs[0]);
                        }}
                        onSortDeselectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonاردنهمهبومارها",
                            "sortDeselected"
                          ])(eventArgs[0]);
                        }}
                        onSortSelectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonاردنهمهبومارها",
                            "sortSelected"
                          ])(eventArgs[0]);
                        }}
                        selected={generateStateValueProp($state, [
                          "buttonاردنهمهبومارها",
                          "selected"
                        ])}
                        sortDeselected={generateStateValueProp($state, [
                          "buttonاردنهمهبومارها",
                          "sortDeselected"
                        ])}
                        sortSelected={generateStateValueProp($state, [
                          "buttonاردنهمهبومارها",
                          "sortSelected"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ze1An
                          )}
                        >
                          {
                            "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
                          }
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"bookmarksSort"}
                        data-plasmic-override={overrides.bookmarksSort}
                        className={classNames(
                          "__wab_instance",
                          sty.bookmarksSort
                        )}
                        deselected={generateStateValueProp($state, [
                          "bookmarksSort",
                          "deselected"
                        ])}
                        isDisabled={generateStateValueProp($state, [
                          "bookmarksSort",
                          "isDisabled"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateBookmarksSort3"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["bookmarksSort2"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateBookmarksSort3"] != null &&
                            typeof $steps["updateBookmarksSort3"] ===
                              "object" &&
                            typeof $steps["updateBookmarksSort3"].then ===
                              "function"
                          ) {
                            $steps["updateBookmarksSort3"] = await $steps[
                              "updateBookmarksSort3"
                            ];
                          }

                          $steps["setLocalBookmarksSort"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $state.bookmarksSort2
                                      ? localStorage.setItem(
                                          "bookmarks_sort",
                                          "تخت"
                                        )
                                      : localStorage.setItem(
                                          "bookmarks_sort",
                                          ""
                                        );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["setLocalBookmarksSort"] != null &&
                            typeof $steps["setLocalBookmarksSort"] ===
                              "object" &&
                            typeof $steps["setLocalBookmarksSort"].then ===
                              "function"
                          ) {
                            $steps["setLocalBookmarksSort"] = await $steps[
                              "setLocalBookmarksSort"
                            ];
                          }

                          $steps["runActionOnPatients"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "patients",
                                  action: "reload"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnPatients"] != null &&
                            typeof $steps["runActionOnPatients"] === "object" &&
                            typeof $steps["runActionOnPatients"].then ===
                              "function"
                          ) {
                            $steps["runActionOnPatients"] = await $steps[
                              "runActionOnPatients"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      console.log(
                                        `state_bookmarksSort: ${$state.bookmarksSort2} `
                                      );
                                      return console.log(
                                        `localstorage_bookmarks_sort: ${localStorage.getItem(
                                          "bookmarks_sort"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        onDeselectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookmarksSort",
                            "deselected"
                          ])(eventArgs[0]);
                        }}
                        onIsDisabledChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookmarksSort",
                            "isDisabled"
                          ])(eventArgs[0]);
                        }}
                        onSelectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookmarksSort",
                            "selected"
                          ])(eventArgs[0]);
                        }}
                        onSortDeselectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookmarksSort",
                            "sortDeselected"
                          ])(eventArgs[0]);
                        }}
                        onSortSelectedChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookmarksSort",
                            "sortSelected"
                          ])(eventArgs[0]);
                        }}
                        selected={generateStateValueProp($state, [
                          "bookmarksSort",
                          "selected"
                        ])}
                        sortDeselected={generateStateValueProp($state, [
                          "bookmarksSort",
                          "sortDeselected"
                        ])}
                        sortSelected={generateStateValueProp($state, [
                          "bookmarksSort",
                          "sortSelected"
                        ])}
                      >
                        {(() => {
                          try {
                            return $state.bookmarksSort2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "mobileFirst"
                              )
                                ? Icons8ClosesvgIcon
                                : Icons8ClosesvgIcon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__tw0X
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pMcsf
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "مرتب سازی : تخت";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0631\u062a\u0628 \u0633\u0627\u0632\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Icon5Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5KDcq
                          )}
                          role={"img"}
                        />
                      </Button>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.fetched_data.loading === false &&
                        $ctx.fetched_data.data === "" &&
                        ($state.searchbar.value !== "" ||
                          $state.service.selected)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={
                        "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f"
                      }
                      data-plasmic-override={overrides.بمارافتنشد}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.بمارافتنشد
                      )}
                    >
                      {
                        "\u0628\u06cc\u0645\u0627\u0631\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $state.bookmarked.selected &&
                        $ctx.fetched_data.loading === false &&
                        $state.searchbar.value === "" &&
                        $ctx.fetched_data.data === ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"bookmarkGuide"}
                      data-plasmic-override={overrides.bookmarkGuide}
                      className={classNames(projectcss.all, sty.bookmarkGuide)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y0Cq
                        )}
                      >
                        <BookmarkPlusSvgrepoComsvgIcon
                          data-plasmic-name={"bookmarkImage"}
                          data-plasmic-override={overrides.bookmarkImage}
                          className={classNames(
                            projectcss.all,
                            sty.bookmarkImage
                          )}
                          role={"img"}
                        />

                        <BookmarkDashFillSvgrepoComsvgIcon
                          data-plasmic-name={"bookmarkedImage"}
                          data-plasmic-override={overrides.bookmarkedImage}
                          className={classNames(
                            projectcss.all,
                            sty.bookmarkedImage
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jzEz
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              '\u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 "\u0622\u06cc\u06a9\u0648\u0646 \u0628\u0648\u06a9\u0645\u0627\u0631\u06a9" \u0628\u06cc\u0645\u0627\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \n\u0644\u06cc\u0633\u062a '
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {
                              '"\u0628\u0648\u06a9\u0645\u0627\u0631\u06a9 \u0647\u0627"'
                            }
                          </span>
                          <React.Fragment>
                            {
                              " \u0627\u0636\u0627\u0641\u0647 \u06cc\u0627 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileFirst")
                      ? (() => {
                          try {
                            return $ctx.fetched_data.loading == true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $ctx.fetched_data.loading == true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      data-plasmic-name={
                        "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u062f"
                      }
                      data-plasmic-override={overrides.لطفامنتظربماند}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.لطفامنتظربماند
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $ctx.fetched_data.data !== "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetched_data.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"patientCards"}
                            data-plasmic-override={overrides.patientCards}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.patientCards
                            )}
                            key={currentIndex}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"patientNameBookmarkIcon"}
                              data-plasmic-override={
                                overrides.patientNameBookmarkIcon
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.patientNameBookmarkIcon
                              )}
                            >
                              {(() => {
                                try {
                                  return currentItem.dismissed;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"dismision"}
                                  data-plasmic-override={overrides.dismision}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.dismision
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tJgau
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ color: "#DA0000" }}
                                      >
                                        {"\u062a\u0631\u062e\u06cc\u0635"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                  <IndicatorIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__anjLh
                                    )}
                                    role={"img"}
                                  />
                                </Stack__>
                              ) : null}
                              <div
                                data-plasmic-name={"firstLastName"}
                                data-plasmic-override={overrides.firstLastName}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.firstLastName
                                )}
                              >
                                <React.Fragment>
                                  {currentItem.first_name +
                                    " " +
                                    currentItem.last_name}
                                </React.Fragment>
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.bookmarkIcon
                                  ),
                                  onSelectedChange: generateStateOnChangeProp(
                                    $state,
                                    [
                                      "bookmarkIcon",
                                      __plasmic_idx_0,
                                      "selected"
                                    ]
                                  ),
                                  patientId: (() => {
                                    try {
                                      return currentItem.profile_id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  selected: generateStateValueProp($state, [
                                    "bookmarkIcon",
                                    __plasmic_idx_0,
                                    "selected"
                                  ]),
                                  trigerReload: async () => {
                                    const $steps = {};

                                    $steps["runActionOnPatients"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            tplRef: "patients",
                                            action: "reload"
                                          };
                                          return (({
                                            tplRef,
                                            action,
                                            args
                                          }) => {
                                            return $refs?.[tplRef]?.[action]?.(
                                              ...(args ?? [])
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runActionOnPatients"] != null &&
                                      typeof $steps["runActionOnPatients"] ===
                                        "object" &&
                                      typeof $steps["runActionOnPatients"]
                                        .then === "function"
                                    ) {
                                      $steps["runActionOnPatients"] =
                                        await $steps["runActionOnPatients"];
                                    }
                                  }
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "bookmarkIcon[].selected",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.bookmarked;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <BookmarkIcon
                                    data-plasmic-name={"bookmarkIcon"}
                                    data-plasmic-override={
                                      overrides.bookmarkIcon
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </Stack__>
                            <div
                              data-plasmic-name={"wardRoom"}
                              data-plasmic-override={overrides.wardRoom}
                              className={classNames(
                                projectcss.all,
                                sty.wardRoom
                              )}
                            >
                              <div
                                data-plasmic-name={"roomBed"}
                                data-plasmic-override={overrides.roomBed}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.roomBed
                                )}
                              >
                                <React.Fragment>
                                  {currentItem.bed.includes("تخت")
                                    ? currentItem.bed
                                    : "تخت " + currentItem.bed}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"ward"}
                                data-plasmic-override={overrides.ward}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.ward
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.ward.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"patientDataButtons"}
                              data-plasmic-override={
                                overrides.patientDataButtons
                              }
                              className={classNames(
                                projectcss.all,
                                sty.patientDataButtons
                              )}
                            >
                              <PlasmicImg__
                                data-plasmic-name={"patientProfile"}
                                data-plasmic-override={overrides.patientProfile}
                                alt={""}
                                className={classNames(sty.patientProfile)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"22px"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToPatientProfile"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/patient/${(() => {
                                            try {
                                              return currentItem.profile_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/${(() => {
                                            try {
                                              return currentItem.bookmarked;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/profile`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["goToPatientProfile"] != null &&
                                    typeof $steps["goToPatientProfile"] ===
                                      "object" &&
                                    typeof $steps["goToPatientProfile"].then ===
                                      "function"
                                  ) {
                                    $steps["goToPatientProfile"] = await $steps[
                                      "goToPatientProfile"
                                    ];
                                  }
                                }}
                                src={{
                                  src: "/plasmic/inlab/images/group2063.svg",
                                  fullWidth: 18.77,
                                  fullHeight: 20.34,
                                  aspectRatio: 0.904762
                                }}
                              />

                              <PlasmicImg__
                                data-plasmic-name={"radiologyReport"}
                                data-plasmic-override={
                                  overrides.radiologyReport
                                }
                                alt={""}
                                className={classNames(sty.radiologyReport)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"22px"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToImagingReportList"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/patient/${(() => {
                                            try {
                                              return currentItem.profile_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/${(() => {
                                            try {
                                              return currentItem.bookmarked;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/report/list`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["goToImagingReportList"] != null &&
                                    typeof $steps["goToImagingReportList"] ===
                                      "object" &&
                                    typeof $steps["goToImagingReportList"]
                                      .then === "function"
                                  ) {
                                    $steps["goToImagingReportList"] =
                                      await $steps["goToImagingReportList"];
                                  }
                                }}
                                src={{
                                  src: "/plasmic/inlab/images/group376.svg",
                                  fullWidth: 19.424,
                                  fullHeight: 19.98,
                                  aspectRatio: 1
                                }}
                              />

                              <PlasmicImg__
                                data-plasmic-name={"laboratoryData"}
                                data-plasmic-override={overrides.laboratoryData}
                                alt={""}
                                className={classNames(sty.laboratoryData)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"22px"}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToLaboratoryData"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/patient/${(() => {
                                            try {
                                              return currentItem.profile_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/${(() => {
                                            try {
                                              return currentItem.bookmarked;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}/lab`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["goToLaboratoryData"] != null &&
                                    typeof $steps["goToLaboratoryData"] ===
                                      "object" &&
                                    typeof $steps["goToLaboratoryData"].then ===
                                      "function"
                                  ) {
                                    $steps["goToLaboratoryData"] = await $steps[
                                      "goToLaboratoryData"
                                    ];
                                  }
                                }}
                                src={{
                                  src: "/plasmic/inlab/images/group384.svg",
                                  fullWidth: 14.575,
                                  fullHeight: 18.692,
                                  aspectRatio: 0.789474
                                }}
                              />
                            </div>
                          </Stack__>
                        );
                      })
                    : null}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </div>
        <Button
          data-plasmic-name={"commentButton"}
          data-plasmic-override={overrides.commentButton}
          className={classNames("__wab_instance", sty.commentButton)}
          color={"blue"}
          deselected={generateStateValueProp($state, [
            "commentButton",
            "deselected"
          ])}
          isDisabled={generateStateValueProp($state, [
            "commentButton",
            "isDisabled"
          ])}
          link={
            "https://docs.google.com/forms/d/e/1FAIpQLSdm--yB5xsMJ_PW-MFyyp_-3APBQ8dzti69zsMuIJz6SfoX-g/viewform?usp=sf_link"
          }
          onDeselectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "deselected"])(
              eventArgs[0]
            );
          }}
          onIsDisabledChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "isDisabled"])(
              eventArgs[0]
            );
          }}
          onSelectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["commentButton", "selected"])(
              eventArgs[0]
            );
          }}
          onSortDeselectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, [
              "commentButton",
              "sortDeselected"
            ])(eventArgs[0]);
          }}
          onSortSelectedChange={(...eventArgs) => {
            generateStateOnChangeProp($state, [
              "commentButton",
              "sortSelected"
            ])(eventArgs[0]);
          }}
          selected={generateStateValueProp($state, [
            "commentButton",
            "selected"
          ])}
          shape={"round"}
          size4={"compact"}
          sortDeselected={generateStateValueProp($state, [
            "commentButton",
            "sortDeselected"
          ])}
          sortSelected={generateStateValueProp($state, [
            "commentButton",
            "sortSelected"
          ])}
          target={true}
        >
          <Icon2Icon
            className={classNames(projectcss.all, sty.svg__rkQ3J)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bLr8V
            )}
          >
            {""}
          </div>
        </Button>
        {false ? (
          <AntdModal
            data-plasmic-name={"modalServices"}
            data-plasmic-override={overrides.modalServices}
            className={classNames("__wab_instance", sty.modalServices)}
            closeButtonClassName={classNames({
              [sty["pcls_d2EHzAfk33c5"]]: true
            })}
            closeIcon={
              <Icons8ClosesvgIcon
                className={classNames(projectcss.all, sty.svg___5W4Yy)}
                onClick={async event => {
                  const $steps = {};

                  $steps["reloadPatients"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "patients",
                          action: "reload"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["reloadPatients"] != null &&
                    typeof $steps["reloadPatients"] === "object" &&
                    typeof $steps["reloadPatients"].then === "function"
                  ) {
                    $steps["reloadPatients"] = await $steps["reloadPatients"];
                  }
                }}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_ovYNN16Mla3e"]]: true
            })}
            modalScopeClassName={sty["modalServices__modal"]}
            onOpenChange={generateStateOnChangeProp($state, [
              "modalServices",
              "open"
            ])}
            open={generateStateValueProp($state, ["modalServices", "open"])}
            title={null}
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_9pcykcaA_oRg"]]: true })}
          >
            <ApiFetcherComponent
              data-plasmic-name={"services"}
              data-plasmic-override={overrides.services}
              className={classNames("__wab_instance", sty.services)}
              headers={(() => {
                try {
                  return {
                    "X-Namespace": localStorage.getItem(
                      "inlab_user_namespace_id"
                    )
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              method={"GET"}
              path={"/api/v2/service"}
              ref={ref => {
                $refs["services"] = ref;
              }}
            >
              <DataCtxReader__>
                {$ctx => (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"servicesList"}
                    data-plasmic-override={overrides.servicesList}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.servicesList)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetched_data.data.services;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"servicesName"}
                          data-plasmic-override={overrides.servicesName}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.servicesName
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["setTrueFilterServiceLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "filter_service",
                                        "true"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setTrueFilterServiceLocalStorage"] !=
                                null &&
                              typeof $steps[
                                "setTrueFilterServiceLocalStorage"
                              ] === "object" &&
                              typeof $steps["setTrueFilterServiceLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["setTrueFilterServiceLocalStorage"] =
                                await $steps[
                                  "setTrueFilterServiceLocalStorage"
                                ];
                            }

                            $steps["trueStateFilterService"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["filterService"]
                                    },
                                    operation: 0,
                                    value:
                                      localStorage.getItem("filter_service")
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["trueStateFilterService"] != null &&
                              typeof $steps["trueStateFilterService"] ===
                                "object" &&
                              typeof $steps["trueStateFilterService"].then ===
                                "function"
                            ) {
                              $steps["trueStateFilterService"] = await $steps[
                                "trueStateFilterService"
                              ];
                            }

                            $steps["consoleLog3"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return console.log(
                                        `state_filter_service: ${$state.filterService} `
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["consoleLog3"] != null &&
                              typeof $steps["consoleLog3"] === "object" &&
                              typeof $steps["consoleLog3"].then === "function"
                            ) {
                              $steps["consoleLog3"] = await $steps[
                                "consoleLog3"
                              ];
                            }

                            $steps["setFalseFilterBookmarkedLocalStorage"] =
                              true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "filter_bookmarked",
                                          "false"
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["setFalseFilterBookmarkedLocalStorage"] !=
                                null &&
                              typeof $steps[
                                "setFalseFilterBookmarkedLocalStorage"
                              ] === "object" &&
                              typeof $steps[
                                "setFalseFilterBookmarkedLocalStorage"
                              ].then === "function"
                            ) {
                              $steps["setFalseFilterBookmarkedLocalStorage"] =
                                await $steps[
                                  "setFalseFilterBookmarkedLocalStorage"
                                ];
                            }

                            $steps["falseStateFilterBookmarked"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["filterBookmarked"]
                                    },
                                    operation: 0,
                                    value:
                                      localStorage.getItem("filter_bookmarked")
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["falseStateFilterBookmarked"] != null &&
                              typeof $steps["falseStateFilterBookmarked"] ===
                                "object" &&
                              typeof $steps["falseStateFilterBookmarked"]
                                .then === "function"
                            ) {
                              $steps["falseStateFilterBookmarked"] =
                                await $steps["falseStateFilterBookmarked"];
                            }

                            $steps["consoleLog2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return console.log(
                                        `state_filter_bookmarked: ${$state.filterBookmarked} `
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["consoleLog2"] != null &&
                              typeof $steps["consoleLog2"] === "object" &&
                              typeof $steps["consoleLog2"].then === "function"
                            ) {
                              $steps["consoleLog2"] = await $steps[
                                "consoleLog2"
                              ];
                            }

                            $steps["filterServiceIdLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "filter_service_id",
                                        currentItem.id
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["filterServiceIdLocalStorage"] != null &&
                              typeof $steps["filterServiceIdLocalStorage"] ===
                                "object" &&
                              typeof $steps["filterServiceIdLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["filterServiceIdLocalStorage"] =
                                await $steps["filterServiceIdLocalStorage"];
                            }

                            $steps["filterServiceTitleLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "filter_service_name",
                                        currentItem.name
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["filterServiceTitleLocalStorage"] !=
                                null &&
                              typeof $steps[
                                "filterServiceTitleLocalStorage"
                              ] === "object" &&
                              typeof $steps["filterServiceTitleLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["filterServiceTitleLocalStorage"] =
                                await $steps["filterServiceTitleLocalStorage"];
                            }

                            $steps["consoleLog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        console.log(
                                          `filter_bookmarked: ${localStorage.getItem(
                                            "filter_bookmarked"
                                          )}`
                                        );
                                        console.log(
                                          `filter_service: ${localStorage.getItem(
                                            "filter_service"
                                          )}`
                                        );
                                        console.log(
                                          `filter_service_id: ${localStorage.getItem(
                                            "filter_service_id"
                                          )}`
                                        );
                                        return console.log(
                                          `filter_service_name: ${localStorage.getItem(
                                            "filter_service_name"
                                          )}`
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["consoleLog"] != null &&
                              typeof $steps["consoleLog"] === "object" &&
                              typeof $steps["consoleLog"].then === "function"
                            ) {
                              $steps["consoleLog"] = await $steps["consoleLog"];
                            }

                            $steps["updateModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modalServices", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalOpen"] != null &&
                              typeof $steps["updateModalOpen"] === "object" &&
                              typeof $steps["updateModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalOpen"] = await $steps[
                                "updateModalOpen"
                              ];
                            }

                            $steps["runActionOnPatients"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "patients",
                                    action: "reload"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnPatients"] != null &&
                              typeof $steps["runActionOnPatients"] ===
                                "object" &&
                              typeof $steps["runActionOnPatients"].then ===
                                "function"
                            ) {
                              $steps["runActionOnPatients"] = await $steps[
                                "runActionOnPatients"
                              ];
                            }
                          }}
                        >
                          <React.Fragment>{currentItem.name}</React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          </AntdModal>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  homepage: [
    "homepage",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "pageContent",
    "modalRemoveBookmarks",
    "deletecancel",
    "cancelButton",
    "deleteAllBookmarks",
    "controlPanel",
    "namespaceTitle",
    "searchSetting",
    "settingIcon",
    "searchbar",
    "tabs",
    "serviceButtonStack",
    "service",
    "bookmarkedButtonStack",
    "bookmarked",
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648",
    "patients",
    "header2",
    "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627",
    "bookmarksSort",
    "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkGuide",
    "bookmarkImage",
    "bookmarkedImage",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u062f",
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData",
    "commentButton",
    "modalServices",
    "services",
    "servicesList",
    "servicesName"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  pageContent: [
    "pageContent",
    "modalRemoveBookmarks",
    "deletecancel",
    "cancelButton",
    "deleteAllBookmarks",
    "controlPanel",
    "namespaceTitle",
    "searchSetting",
    "settingIcon",
    "searchbar",
    "tabs",
    "serviceButtonStack",
    "service",
    "bookmarkedButtonStack",
    "bookmarked",
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648",
    "patients",
    "header2",
    "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627",
    "bookmarksSort",
    "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkGuide",
    "bookmarkImage",
    "bookmarkedImage",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u062f",
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  modalRemoveBookmarks: [
    "modalRemoveBookmarks",
    "deletecancel",
    "cancelButton",
    "deleteAllBookmarks"
  ],
  deletecancel: ["deletecancel", "cancelButton", "deleteAllBookmarks"],
  cancelButton: ["cancelButton"],
  deleteAllBookmarks: ["deleteAllBookmarks"],
  controlPanel: [
    "controlPanel",
    "namespaceTitle",
    "searchSetting",
    "settingIcon",
    "searchbar",
    "tabs",
    "serviceButtonStack",
    "service",
    "bookmarkedButtonStack",
    "bookmarked",
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
  ],
  namespaceTitle: ["namespaceTitle"],
  searchSetting: ["searchSetting", "settingIcon", "searchbar"],
  settingIcon: ["settingIcon"],
  searchbar: ["searchbar"],
  tabs: [
    "tabs",
    "serviceButtonStack",
    "service",
    "bookmarkedButtonStack",
    "bookmarked"
  ],
  serviceButtonStack: ["serviceButtonStack", "service"],
  service: ["service"],
  bookmarkedButtonStack: ["bookmarkedButtonStack", "bookmarked"],
  bookmarked: ["bookmarked"],
  نتايحجستوجو: [
    "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
  ],
  patients: [
    "patients",
    "header2",
    "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627",
    "bookmarksSort",
    "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f",
    "bookmarkGuide",
    "bookmarkImage",
    "bookmarkedImage",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u062f",
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  header2: [
    "header2",
    "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627",
    "bookmarksSort"
  ],
  buttonاردنهمهبومارها: [
    "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627"
  ],
  bookmarksSort: ["bookmarksSort"],
  بمارافتنشد: ["\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f"],
  bookmarkGuide: ["bookmarkGuide", "bookmarkImage", "bookmarkedImage"],
  bookmarkImage: ["bookmarkImage"],
  bookmarkedImage: ["bookmarkedImage"],
  لطفامنتظربماند: [
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u062f"
  ],
  patientCards: [
    "patientCards",
    "patientNameBookmarkIcon",
    "dismision",
    "firstLastName",
    "bookmarkIcon",
    "wardRoom",
    "roomBed",
    "ward",
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  patientNameBookmarkIcon: [
    "patientNameBookmarkIcon",
    "dismision",
    "firstLastName",
    "bookmarkIcon"
  ],
  dismision: ["dismision"],
  firstLastName: ["firstLastName"],
  bookmarkIcon: ["bookmarkIcon"],
  wardRoom: ["wardRoom", "roomBed", "ward"],
  roomBed: ["roomBed"],
  ward: ["ward"],
  patientDataButtons: [
    "patientDataButtons",
    "patientProfile",
    "radiologyReport",
    "laboratoryData"
  ],
  patientProfile: ["patientProfile"],
  radiologyReport: ["radiologyReport"],
  laboratoryData: ["laboratoryData"],
  commentButton: ["commentButton"],
  modalServices: ["modalServices", "services", "servicesList", "servicesName"],
  services: ["services", "servicesList", "servicesName"],
  servicesList: ["servicesList", "servicesName"],
  servicesName: ["servicesName"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  homepage: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  pageContent: "div";
  modalRemoveBookmarks: typeof AntdModal;
  deletecancel: "div";
  cancelButton: typeof Button;
  deleteAllBookmarks: typeof Button;
  controlPanel: "div";
  namespaceTitle: "div";
  searchSetting: "div";
  settingIcon: "svg";
  searchbar: typeof TextInput;
  tabs: "div";
  serviceButtonStack: "div";
  service: typeof Button;
  bookmarkedButtonStack: "div";
  bookmarked: typeof Button;
  نتايحجستوجو: "div";
  patients: typeof ApiFetcherComponent;
  header2: "div";
  buttonاردنهمهبومارها: typeof Button;
  bookmarksSort: typeof Button;
  بمارافتنشد: "div";
  bookmarkGuide: "div";
  bookmarkImage: "svg";
  bookmarkedImage: "svg";
  لطفامنتظربماند: "div";
  patientCards: "div";
  patientNameBookmarkIcon: "div";
  dismision: "div";
  firstLastName: "div";
  bookmarkIcon: typeof BookmarkIcon;
  wardRoom: "div";
  roomBed: "div";
  ward: "div";
  patientDataButtons: "div";
  patientProfile: typeof PlasmicImg__;
  radiologyReport: typeof PlasmicImg__;
  laboratoryData: typeof PlasmicImg__;
  commentButton: typeof Button;
  modalServices: typeof AntdModal;
  services: typeof ApiFetcherComponent;
  servicesList: "div";
  servicesName: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homepage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("homepage"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    pageContent: makeNodeComponent("pageContent"),
    modalRemoveBookmarks: makeNodeComponent("modalRemoveBookmarks"),
    deletecancel: makeNodeComponent("deletecancel"),
    cancelButton: makeNodeComponent("cancelButton"),
    deleteAllBookmarks: makeNodeComponent("deleteAllBookmarks"),
    controlPanel: makeNodeComponent("controlPanel"),
    namespaceTitle: makeNodeComponent("namespaceTitle"),
    searchSetting: makeNodeComponent("searchSetting"),
    settingIcon: makeNodeComponent("settingIcon"),
    searchbar: makeNodeComponent("searchbar"),
    tabs: makeNodeComponent("tabs"),
    serviceButtonStack: makeNodeComponent("serviceButtonStack"),
    service: makeNodeComponent("service"),
    bookmarkedButtonStack: makeNodeComponent("bookmarkedButtonStack"),
    bookmarked: makeNodeComponent("bookmarked"),
    نتايحجستوجو: makeNodeComponent(
      "\u0646\u062a\u0627\u064a\u062d\u062c\u0633\u062a\u0648\u062c\u0648"
    ),
    patients: makeNodeComponent("patients"),
    header2: makeNodeComponent("header2"),
    buttonاردنهمهبومارها: makeNodeComponent(
      "button\u0627\u0631\u062f\u0646\u0647\u0645\u0647\u0628\u0648\u0645\u0627\u0631\u0647\u0627"
    ),
    bookmarksSort: makeNodeComponent("bookmarksSort"),
    بمارافتنشد: makeNodeComponent(
      "\u0628\u0645\u0627\u0631\u0627\u0641\u062a\u0646\u0634\u062f"
    ),
    bookmarkGuide: makeNodeComponent("bookmarkGuide"),
    bookmarkImage: makeNodeComponent("bookmarkImage"),
    bookmarkedImage: makeNodeComponent("bookmarkedImage"),
    لطفامنتظربماند: makeNodeComponent(
      "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0638\u0631\u0628\u0645\u0627\u0646\u062f"
    ),
    patientCards: makeNodeComponent("patientCards"),
    patientNameBookmarkIcon: makeNodeComponent("patientNameBookmarkIcon"),
    dismision: makeNodeComponent("dismision"),
    firstLastName: makeNodeComponent("firstLastName"),
    bookmarkIcon: makeNodeComponent("bookmarkIcon"),
    wardRoom: makeNodeComponent("wardRoom"),
    roomBed: makeNodeComponent("roomBed"),
    ward: makeNodeComponent("ward"),
    patientDataButtons: makeNodeComponent("patientDataButtons"),
    patientProfile: makeNodeComponent("patientProfile"),
    radiologyReport: makeNodeComponent("radiologyReport"),
    laboratoryData: makeNodeComponent("laboratoryData"),
    commentButton: makeNodeComponent("commentButton"),
    modalServices: makeNodeComponent("modalServices"),
    services: makeNodeComponent("services"),
    servicesList: makeNodeComponent("servicesList"),
    servicesName: makeNodeComponent("servicesName"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
