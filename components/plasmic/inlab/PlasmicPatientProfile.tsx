// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: Ev8txsbuZl9W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component
import RedirectToLoginPage from "../../RedirectToLoginPage"; // plasmic-import: 0wFpBWYaqpsM/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: aXAcva2etiX1/component
import OnloadUserPatientInteractionCount from "../../OnloadUserPatientInteractionCount"; // plasmic-import: 6oEGl3M40QrL/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicPatientProfile.module.css"; // plasmic-import: Ev8txsbuZl9W/css

createPlasmicElementProxy;

export type PlasmicPatientProfile__VariantMembers = {};
export type PlasmicPatientProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicPatientProfile__VariantsArgs;
export const PlasmicPatientProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicPatientProfile__ArgsType = {};
type ArgPropType = keyof PlasmicPatientProfile__ArgsType;
export const PlasmicPatientProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicPatientProfile__OverridesType = {
  patientProfile2?: Flex__<"div">;
  header?: Flex__<"div">;
  patientProfile?: Flex__<typeof ApiFetcherComponent>;
  patientData?: Flex__<"div">;
  patientProfileBox?: Flex__<"div">;
  nationalIdadmissionTimeNopacs?: Flex__<"div">;
  nationalId?: Flex__<"div">;
  admissionDate?: Flex__<"div">;
  patientNo?: Flex__<"div">;
  pacsNumber?: Flex__<"div">;
  nameservicewardbed?: Flex__<"div">;
  patientName?: Flex__<"div">;
  patientService?: Flex__<"div">;
  patientWard?: Flex__<"div">;
  patientRoomBed?: Flex__<"div">;
  patientStatus?: Flex__<"div">;
  admitdischarge?: Flex__<"div">;
  discharge?: Flex__<"div">;
  discharge2?: Flex__<"div">;
  admit?: Flex__<"div">;
  admit2?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  redirectToLoginPage?: Flex__<typeof RedirectToLoginPage>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  onloadUserPatientInteractionCount?: Flex__<
    typeof OnloadUserPatientInteractionCount
  >;
};

export interface DefaultPatientProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPatientProfile__RenderFunc(props: {
  variants: PlasmicPatientProfile__VariantsArgs;
  args: PlasmicPatientProfile__ArgsType;
  overrides: PlasmicPatientProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"patientProfile2"}
          data-plasmic-override={overrides.patientProfile2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.patientProfile2
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jAw6U
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 "
              }
            </div>
          </div>
          <ApiFetcherComponent
            data-plasmic-name={"patientProfile"}
            data-plasmic-override={overrides.patientProfile}
            className={classNames("__wab_instance", sty.patientProfile)}
            delay={0}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v2/patient/${$ctx.params.code}`}
            ref={ref => {
              $refs["patientProfile"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {$ctx.fetched_data.loading == true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Uzzq
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $ctx.fetched_data.loading == false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"patientData"}
                      data-plasmic-override={overrides.patientData}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.patientData)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"patientProfileBox"}
                        data-plasmic-override={overrides.patientProfileBox}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.patientProfileBox
                        )}
                      >
                        <div
                          data-plasmic-name={"nationalIdadmissionTimeNopacs"}
                          data-plasmic-override={
                            overrides.nationalIdadmissionTimeNopacs
                          }
                          className={classNames(
                            projectcss.all,
                            sty.nationalIdadmissionTimeNopacs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aZwd
                            )}
                          >
                            {"National ID"}
                          </div>
                          <div
                            data-plasmic-name={"nationalId"}
                            data-plasmic-override={overrides.nationalId}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.nationalId
                            )}
                          >
                            <React.Fragment>
                              {$ctx.fetched_data.loading == false &&
                                $ctx.fetched_data.data.national_id}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3OiCc
                            )}
                          >
                            {"Admission "}
                          </div>
                          <div
                            data-plasmic-name={"admissionDate"}
                            data-plasmic-override={overrides.admissionDate}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.admissionDate
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                const gregorianDate = new Date(
                                  $ctx.fetched_data.data.admission_datetime
                                );
                                const shamsiDate = new Intl.DateTimeFormat(
                                  "fa-IR"
                                ).format(gregorianDate);
                                const shamsiTime =
                                  gregorianDate.toLocaleTimeString("fa-IR", {
                                    hour12: false
                                  });
                                const englishDate = shamsiDate.replace(
                                  /[۰-۹]/g,
                                  d =>
                                    String.fromCharCode(d.charCodeAt(0) - 1728)
                                );
                                const englishTime = shamsiTime.replace(
                                  /[۰-۹]/g,
                                  d =>
                                    String.fromCharCode(d.charCodeAt(0) - 1728)
                                );
                                return `${englishDate}`;
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___17Gib
                            )}
                          >
                            {"No"}
                          </div>
                          <div
                            data-plasmic-name={"patientNo"}
                            data-plasmic-override={overrides.patientNo}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.patientNo
                            )}
                          >
                            <React.Fragment>
                              {$ctx.fetched_data.data.profile_id}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4ElHr
                            )}
                          >
                            {"PACS"}
                          </div>
                          <div
                            data-plasmic-name={"pacsNumber"}
                            data-plasmic-override={overrides.pacsNumber}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.pacsNumber
                            )}
                          >
                            <React.Fragment>
                              {$ctx.fetched_data.data.admission_id}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"nameservicewardbed"}
                          data-plasmic-override={overrides.nameservicewardbed}
                          className={classNames(
                            projectcss.all,
                            sty.nameservicewardbed
                          )}
                        >
                          <div
                            data-plasmic-name={"patientName"}
                            data-plasmic-override={overrides.patientName}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.patientName
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                const dob = new Date(
                                  $ctx.fetched_data.data.dob
                                );
                                const ageDiffMs = Date.now() - dob.getTime();
                                const ageDate = new Date(ageDiffMs);
                                const ageYears = Math.abs(
                                  ageDate.getUTCFullYear() - 1970
                                );
                                const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                                if (ageYears < 1) {
                                  const ageMonths = ageDate.getUTCMonth();
                                  return `${fullName} 
${ageMonths} months ${
                                    $ctx.fetched_data.data.gender === "F"
                                      ? " ♀️"
                                      : $ctx.fetched_data.data.gender === "M"
                                      ? " ♂️"
                                      : ""
                                  }`;
                                } else {
                                  return `${fullName} ${ageYears} ${
                                    $ctx.fetched_data.data.gender === "F"
                                      ? " ♀️"
                                      : $ctx.fetched_data.data.gender === "M"
                                      ? " ♂️"
                                      : ""
                                  }`;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qdLuE
                            )}
                          >
                            {"service "}
                          </div>
                          <div
                            data-plasmic-name={"patientService"}
                            data-plasmic-override={overrides.patientService}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.patientService
                            )}
                          >
                            <React.Fragment>
                              {$ctx.fetched_data.data.primary_service.name}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gsJjX
                            )}
                          >
                            {"Ward"}
                          </div>
                          <div
                            data-plasmic-name={"patientWard"}
                            data-plasmic-override={overrides.patientWard}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.patientWard
                            )}
                          >
                            <React.Fragment>
                              {$ctx.fetched_data.data.ward.name}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qdn2
                            )}
                          >
                            {"Bed"}
                          </div>
                          <div
                            data-plasmic-name={"patientRoomBed"}
                            data-plasmic-override={overrides.patientRoomBed}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.patientRoomBed
                            )}
                          >
                            <React.Fragment>
                              {$ctx.fetched_data.data.room +
                                " - " +
                                $ctx.fetched_data.data.bed}
                            </React.Fragment>
                          </div>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"patientStatus"}
                        data-plasmic-override={overrides.patientStatus}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.patientStatus
                        )}
                      >
                        <div
                          data-plasmic-name={"admitdischarge"}
                          data-plasmic-override={overrides.admitdischarge}
                          className={classNames(
                            projectcss.all,
                            sty.admitdischarge
                          )}
                        >
                          {$ctx.fetched_data.loading == false &&
                          $ctx.fetched_data.data.dismissed == 1 ? (
                            <div
                              data-plasmic-name={"discharge"}
                              data-plasmic-override={overrides.discharge}
                              className={classNames(
                                projectcss.all,
                                sty.discharge
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tCi9D
                                )}
                              >
                                {
                                  "\u062a\u0631\u062e\u06cc\u0635 \u0634\u062f\u0647"
                                }
                              </div>
                            </div>
                          ) : null}
                          {$ctx.fetched_data.loading == false &&
                          $ctx.fetched_data.data.dismissed == 0 ? (
                            <div
                              data-plasmic-name={"discharge2"}
                              data-plasmic-override={overrides.discharge2}
                              className={classNames(
                                projectcss.all,
                                sty.discharge2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__foZTi
                                )}
                              >
                                {
                                  "\u062a\u0631\u062e\u06cc\u0635 \u0634\u062f\u0647"
                                }
                              </div>
                            </div>
                          ) : null}
                          {$ctx.fetched_data.loading == false &&
                          $ctx.fetched_data.data.dismissed == 0 ? (
                            <div
                              data-plasmic-name={"admit"}
                              data-plasmic-override={overrides.admit}
                              className={classNames(projectcss.all, sty.admit)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hw02R
                                )}
                              >
                                {"\u0628\u0633\u062a\u0631\u06cc"}
                              </div>
                            </div>
                          ) : null}
                          {$ctx.fetched_data.loading == false &&
                          $ctx.fetched_data.data.dismissed == 1 ? (
                            <div
                              data-plasmic-name={"admit2"}
                              data-plasmic-override={overrides.admit2}
                              className={classNames(projectcss.all, sty.admit2)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pvsww
                                )}
                              >
                                {"\u0628\u0633\u062a\u0631\u06cc"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yCzGp
                          )}
                        >
                          {
                            "\u0648\u0636\u0639\u06cc\u062a \u0628\u06cc\u0645\u0627\u0631"
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                  ) : null}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
          <div
            data-plasmic-name={"switchingTabs"}
            data-plasmic-override={overrides.switchingTabs}
            className={classNames(projectcss.all, sty.switchingTabs)}
          >
            <SwitchingTab
              data-plasmic-name={"switchingTab"}
              data-plasmic-override={overrides.switchingTab}
              className={classNames("__wab_instance", sty.switchingTab)}
            />
          </div>
          <RedirectToLoginPage
            data-plasmic-name={"redirectToLoginPage"}
            data-plasmic-override={overrides.redirectToLoginPage}
            className={classNames("__wab_instance", sty.redirectToLoginPage)}
          />

          <RedirectToNamespaceSelection
            data-plasmic-name={"redirectToNamespaceSelection"}
            data-plasmic-override={overrides.redirectToNamespaceSelection}
            className={classNames(
              "__wab_instance",
              sty.redirectToNamespaceSelection
            )}
          />

          <OnloadUserPatientInteractionCount
            data-plasmic-name={"onloadUserPatientInteractionCount"}
            data-plasmic-override={overrides.onloadUserPatientInteractionCount}
            className={classNames(
              "__wab_instance",
              sty.onloadUserPatientInteractionCount
            )}
            patientIdForOnloadUserPatientInteractionCount={(() => {
              try {
                return $ctx.params.code;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  patientProfile2: [
    "patientProfile2",
    "header",
    "patientProfile",
    "patientData",
    "patientProfileBox",
    "nationalIdadmissionTimeNopacs",
    "nationalId",
    "admissionDate",
    "patientNo",
    "pacsNumber",
    "nameservicewardbed",
    "patientName",
    "patientService",
    "patientWard",
    "patientRoomBed",
    "patientStatus",
    "admitdischarge",
    "discharge",
    "discharge2",
    "admit",
    "admit2",
    "switchingTabs",
    "switchingTab",
    "redirectToLoginPage",
    "redirectToNamespaceSelection",
    "onloadUserPatientInteractionCount"
  ],
  header: ["header"],
  patientProfile: [
    "patientProfile",
    "patientData",
    "patientProfileBox",
    "nationalIdadmissionTimeNopacs",
    "nationalId",
    "admissionDate",
    "patientNo",
    "pacsNumber",
    "nameservicewardbed",
    "patientName",
    "patientService",
    "patientWard",
    "patientRoomBed",
    "patientStatus",
    "admitdischarge",
    "discharge",
    "discharge2",
    "admit",
    "admit2"
  ],
  patientData: [
    "patientData",
    "patientProfileBox",
    "nationalIdadmissionTimeNopacs",
    "nationalId",
    "admissionDate",
    "patientNo",
    "pacsNumber",
    "nameservicewardbed",
    "patientName",
    "patientService",
    "patientWard",
    "patientRoomBed",
    "patientStatus",
    "admitdischarge",
    "discharge",
    "discharge2",
    "admit",
    "admit2"
  ],
  patientProfileBox: [
    "patientProfileBox",
    "nationalIdadmissionTimeNopacs",
    "nationalId",
    "admissionDate",
    "patientNo",
    "pacsNumber",
    "nameservicewardbed",
    "patientName",
    "patientService",
    "patientWard",
    "patientRoomBed"
  ],
  nationalIdadmissionTimeNopacs: [
    "nationalIdadmissionTimeNopacs",
    "nationalId",
    "admissionDate",
    "patientNo",
    "pacsNumber"
  ],
  nationalId: ["nationalId"],
  admissionDate: ["admissionDate"],
  patientNo: ["patientNo"],
  pacsNumber: ["pacsNumber"],
  nameservicewardbed: [
    "nameservicewardbed",
    "patientName",
    "patientService",
    "patientWard",
    "patientRoomBed"
  ],
  patientName: ["patientName"],
  patientService: ["patientService"],
  patientWard: ["patientWard"],
  patientRoomBed: ["patientRoomBed"],
  patientStatus: [
    "patientStatus",
    "admitdischarge",
    "discharge",
    "discharge2",
    "admit",
    "admit2"
  ],
  admitdischarge: [
    "admitdischarge",
    "discharge",
    "discharge2",
    "admit",
    "admit2"
  ],
  discharge: ["discharge"],
  discharge2: ["discharge2"],
  admit: ["admit"],
  admit2: ["admit2"],
  switchingTabs: ["switchingTabs", "switchingTab"],
  switchingTab: ["switchingTab"],
  redirectToLoginPage: ["redirectToLoginPage"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  onloadUserPatientInteractionCount: ["onloadUserPatientInteractionCount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  patientProfile2: "div";
  header: "div";
  patientProfile: typeof ApiFetcherComponent;
  patientData: "div";
  patientProfileBox: "div";
  nationalIdadmissionTimeNopacs: "div";
  nationalId: "div";
  admissionDate: "div";
  patientNo: "div";
  pacsNumber: "div";
  nameservicewardbed: "div";
  patientName: "div";
  patientService: "div";
  patientWard: "div";
  patientRoomBed: "div";
  patientStatus: "div";
  admitdischarge: "div";
  discharge: "div";
  discharge2: "div";
  admit: "div";
  admit2: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  redirectToLoginPage: typeof RedirectToLoginPage;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  onloadUserPatientInteractionCount: typeof OnloadUserPatientInteractionCount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPatientProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPatientProfile__VariantsArgs;
    args?: PlasmicPatientProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPatientProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPatientProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPatientProfile__ArgProps,
          internalVariantPropNames: PlasmicPatientProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPatientProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "patientProfile2") {
    func.displayName = "PlasmicPatientProfile";
  } else {
    func.displayName = `PlasmicPatientProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicPatientProfile = Object.assign(
  // Top-level PlasmicPatientProfile renders the root element
  makeNodeComponent("patientProfile2"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    patientProfile: makeNodeComponent("patientProfile"),
    patientData: makeNodeComponent("patientData"),
    patientProfileBox: makeNodeComponent("patientProfileBox"),
    nationalIdadmissionTimeNopacs: makeNodeComponent(
      "nationalIdadmissionTimeNopacs"
    ),
    nationalId: makeNodeComponent("nationalId"),
    admissionDate: makeNodeComponent("admissionDate"),
    patientNo: makeNodeComponent("patientNo"),
    pacsNumber: makeNodeComponent("pacsNumber"),
    nameservicewardbed: makeNodeComponent("nameservicewardbed"),
    patientName: makeNodeComponent("patientName"),
    patientService: makeNodeComponent("patientService"),
    patientWard: makeNodeComponent("patientWard"),
    patientRoomBed: makeNodeComponent("patientRoomBed"),
    patientStatus: makeNodeComponent("patientStatus"),
    admitdischarge: makeNodeComponent("admitdischarge"),
    discharge: makeNodeComponent("discharge"),
    discharge2: makeNodeComponent("discharge2"),
    admit: makeNodeComponent("admit"),
    admit2: makeNodeComponent("admit2"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    redirectToLoginPage: makeNodeComponent("redirectToLoginPage"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    onloadUserPatientInteractionCount: makeNodeComponent(
      "onloadUserPatientInteractionCount"
    ),

    // Metadata about props expected for PlasmicPatientProfile
    internalVariantProps: PlasmicPatientProfile__VariantProps,
    internalArgProps: PlasmicPatientProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPatientProfile;
/* prettier-ignore-end */
