// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: 9PPRcrm0XFqF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import Alert from "../../Alert"; // plasmic-import: RABqkXkLRlle/component
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicConsultSend.module.css"; // plasmic-import: 9PPRcrm0XFqF/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: qdjybZJw3tm3/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: YIqBWKHX3AVs/icon
import Icons8CloseSvgIcon from "./icons/PlasmicIcon__Icons8CloseSvg"; // plasmic-import: -xG_spDBispP/icon

createPlasmicElementProxy;

export type PlasmicConsultSend__VariantMembers = {
  emergentConsult: "emergentConsult";
};
export type PlasmicConsultSend__VariantsArgs = {
  emergentConsult?: SingleBooleanChoiceArg<"emergentConsult">;
};
type VariantPropType = keyof PlasmicConsultSend__VariantsArgs;
export const PlasmicConsultSend__VariantProps = new Array<VariantPropType>(
  "emergentConsult"
);

export type PlasmicConsultSend__ArgsType = {};
type ArgPropType = keyof PlasmicConsultSend__ArgsType;
export const PlasmicConsultSend__ArgProps = new Array<ArgPropType>();

export type PlasmicConsultSend__OverridesType = {
  consultSend?: Flex__<"div">;
  header?: Flex__<"div">;
  patientDataForHeader?: Flex__<typeof ApiFetcherComponent>;
  freeBox?: Flex__<"div">;
  patientNameAgeGender?: Flex__<"div">;
  patientService?: Flex__<"div">;
  sendConsult?: Flex__<"div">;
  sendConsultButtonContent?: Flex__<"div">;
  sendConsultSuccessfully?: Flex__<typeof Alert>;
  sendConsultUnsuccessfully2?: Flex__<typeof Alert>;
  senderService?: Flex__<"div">;
  selectedSenderService?: Flex__<"div">;
  receiverService?: Flex__<"div">;
  selectedReceiverService?: Flex__<"div">;
  receiverDoctor?: Flex__<"div">;
  selectedReceiverDoctor?: Flex__<"div">;
  consultEmergencyStatusButton?: Flex__<typeof Button>;
  consultEmergencyStatus3?: Flex__<"div">;
  normalRangeButtonCircle2?: Flex__<"div">;
  emergentOff?: Flex__<"div">;
  emergentOn?: Flex__<"div">;
  sendConsultButton?: Flex__<typeof Button>;
  sendConsult2?: Flex__<"div">;
  switchingTab?: Flex__<"div">;
  homepage?: Flex__<typeof PlasmicImg__>;
  consultList?: Flex__<typeof PlasmicImg__>;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  imagingReportList?: Flex__<typeof PlasmicImg__>;
  laboratoryData?: Flex__<typeof PlasmicImg__>;
  getServices?: Flex__<typeof ApiFetcherComponent>;
  modalSenderService?: Flex__<typeof AntdModal>;
  senderServicesList?: Flex__<"div">;
  servicesName?: Flex__<"div">;
  modalReceiverService?: Flex__<typeof AntdModal>;
  receiverServicesList?: Flex__<"div">;
  servicesName2?: Flex__<"div">;
  getUsers?: Flex__<typeof ApiFetcherComponent>;
  modalReceiverDoctor?: Flex__<typeof AntdModal>;
  receiverDoctorList?: Flex__<"div">;
  doctorNameInputContent?: Flex__<"div">;
  doctorNameInput?: Flex__<typeof TextInput>;
  clearContent?: Flex__<"svg">;
  doctorNames?: Flex__<"div">;
};

export interface DefaultConsultSendProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConsultSend__RenderFunc(props: {
  variants: PlasmicConsultSend__VariantsArgs;
  args: PlasmicConsultSend__ArgsType;
  overrides: PlasmicConsultSend__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sendConsultButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sendConsultButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sendConsultButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sendConsultButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sendConsultButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalSenderService.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalReceiverService.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalReceiverDoctor.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "doctorNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sendConsultSuccessfullyAlert",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sendConsultUnsuccessfullyAlert",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "receiverDoctorId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "receiverDoctorName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-"
      },
      {
        path: "emergentConsult",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.emergentConsult
      },
      {
        path: "emergencyButtonStatusState",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "consultEmergencyStatusButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultEmergencyStatusButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultEmergencyStatusButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultEmergencyStatusButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultEmergencyStatusButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultEmergencyStatusState",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 3
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"consultSend"}
          data-plasmic-override={overrides.consultSend}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.consultSend,
            {
              [sty.consultSendemergentConsult]: hasVariant(
                $state,
                "emergentConsult",
                "emergentConsult"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <ApiFetcherComponent
              data-plasmic-name={"patientDataForHeader"}
              data-plasmic-override={overrides.patientDataForHeader}
              className={classNames("__wab_instance", sty.patientDataForHeader)}
              headers={(() => {
                try {
                  return {
                    "X-Namespace": localStorage.getItem(
                      "inlab_user_namespace_id"
                    )
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              method={"GET"}
              path={`/api/v2/patient/${$ctx.params.code}`}
              ref={ref => {
                $refs["patientDataForHeader"] = ref;
              }}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <div
                      data-plasmic-name={"patientNameAgeGender"}
                      data-plasmic-override={overrides.patientNameAgeGender}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.patientNameAgeGender
                      )}
                      dir={"rtl"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $ctx.fetched_data.loading == false &&
                              (() => {
                                const dob = new Date(
                                  $ctx.fetched_data.data.dob
                                );
                                const ageDiffMs = Date.now() - dob.getTime();
                                const ageDate = new Date(ageDiffMs);
                                const ageYears = Math.abs(
                                  ageDate.getUTCFullYear() - 1970
                                );
                                const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                                const patientService =
                                  $ctx.fetched_data.data.primary_service.name;
                                if (ageYears < 1) {
                                  const ageMonths = ageDate.getUTCMonth();
                                  return `${fullName} 
${ageMonths} months ${
                                    $ctx.fetched_data.data.gender === "F"
                                      ? " ♀️"
                                      : $ctx.fetched_data.data.gender === "M"
                                      ? " ♂️"
                                      : ""
                                  }`;
                                } else {
                                  return `${fullName} ${ageYears}${
                                    $ctx.fetched_data.data.gender === "F"
                                      ? " ♀️"
                                      : $ctx.fetched_data.data.gender === "M"
                                      ? " ♂️"
                                      : ""
                                  } `;
                                }
                              })()
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      data-plasmic-name={"patientService"}
                      data-plasmic-override={overrides.patientService}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.patientService
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "سرویس" +
                              " " +
                              $ctx.fetched_data.data.primary_service.name
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"sendConsult"}
            data-plasmic-override={overrides.sendConsult}
            hasGap={true}
            className={classNames(projectcss.all, sty.sendConsult)}
          >
            <div
              data-plasmic-name={"sendConsultButtonContent"}
              data-plasmic-override={overrides.sendConsultButtonContent}
              className={classNames(
                projectcss.all,
                sty.sendConsultButtonContent
              )}
            >
              {(() => {
                try {
                  return $state.sendConsultSuccessfullyAlert;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Alert
                  data-plasmic-name={"sendConsultSuccessfully"}
                  data-plasmic-override={overrides.sendConsultSuccessfully}
                  body={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1PXi9
                      )}
                    >
                      {
                        "\u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f"
                      }
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.sendConsultSuccessfully
                  )}
                  noHeader={true}
                  noIcon={true}
                  success={true}
                />
              ) : null}
              {(() => {
                try {
                  return $state.sendConsultUnsuccessfullyAlert;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Alert
                  data-plasmic-name={"sendConsultUnsuccessfully2"}
                  data-plasmic-override={overrides.sendConsultUnsuccessfully2}
                  body={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rqJCi
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f"
                      }
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.sendConsultUnsuccessfully2
                  )}
                  error={true}
                  noHeader={true}
                  noIcon={true}
                />
              ) : null}
            </div>
            <div
              data-plasmic-name={"senderService"}
              data-plasmic-override={overrides.senderService}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.senderService
              )}
              dir={"rtl"}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalSenderServiceOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalSenderService", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalSenderServiceOpen"] != null &&
                  typeof $steps["updateModalSenderServiceOpen"] === "object" &&
                  typeof $steps["updateModalSenderServiceOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalSenderServiceOpen"] = await $steps[
                    "updateModalSenderServiceOpen"
                  ];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "سرویس مبدا" + " " + "*";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0633\u0631\u0648\u06cc\u0633 \u0645\u0628\u062f\u0627";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"selectedSenderService"}
              data-plasmic-override={overrides.selectedSenderService}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.selectedSenderService
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalSenderServiceOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalSenderService", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalSenderServiceOpen"] != null &&
                  typeof $steps["updateModalSenderServiceOpen"] === "object" &&
                  typeof $steps["updateModalSenderServiceOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalSenderServiceOpen"] = await $steps[
                    "updateModalSenderServiceOpen"
                  ];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return localStorage.getItem("sender_service_name");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"receiverService"}
              data-plasmic-override={overrides.receiverService}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.receiverService
              )}
              dir={"rtl"}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalReceiverServiceOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalReceiverService", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalReceiverServiceOpen"] != null &&
                  typeof $steps["updateModalReceiverServiceOpen"] ===
                    "object" &&
                  typeof $steps["updateModalReceiverServiceOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalReceiverServiceOpen"] = await $steps[
                    "updateModalReceiverServiceOpen"
                  ];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "سرویس مقصد" + " " + "*";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"selectedReceiverService"}
              data-plasmic-override={overrides.selectedReceiverService}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.selectedReceiverService
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalReceiverServiceOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalReceiverService", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalReceiverServiceOpen"] != null &&
                  typeof $steps["updateModalReceiverServiceOpen"] ===
                    "object" &&
                  typeof $steps["updateModalReceiverServiceOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalReceiverServiceOpen"] = await $steps[
                    "updateModalReceiverServiceOpen"
                  ];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return localStorage.getItem("receiver_service_name");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"receiverDoctor"}
              data-plasmic-override={overrides.receiverDoctor}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.receiverDoctor
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalReceiverDoctorOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalReceiverDoctor", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalReceiverDoctorOpen"] != null &&
                  typeof $steps["updateModalReceiverDoctorOpen"] === "object" &&
                  typeof $steps["updateModalReceiverDoctorOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalReceiverDoctorOpen"] = await $steps[
                    "updateModalReceiverDoctorOpen"
                  ];
                }
              }}
            >
              {"\u067e\u0632\u0634\u06a9 \u0645\u0642\u0635\u062f"}
            </div>
            <div
              data-plasmic-name={"selectedReceiverDoctor"}
              data-plasmic-override={overrides.selectedReceiverDoctor}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.selectedReceiverDoctor
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalReceiverDoctorOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalReceiverDoctor", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalReceiverDoctorOpen"] != null &&
                  typeof $steps["updateModalReceiverDoctorOpen"] === "object" &&
                  typeof $steps["updateModalReceiverDoctorOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalReceiverDoctorOpen"] = await $steps[
                    "updateModalReceiverDoctorOpen"
                  ];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.receiverDoctorName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Button
              data-plasmic-name={"consultEmergencyStatusButton"}
              data-plasmic-override={overrides.consultEmergencyStatusButton}
              className={classNames(
                "__wab_instance",
                sty.consultEmergencyStatusButton
              )}
              deselected={generateStateValueProp($state, [
                "consultEmergencyStatusButton",
                "deselected"
              ])}
              hoverDeselected={(() => {
                try {
                  return !$state.emergencyButtonStatusState;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "hoverDeselected";
                  }
                  throw e;
                }
              })()}
              hoverSelected={(() => {
                try {
                  return $state.emergencyButtonStatusState;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "hoverSelected";
                  }
                  throw e;
                }
              })()}
              isDisabled={generateStateValueProp($state, [
                "consultEmergencyStatusButton",
                "isDisabled"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["updateEmergencyButtonStatusState"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["emergencyButtonStatusState"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEmergencyButtonStatusState"] != null &&
                  typeof $steps["updateEmergencyButtonStatusState"] ===
                    "object" &&
                  typeof $steps["updateEmergencyButtonStatusState"].then ===
                    "function"
                ) {
                  $steps["updateEmergencyButtonStatusState"] = await $steps[
                    "updateEmergencyButtonStatusState"
                  ];
                }

                $steps["updateConsultEmergencyStatusState"] =
                  !$state.emergencyButtonStatusState
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["consultEmergencyStatusState"]
                          },
                          operation: 0,
                          value: 3
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateConsultEmergencyStatusState"] != null &&
                  typeof $steps["updateConsultEmergencyStatusState"] ===
                    "object" &&
                  typeof $steps["updateConsultEmergencyStatusState"].then ===
                    "function"
                ) {
                  $steps["updateConsultEmergencyStatusState"] = await $steps[
                    "updateConsultEmergencyStatusState"
                  ];
                }

                $steps["updateConsultEmergencyStatusState2"] =
                  $state.emergencyButtonStatusState
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["consultEmergencyStatusState"]
                          },
                          operation: 0,
                          value: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateConsultEmergencyStatusState2"] != null &&
                  typeof $steps["updateConsultEmergencyStatusState2"] ===
                    "object" &&
                  typeof $steps["updateConsultEmergencyStatusState2"].then ===
                    "function"
                ) {
                  $steps["updateConsultEmergencyStatusState2"] = await $steps[
                    "updateConsultEmergencyStatusState2"
                  ];
                }

                $steps["consoleLogConsultEmergencyStatusState"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return console.log(
                            "consult_emergency_status_state:",
                            $state.consultEmergencyStatusState
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["consoleLogConsultEmergencyStatusState"] != null &&
                  typeof $steps["consoleLogConsultEmergencyStatusState"] ===
                    "object" &&
                  typeof $steps["consoleLogConsultEmergencyStatusState"]
                    .then === "function"
                ) {
                  $steps["consoleLogConsultEmergencyStatusState"] =
                    await $steps["consoleLogConsultEmergencyStatusState"];
                }
              }}
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "consultEmergencyStatusButton",
                  "deselected"
                ])(eventArgs[0]);
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "consultEmergencyStatusButton",
                  "isDisabled"
                ])(eventArgs[0]);
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "consultEmergencyStatusButton",
                  "selected"
                ])(eventArgs[0]);
              }}
              onSortDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "consultEmergencyStatusButton",
                  "sortDeselected"
                ])(eventArgs[0]);
              }}
              onSortSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "consultEmergencyStatusButton",
                  "sortSelected"
                ])(eventArgs[0]);
              }}
              selected={generateStateValueProp($state, [
                "consultEmergencyStatusButton",
                "selected"
              ])}
              shape={"sharp"}
              sortDeselected={generateStateValueProp($state, [
                "consultEmergencyStatusButton",
                "sortDeselected"
              ])}
              sortSelected={generateStateValueProp($state, [
                "consultEmergencyStatusButton",
                "sortSelected"
              ])}
            >
              <div
                data-plasmic-name={"consultEmergencyStatus3"}
                data-plasmic-override={overrides.consultEmergencyStatus3}
                className={classNames(
                  projectcss.all,
                  sty.consultEmergencyStatus3
                )}
              >
                <div
                  data-plasmic-name={"normalRangeButtonCircle2"}
                  data-plasmic-override={overrides.normalRangeButtonCircle2}
                  className={classNames(
                    projectcss.all,
                    sty.normalRangeButtonCircle2,
                    {
                      [sty.normalRangeButtonCircle2emergentConsult]: hasVariant(
                        $state,
                        "emergentConsult",
                        "emergentConsult"
                      )
                    }
                  )}
                />

                {(() => {
                  try {
                    return !$state.emergencyButtonStatusState;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"emergentOff"}
                    data-plasmic-override={overrides.emergentOff}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.emergentOff,
                      {
                        [sty.emergentOffemergentConsult]: hasVariant(
                          $state,
                          "emergentConsult",
                          "emergentConsult"
                        )
                      }
                    )}
                  >
                    {" \u0627\u0648\u0631\u0698\u0627\u0646\u0633\u06cc"}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.emergencyButtonStatusState;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"emergentOn"}
                    data-plasmic-override={overrides.emergentOn}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.emergentOn,
                      {
                        [sty.emergentOnemergentConsult]: hasVariant(
                          $state,
                          "emergentConsult",
                          "emergentConsult"
                        )
                      }
                    )}
                  >
                    {" \u0627\u0648\u0631\u0698\u0627\u0646\u0633\u06cc"}
                  </div>
                ) : null}
              </div>
            </Button>
            <Button
              data-plasmic-name={"sendConsultButton"}
              data-plasmic-override={overrides.sendConsultButton}
              className={classNames("__wab_instance", sty.sendConsultButton)}
              color={"blue"}
              deselected={generateStateValueProp($state, [
                "sendConsultButton",
                "deselected"
              ])}
              isDisabled={generateStateValueProp($state, [
                "sendConsultButton",
                "isDisabled"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["postConsult"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          `/api/v2/patient/${$ctx.params.code}/consult`,
                          (() => {
                            try {
                              return {
                                "X-Namespace": localStorage.getItem(
                                  "inlab_user_namespace_id"
                                )
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return {
                                cause_of_consult: "",
                                consultant_service_id: localStorage.getItem(
                                  "receiver_service_id"
                                ),
                                effective_patient_service_id:
                                  localStorage.getItem("sender_service_id"),
                                illness: "",
                                priority: $state.consultEmergencyStatusState,
                                problem_list: [],
                                suggested_consultant_id: $state.receiverDoctorId
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions[
                        "AuthGlobalContext.apiFetcher"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["postConsult"] != null &&
                  typeof $steps["postConsult"] === "object" &&
                  typeof $steps["postConsult"].then === "function"
                ) {
                  $steps["postConsult"] = await $steps["postConsult"];
                }

                $steps["makeTrueSendConsultSuccessfullyAlert"] =
                  $steps.postConsult?.status === 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["sendConsultSuccessfullyAlert"]
                          },
                          operation: 0,
                          value: "True"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["makeTrueSendConsultSuccessfullyAlert"] != null &&
                  typeof $steps["makeTrueSendConsultSuccessfullyAlert"] ===
                    "object" &&
                  typeof $steps["makeTrueSendConsultSuccessfullyAlert"].then ===
                    "function"
                ) {
                  $steps["makeTrueSendConsultSuccessfullyAlert"] = await $steps[
                    "makeTrueSendConsultSuccessfullyAlert"
                  ];
                }

                $steps["makeTrueSendConsultUnsuccessfullyAlert"] =
                  $steps.postConsult?.status != 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["sendConsultUnsuccessfullyAlert"]
                          },
                          operation: 0,
                          value: "True"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["makeTrueSendConsultUnsuccessfullyAlert"] != null &&
                  typeof $steps["makeTrueSendConsultUnsuccessfullyAlert"] ===
                    "object" &&
                  typeof $steps["makeTrueSendConsultUnsuccessfullyAlert"]
                    .then === "function"
                ) {
                  $steps["makeTrueSendConsultUnsuccessfullyAlert"] =
                    await $steps["makeTrueSendConsultUnsuccessfullyAlert"];
                }

                $steps["goToConsultListPage"] =
                  $steps.postConsult?.status === 200
                    ? (() => {
                        const actionArgs = {
                          destination: `/consult-list/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/${(() => {
                            try {
                              return $ctx.params.adm_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["goToConsultListPage"] != null &&
                  typeof $steps["goToConsultListPage"] === "object" &&
                  typeof $steps["goToConsultListPage"].then === "function"
                ) {
                  $steps["goToConsultListPage"] = await $steps[
                    "goToConsultListPage"
                  ];
                }
              }}
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "sendConsultButton",
                  "deselected"
                ])(eventArgs[0]);
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "sendConsultButton",
                  "isDisabled"
                ])(eventArgs[0]);
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "sendConsultButton",
                  "selected"
                ])(eventArgs[0]);
              }}
              onSortDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "sendConsultButton",
                  "sortDeselected"
                ])(eventArgs[0]);
              }}
              onSortSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "sendConsultButton",
                  "sortSelected"
                ])(eventArgs[0]);
              }}
              selected={generateStateValueProp($state, [
                "sendConsultButton",
                "selected"
              ])}
              sortDeselected={generateStateValueProp($state, [
                "sendConsultButton",
                "sortDeselected"
              ])}
              sortSelected={generateStateValueProp($state, [
                "sendConsultButton",
                "sortSelected"
              ])}
            >
              <div
                data-plasmic-name={"sendConsult2"}
                data-plasmic-override={overrides.sendConsult2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.sendConsult2
                )}
              >
                {
                  "\u0627\u0631\u0633\u0627\u0644 \u0645\u0634\u0627\u0648\u0631\u0647"
                }
              </div>
            </Button>
          </Stack__>
          <div
            data-plasmic-name={"switchingTab"}
            data-plasmic-override={overrides.switchingTab}
            className={classNames(projectcss.all, sty.switchingTab)}
          >
            <SwitchingTab
              className={classNames("__wab_instance", sty.switchingTab___7H9Jb)}
            >
              <PlasmicImg__
                data-plasmic-name={"homepage"}
                data-plasmic-override={overrides.homepage}
                alt={""}
                className={classNames(sty.homepage)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/patients` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/icons8Home1Svg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"consultList"}
                data-plasmic-override={overrides.consultList}
                alt={""}
                className={classNames(sty.consultList)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToConsultList"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/consult-list/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/${""}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToConsultList"] != null &&
                    typeof $steps["goToConsultList"] === "object" &&
                    typeof $steps["goToConsultList"].then === "function"
                  ) {
                    $steps["goToConsultList"] = await $steps["goToConsultList"];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/consult0F4Cb101Svg.svg",
                  fullWidth: 24,
                  fullHeight: 24,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"patientProfile"}
                data-plasmic-override={overrides.patientProfile}
                alt={""}
                className={classNames(sty.patientProfile)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPatientProfile"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/profile/[adm_id]`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPatientProfile"] != null &&
                    typeof $steps["goToPatientProfile"] === "object" &&
                    typeof $steps["goToPatientProfile"].then === "function"
                  ) {
                    $steps["goToPatientProfile"] = await $steps[
                      "goToPatientProfile"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group2063.svg",
                  fullWidth: 18.77,
                  fullHeight: 20.34,
                  aspectRatio: 0.904762
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"imagingReportList"}
                data-plasmic-override={overrides.imagingReportList}
                alt={""}
                className={classNames(sty.imagingReportList)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToImagingReport1"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/report/list/[adm_id]`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToImagingReport1"] != null &&
                    typeof $steps["goToImagingReport1"] === "object" &&
                    typeof $steps["goToImagingReport1"].then === "function"
                  ) {
                    $steps["goToImagingReport1"] = await $steps[
                      "goToImagingReport1"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group376.svg",
                  fullWidth: 19.424,
                  fullHeight: 19.98,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"laboratoryData"}
                data-plasmic-override={overrides.laboratoryData}
                alt={""}
                className={classNames(sty.laboratoryData)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToLaboratoryData"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/lab/[adm_id]`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToLaboratoryData"] != null &&
                    typeof $steps["goToLaboratoryData"] === "object" &&
                    typeof $steps["goToLaboratoryData"].then === "function"
                  ) {
                    $steps["goToLaboratoryData"] = await $steps[
                      "goToLaboratoryData"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group384.svg",
                  fullWidth: 14.575,
                  fullHeight: 18.692,
                  aspectRatio: 0.789474
                }}
              />
            </SwitchingTab>
          </div>
          <ApiFetcherComponent
            data-plasmic-name={"getServices"}
            data-plasmic-override={overrides.getServices}
            className={classNames("__wab_instance", sty.getServices)}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={"/api/v2/service"}
            ref={ref => {
              $refs["getServices"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <AntdModal
                    data-plasmic-name={"modalSenderService"}
                    data-plasmic-override={overrides.modalSenderService}
                    className={classNames(
                      "__wab_instance",
                      sty.modalSenderService
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalContentClassName={classNames({
                      [sty["pcls_22r_E4gv58NS"]]: true
                    })}
                    modalScopeClassName={sty["modalSenderService__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modalSenderService",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "modalSenderService",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oTUpz
                        )}
                      >
                        {
                          "\u0633\u0631\u0648\u06cc\u0633 \u0645\u0628\u062f\u0627 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                        }
                      </div>
                    }
                    trigger={null}
                  >
                    <div
                      data-plasmic-name={"senderServicesList"}
                      data-plasmic-override={overrides.senderServicesList}
                      className={classNames(
                        projectcss.all,
                        sty.senderServicesList
                      )}
                    >
                      <ConditionGuard
                        className={classNames(
                          "__wab_instance",
                          sty.conditionGuard__rmyfR
                        )}
                        condition={(() => {
                          try {
                            return $ctx.fetched_data.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        onNotSatisfied={async () => {
                          const $steps = {};

                          $steps["setLocalConsultSenderServiceList"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "consult_sender_service_list",
                                        JSON.stringify(
                                          $ctx.fetched_data.data.services
                                        )
                                      );
                                      return console.log(
                                        `consult_sender_service_list: ${localStorage.getItem(
                                          "consult_sender_service_list"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["setLocalConsultSenderServiceList"] !=
                              null &&
                            typeof $steps[
                              "setLocalConsultSenderServiceList"
                            ] === "object" &&
                            typeof $steps["setLocalConsultSenderServiceList"]
                              .then === "function"
                          ) {
                            $steps["setLocalConsultSenderServiceList"] =
                              await $steps["setLocalConsultSenderServiceList"];
                          }
                        }}
                      />

                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return localStorage.getItem(
                              "consult_sender_service_list"
                            ) !== (null || undefined || "" || "undefined")
                              ? JSON.parse(
                                  localStorage.getItem(
                                    "consult_sender_service_list"
                                  )
                                )
                              : $ctx.fetched_data.data.services;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"servicesName"}
                            data-plasmic-override={overrides.servicesName}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.servicesName
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["localStorageSetSenderServiceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "sender_service_id",
                                          currentItem.id
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["localStorageSetSenderServiceId"] !=
                                  null &&
                                typeof $steps[
                                  "localStorageSetSenderServiceId"
                                ] === "object" &&
                                typeof $steps["localStorageSetSenderServiceId"]
                                  .then === "function"
                              ) {
                                $steps["localStorageSetSenderServiceId"] =
                                  await $steps[
                                    "localStorageSetSenderServiceId"
                                  ];
                              }

                              $steps["localStorageSetSenderServiceName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "sender_service_name",
                                          currentItem.name
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["localStorageSetSenderServiceName"] !=
                                  null &&
                                typeof $steps[
                                  "localStorageSetSenderServiceName"
                                ] === "object" &&
                                typeof $steps[
                                  "localStorageSetSenderServiceName"
                                ].then === "function"
                              ) {
                                $steps["localStorageSetSenderServiceName"] =
                                  await $steps[
                                    "localStorageSetSenderServiceName"
                                  ];
                              }

                              $steps["consoleLogSenderServiceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "sender_service_id: ",
                                          localStorage.getItem(
                                            "sender_service_id"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogSenderServiceId"] != null &&
                                typeof $steps["consoleLogSenderServiceId"] ===
                                  "object" &&
                                typeof $steps["consoleLogSenderServiceId"]
                                  .then === "function"
                              ) {
                                $steps["consoleLogSenderServiceId"] =
                                  await $steps["consoleLogSenderServiceId"];
                              }

                              $steps["consoleLogSenderServiceName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "sender_service_name: ",
                                          localStorage.getItem(
                                            "sender_service_name"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogSenderServiceName"] != null &&
                                typeof $steps["consoleLogSenderServiceName"] ===
                                  "object" &&
                                typeof $steps["consoleLogSenderServiceName"]
                                  .then === "function"
                              ) {
                                $steps["consoleLogSenderServiceName"] =
                                  await $steps["consoleLogSenderServiceName"];
                              }

                              $steps["updateModalSenderServiceOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "modalSenderService",
                                          "open"
                                        ]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalSenderServiceOpen"] !=
                                  null &&
                                typeof $steps[
                                  "updateModalSenderServiceOpen"
                                ] === "object" &&
                                typeof $steps["updateModalSenderServiceOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateModalSenderServiceOpen"] =
                                  await $steps["updateModalSenderServiceOpen"];
                              }
                            }}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        );
                      })}
                    </div>
                  </AntdModal>
                  <AntdModal
                    data-plasmic-name={"modalReceiverService"}
                    data-plasmic-override={overrides.modalReceiverService}
                    className={classNames(
                      "__wab_instance",
                      sty.modalReceiverService
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalContentClassName={classNames({
                      [sty["pcls_rnpSvegt7BQd"]]: true
                    })}
                    modalScopeClassName={sty["modalReceiverService__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modalReceiverService",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "modalReceiverService",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q7Kc5
                        )}
                      >
                        {
                          "\u0633\u0631\u0648\u06cc\u0633 \u0645\u0628\u062f\u0627 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                        }
                      </div>
                    }
                    trigger={null}
                  >
                    <div
                      data-plasmic-name={"receiverServicesList"}
                      data-plasmic-override={overrides.receiverServicesList}
                      className={classNames(
                        projectcss.all,
                        sty.receiverServicesList
                      )}
                    >
                      <ConditionGuard
                        className={classNames(
                          "__wab_instance",
                          sty.conditionGuard__gaYfz
                        )}
                        condition={(() => {
                          try {
                            return $ctx.fetched_data.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        onNotSatisfied={async () => {
                          const $steps = {};

                          $steps["setLocalConsultReceiverServiceList"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      localStorage.setItem(
                                        "consult_receiver_service_list",
                                        JSON.stringify(
                                          $ctx.fetched_data.data.services
                                        )
                                      );
                                      return console.log(
                                        `consult_receiver_service_list: ${localStorage.getItem(
                                          "consult_receiver_service_list"
                                        )}`
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["setLocalConsultReceiverServiceList"] !=
                              null &&
                            typeof $steps[
                              "setLocalConsultReceiverServiceList"
                            ] === "object" &&
                            typeof $steps["setLocalConsultReceiverServiceList"]
                              .then === "function"
                          ) {
                            $steps["setLocalConsultReceiverServiceList"] =
                              await $steps[
                                "setLocalConsultReceiverServiceList"
                              ];
                          }
                        }}
                      />

                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return localStorage.getItem(
                              "consult_receiver_service_list"
                            ) !== (null || undefined || "" || "undefined")
                              ? JSON.parse(
                                  localStorage.getItem(
                                    "consult_receiver_service_list"
                                  )
                                )
                              : $ctx.fetched_data.data.services;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"servicesName2"}
                            data-plasmic-override={overrides.servicesName2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.servicesName2
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["localStorageSetReceiverServiceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return localStorage.setItem(
                                          "receiver_service_id",
                                          currentItem.id
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["localStorageSetReceiverServiceId"] !=
                                  null &&
                                typeof $steps[
                                  "localStorageSetReceiverServiceId"
                                ] === "object" &&
                                typeof $steps[
                                  "localStorageSetReceiverServiceId"
                                ].then === "function"
                              ) {
                                $steps["localStorageSetReceiverServiceId"] =
                                  await $steps[
                                    "localStorageSetReceiverServiceId"
                                  ];
                              }

                              $steps["localStorageSetReceiverServiceName"] =
                                true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return localStorage.setItem(
                                            "receiver_service_name",
                                            currentItem.name
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["localStorageSetReceiverServiceName"] !=
                                  null &&
                                typeof $steps[
                                  "localStorageSetReceiverServiceName"
                                ] === "object" &&
                                typeof $steps[
                                  "localStorageSetReceiverServiceName"
                                ].then === "function"
                              ) {
                                $steps["localStorageSetReceiverServiceName"] =
                                  await $steps[
                                    "localStorageSetReceiverServiceName"
                                  ];
                              }

                              $steps["consoleLogReceiverServiceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "receiver_service_id: ",
                                          localStorage.getItem(
                                            "receiver_service_id"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogReceiverServiceId"] != null &&
                                typeof $steps["consoleLogReceiverServiceId"] ===
                                  "object" &&
                                typeof $steps["consoleLogReceiverServiceId"]
                                  .then === "function"
                              ) {
                                $steps["consoleLogReceiverServiceId"] =
                                  await $steps["consoleLogReceiverServiceId"];
                              }

                              $steps["consoleLogSenderServiceName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return console.log(
                                          "receiver_service_name: ",
                                          localStorage.getItem(
                                            "receiver_service_name"
                                          )
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["consoleLogSenderServiceName"] != null &&
                                typeof $steps["consoleLogSenderServiceName"] ===
                                  "object" &&
                                typeof $steps["consoleLogSenderServiceName"]
                                  .then === "function"
                              ) {
                                $steps["consoleLogSenderServiceName"] =
                                  await $steps["consoleLogSenderServiceName"];
                              }

                              $steps["updateModalReceiverServiceOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "modalReceiverService",
                                          "open"
                                        ]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalReceiverServiceOpen"] !=
                                  null &&
                                typeof $steps[
                                  "updateModalReceiverServiceOpen"
                                ] === "object" &&
                                typeof $steps["updateModalReceiverServiceOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateModalReceiverServiceOpen"] =
                                  await $steps[
                                    "updateModalReceiverServiceOpen"
                                  ];
                              }
                            }}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        );
                      })}
                    </div>
                  </AntdModal>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
          <ApiFetcherComponent
            data-plasmic-name={"getUsers"}
            data-plasmic-override={overrides.getUsers}
            className={classNames("__wab_instance", sty.getUsers)}
            method={"GET"}
            path={`/api/v3/users?doctor_name=${$state.doctorNameInput.value}`}
            ref={ref => {
              $refs["getUsers"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <AntdModal
                  data-plasmic-name={"modalReceiverDoctor"}
                  data-plasmic-override={overrides.modalReceiverDoctor}
                  className={classNames(
                    "__wab_instance",
                    sty.modalReceiverDoctor
                  )}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalContentClassName={classNames({
                    [sty["pcls_8_2mnOKnjoeV"]]: true
                  })}
                  modalScopeClassName={sty["modalReceiverDoctor__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "modalReceiverDoctor",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "modalReceiverDoctor",
                    "open"
                  ])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vEBbD
                      )}
                    >
                      {
                        "\u067e\u0632\u0634\u06a9 \u0645\u0642\u0635\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                  }
                  trigger={null}
                >
                  <div
                    data-plasmic-name={"receiverDoctorList"}
                    data-plasmic-override={overrides.receiverDoctorList}
                    className={classNames(
                      projectcss.all,
                      sty.receiverDoctorList
                    )}
                  >
                    <div
                      data-plasmic-name={"doctorNameInputContent"}
                      data-plasmic-override={overrides.doctorNameInputContent}
                      className={classNames(
                        projectcss.all,
                        sty.doctorNameInputContent
                      )}
                    >
                      <TextInput
                        data-plasmic-name={"doctorNameInput"}
                        data-plasmic-override={overrides.doctorNameInput}
                        className={classNames(
                          "__wab_instance",
                          sty.doctorNameInput
                        )}
                        endIcon={
                          <Icons8CloseSvgIcon
                            data-plasmic-name={"clearContent"}
                            data-plasmic-override={overrides.clearContent}
                            className={classNames(
                              projectcss.all,
                              sty.clearContent
                            )}
                            role={"img"}
                          />
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "doctorNameInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }}
                        placeholder={
                          "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc \u067e\u0632\u0634\u06a9"
                        }
                        value={
                          generateStateValueProp($state, [
                            "doctorNameInput",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    {(() => {
                      try {
                        return (
                          $ctx.fetched_data.loading == false &&
                          $state.doctorNameInput.value != ""
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                      ? (_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.fetched_data.data.items;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              data-plasmic-name={"doctorNames"}
                              data-plasmic-override={overrides.doctorNames}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.doctorNames
                              )}
                              dir={"rtl"}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateReceiverDoctorId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["receiverDoctorId"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateReceiverDoctorId"] != null &&
                                  typeof $steps["updateReceiverDoctorId"] ===
                                    "object" &&
                                  typeof $steps["updateReceiverDoctorId"]
                                    .then === "function"
                                ) {
                                  $steps["updateReceiverDoctorId"] =
                                    await $steps["updateReceiverDoctorId"];
                                }

                                $steps["updateReceiverDoctorName"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["receiverDoctorName"]
                                        },
                                        operation: 0,
                                        value:
                                          "دکتر" +
                                          " " +
                                          currentItem.first_name +
                                          " " +
                                          currentItem.last_name
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateReceiverDoctorName"] != null &&
                                  typeof $steps["updateReceiverDoctorName"] ===
                                    "object" &&
                                  typeof $steps["updateReceiverDoctorName"]
                                    .then === "function"
                                ) {
                                  $steps["updateReceiverDoctorName"] =
                                    await $steps["updateReceiverDoctorName"];
                                }

                                $steps["consoleLogReceiverDoctorId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return console.log(
                                            "receiver_doctor_id: ",
                                            $state.receiverDoctorId
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["consoleLogReceiverDoctorId"] !=
                                    null &&
                                  typeof $steps[
                                    "consoleLogReceiverDoctorId"
                                  ] === "object" &&
                                  typeof $steps["consoleLogReceiverDoctorId"]
                                    .then === "function"
                                ) {
                                  $steps["consoleLogReceiverDoctorId"] =
                                    await $steps["consoleLogReceiverDoctorId"];
                                }

                                $steps["consoleLogReceiverDoctorName"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return console.log(
                                            "receiver_doctor_name: ",
                                            $state.receiverDoctorName
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["consoleLogReceiverDoctorName"] !=
                                    null &&
                                  typeof $steps[
                                    "consoleLogReceiverDoctorName"
                                  ] === "object" &&
                                  typeof $steps["consoleLogReceiverDoctorName"]
                                    .then === "function"
                                ) {
                                  $steps["consoleLogReceiverDoctorName"] =
                                    await $steps[
                                      "consoleLogReceiverDoctorName"
                                    ];
                                }

                                $steps["updateModalReceiverDoctorOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "modalReceiverDoctor",
                                            "open"
                                          ]
                                        },
                                        operation: 4
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          !oldValue
                                        );
                                        return !oldValue;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModalReceiverDoctorOpen"] !=
                                    null &&
                                  typeof $steps[
                                    "updateModalReceiverDoctorOpen"
                                  ] === "object" &&
                                  typeof $steps["updateModalReceiverDoctorOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateModalReceiverDoctorOpen"] =
                                    await $steps[
                                      "updateModalReceiverDoctorOpen"
                                    ];
                                }
                              }}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "دکتر" +
                                      " " +
                                      currentItem.first_name +
                                      " " +
                                      currentItem.last_name
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          );
                        })
                      : null}
                    {(() => {
                      try {
                        return $ctx.fetched_data.data.count == 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gNAya
                        )}
                      >
                        {
                          "\u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u067e\u0632\u0634\u06a9\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f"
                        }
                      </div>
                    ) : null}
                  </div>
                </AntdModal>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  consultSend: [
    "consultSend",
    "header",
    "patientDataForHeader",
    "freeBox",
    "patientNameAgeGender",
    "patientService",
    "sendConsult",
    "sendConsultButtonContent",
    "sendConsultSuccessfully",
    "sendConsultUnsuccessfully2",
    "senderService",
    "selectedSenderService",
    "receiverService",
    "selectedReceiverService",
    "receiverDoctor",
    "selectedReceiverDoctor",
    "consultEmergencyStatusButton",
    "consultEmergencyStatus3",
    "normalRangeButtonCircle2",
    "emergentOff",
    "emergentOn",
    "sendConsultButton",
    "sendConsult2",
    "switchingTab",
    "homepage",
    "consultList",
    "patientProfile",
    "imagingReportList",
    "laboratoryData",
    "getServices",
    "modalSenderService",
    "senderServicesList",
    "servicesName",
    "modalReceiverService",
    "receiverServicesList",
    "servicesName2",
    "getUsers",
    "modalReceiverDoctor",
    "receiverDoctorList",
    "doctorNameInputContent",
    "doctorNameInput",
    "clearContent",
    "doctorNames"
  ],
  header: [
    "header",
    "patientDataForHeader",
    "freeBox",
    "patientNameAgeGender",
    "patientService"
  ],
  patientDataForHeader: [
    "patientDataForHeader",
    "freeBox",
    "patientNameAgeGender",
    "patientService"
  ],
  freeBox: ["freeBox", "patientNameAgeGender", "patientService"],
  patientNameAgeGender: ["patientNameAgeGender"],
  patientService: ["patientService"],
  sendConsult: [
    "sendConsult",
    "sendConsultButtonContent",
    "sendConsultSuccessfully",
    "sendConsultUnsuccessfully2",
    "senderService",
    "selectedSenderService",
    "receiverService",
    "selectedReceiverService",
    "receiverDoctor",
    "selectedReceiverDoctor",
    "consultEmergencyStatusButton",
    "consultEmergencyStatus3",
    "normalRangeButtonCircle2",
    "emergentOff",
    "emergentOn",
    "sendConsultButton",
    "sendConsult2"
  ],
  sendConsultButtonContent: [
    "sendConsultButtonContent",
    "sendConsultSuccessfully",
    "sendConsultUnsuccessfully2"
  ],
  sendConsultSuccessfully: ["sendConsultSuccessfully"],
  sendConsultUnsuccessfully2: ["sendConsultUnsuccessfully2"],
  senderService: ["senderService"],
  selectedSenderService: ["selectedSenderService"],
  receiverService: ["receiverService"],
  selectedReceiverService: ["selectedReceiverService"],
  receiverDoctor: ["receiverDoctor"],
  selectedReceiverDoctor: ["selectedReceiverDoctor"],
  consultEmergencyStatusButton: [
    "consultEmergencyStatusButton",
    "consultEmergencyStatus3",
    "normalRangeButtonCircle2",
    "emergentOff",
    "emergentOn"
  ],
  consultEmergencyStatus3: [
    "consultEmergencyStatus3",
    "normalRangeButtonCircle2",
    "emergentOff",
    "emergentOn"
  ],
  normalRangeButtonCircle2: ["normalRangeButtonCircle2"],
  emergentOff: ["emergentOff"],
  emergentOn: ["emergentOn"],
  sendConsultButton: ["sendConsultButton", "sendConsult2"],
  sendConsult2: ["sendConsult2"],
  switchingTab: [
    "switchingTab",
    "homepage",
    "consultList",
    "patientProfile",
    "imagingReportList",
    "laboratoryData"
  ],
  homepage: ["homepage"],
  consultList: ["consultList"],
  patientProfile: ["patientProfile"],
  imagingReportList: ["imagingReportList"],
  laboratoryData: ["laboratoryData"],
  getServices: [
    "getServices",
    "modalSenderService",
    "senderServicesList",
    "servicesName",
    "modalReceiverService",
    "receiverServicesList",
    "servicesName2"
  ],
  modalSenderService: [
    "modalSenderService",
    "senderServicesList",
    "servicesName"
  ],
  senderServicesList: ["senderServicesList", "servicesName"],
  servicesName: ["servicesName"],
  modalReceiverService: [
    "modalReceiverService",
    "receiverServicesList",
    "servicesName2"
  ],
  receiverServicesList: ["receiverServicesList", "servicesName2"],
  servicesName2: ["servicesName2"],
  getUsers: [
    "getUsers",
    "modalReceiverDoctor",
    "receiverDoctorList",
    "doctorNameInputContent",
    "doctorNameInput",
    "clearContent",
    "doctorNames"
  ],
  modalReceiverDoctor: [
    "modalReceiverDoctor",
    "receiverDoctorList",
    "doctorNameInputContent",
    "doctorNameInput",
    "clearContent",
    "doctorNames"
  ],
  receiverDoctorList: [
    "receiverDoctorList",
    "doctorNameInputContent",
    "doctorNameInput",
    "clearContent",
    "doctorNames"
  ],
  doctorNameInputContent: [
    "doctorNameInputContent",
    "doctorNameInput",
    "clearContent"
  ],
  doctorNameInput: ["doctorNameInput", "clearContent"],
  clearContent: ["clearContent"],
  doctorNames: ["doctorNames"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  consultSend: "div";
  header: "div";
  patientDataForHeader: typeof ApiFetcherComponent;
  freeBox: "div";
  patientNameAgeGender: "div";
  patientService: "div";
  sendConsult: "div";
  sendConsultButtonContent: "div";
  sendConsultSuccessfully: typeof Alert;
  sendConsultUnsuccessfully2: typeof Alert;
  senderService: "div";
  selectedSenderService: "div";
  receiverService: "div";
  selectedReceiverService: "div";
  receiverDoctor: "div";
  selectedReceiverDoctor: "div";
  consultEmergencyStatusButton: typeof Button;
  consultEmergencyStatus3: "div";
  normalRangeButtonCircle2: "div";
  emergentOff: "div";
  emergentOn: "div";
  sendConsultButton: typeof Button;
  sendConsult2: "div";
  switchingTab: "div";
  homepage: typeof PlasmicImg__;
  consultList: typeof PlasmicImg__;
  patientProfile: typeof PlasmicImg__;
  imagingReportList: typeof PlasmicImg__;
  laboratoryData: typeof PlasmicImg__;
  getServices: typeof ApiFetcherComponent;
  modalSenderService: typeof AntdModal;
  senderServicesList: "div";
  servicesName: "div";
  modalReceiverService: typeof AntdModal;
  receiverServicesList: "div";
  servicesName2: "div";
  getUsers: typeof ApiFetcherComponent;
  modalReceiverDoctor: typeof AntdModal;
  receiverDoctorList: "div";
  doctorNameInputContent: "div";
  doctorNameInput: typeof TextInput;
  clearContent: "svg";
  doctorNames: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsultSend__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsultSend__VariantsArgs;
    args?: PlasmicConsultSend__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsultSend__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicConsultSend__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConsultSend__ArgProps,
          internalVariantPropNames: PlasmicConsultSend__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConsultSend__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "consultSend") {
    func.displayName = "PlasmicConsultSend";
  } else {
    func.displayName = `PlasmicConsultSend.${nodeName}`;
  }
  return func;
}

export const PlasmicConsultSend = Object.assign(
  // Top-level PlasmicConsultSend renders the root element
  makeNodeComponent("consultSend"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    patientDataForHeader: makeNodeComponent("patientDataForHeader"),
    freeBox: makeNodeComponent("freeBox"),
    patientNameAgeGender: makeNodeComponent("patientNameAgeGender"),
    patientService: makeNodeComponent("patientService"),
    sendConsult: makeNodeComponent("sendConsult"),
    sendConsultButtonContent: makeNodeComponent("sendConsultButtonContent"),
    sendConsultSuccessfully: makeNodeComponent("sendConsultSuccessfully"),
    sendConsultUnsuccessfully2: makeNodeComponent("sendConsultUnsuccessfully2"),
    senderService: makeNodeComponent("senderService"),
    selectedSenderService: makeNodeComponent("selectedSenderService"),
    receiverService: makeNodeComponent("receiverService"),
    selectedReceiverService: makeNodeComponent("selectedReceiverService"),
    receiverDoctor: makeNodeComponent("receiverDoctor"),
    selectedReceiverDoctor: makeNodeComponent("selectedReceiverDoctor"),
    consultEmergencyStatusButton: makeNodeComponent(
      "consultEmergencyStatusButton"
    ),
    consultEmergencyStatus3: makeNodeComponent("consultEmergencyStatus3"),
    normalRangeButtonCircle2: makeNodeComponent("normalRangeButtonCircle2"),
    emergentOff: makeNodeComponent("emergentOff"),
    emergentOn: makeNodeComponent("emergentOn"),
    sendConsultButton: makeNodeComponent("sendConsultButton"),
    sendConsult2: makeNodeComponent("sendConsult2"),
    switchingTab: makeNodeComponent("switchingTab"),
    homepage: makeNodeComponent("homepage"),
    consultList: makeNodeComponent("consultList"),
    patientProfile: makeNodeComponent("patientProfile"),
    imagingReportList: makeNodeComponent("imagingReportList"),
    laboratoryData: makeNodeComponent("laboratoryData"),
    getServices: makeNodeComponent("getServices"),
    modalSenderService: makeNodeComponent("modalSenderService"),
    senderServicesList: makeNodeComponent("senderServicesList"),
    servicesName: makeNodeComponent("servicesName"),
    modalReceiverService: makeNodeComponent("modalReceiverService"),
    receiverServicesList: makeNodeComponent("receiverServicesList"),
    servicesName2: makeNodeComponent("servicesName2"),
    getUsers: makeNodeComponent("getUsers"),
    modalReceiverDoctor: makeNodeComponent("modalReceiverDoctor"),
    receiverDoctorList: makeNodeComponent("receiverDoctorList"),
    doctorNameInputContent: makeNodeComponent("doctorNameInputContent"),
    doctorNameInput: makeNodeComponent("doctorNameInput"),
    clearContent: makeNodeComponent("clearContent"),
    doctorNames: makeNodeComponent("doctorNames"),

    // Metadata about props expected for PlasmicConsultSend
    internalVariantProps: PlasmicConsultSend__VariantProps,
    internalArgProps: PlasmicConsultSend__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConsultSend;
/* prettier-ignore-end */
