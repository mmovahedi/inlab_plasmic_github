// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: 86AB0v1-nDyA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicReport.module.css"; // plasmic-import: 86AB0v1-nDyA/css

createPlasmicElementProxy;

export type PlasmicReport__VariantMembers = {};
export type PlasmicReport__VariantsArgs = {};
type VariantPropType = keyof PlasmicReport__VariantsArgs;
export const PlasmicReport__VariantProps = new Array<VariantPropType>();

export type PlasmicReport__ArgsType = {
  reportresult?: string;
  onReportresultChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicReport__ArgsType;
export const PlasmicReport__ArgProps = new Array<ArgPropType>(
  "reportresult",
  "onReportresultChange"
);

export type PlasmicReport__OverridesType = {
  reports?: Flex__<typeof ApiFetcherComponent>;
  freeBox?: Flex__<"div">;
  imagingTitledatetime?: Flex__<"div">;
  imagingTitle?: Flex__<"div">;
  imagingDatetime?: Flex__<"div">;
  imagingType?: Flex__<"div">;
};

export interface DefaultReportProps {
  reportresult?: string;
  onReportresultChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReport__RenderFunc(props: {
  variants: PlasmicReport__VariantsArgs;
  args: PlasmicReport__ArgsType;
  overrides: PlasmicReport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reportresult",
        type: "writable",
        variableType: "text",

        valueProp: "reportresult",
        onChangeProp: "onReportresultChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <ApiFetcherComponent
      data-plasmic-name={"reports"}
      data-plasmic-override={overrides.reports}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.reports
      )}
      headers={(() => {
        try {
          return {
            "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      method={"GET"}
      path={`/api/v2/patient/${$ctx.params.code}/radiology_services/recent?offset=0&limit=20`}
      ref={ref => {
        $refs["reports"] = ref;
      }}
    >
      <DataCtxReader__>
        {$ctx => (
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetched_data.data.radiology_services.length === 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vH0Vy
                )}
              >
                {
                  "\u06af\u0632\u0627\u0631\u0634\u06cc \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
                }
              </div>
            ) : null}
            {(() => {
              try {
                return $ctx.fetched_data.loading === true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ttMz
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                }
              </div>
            ) : null}
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $ctx.fetched_data.data.radiology_services;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToImagingReports2"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/patient/${(() => {
                              try {
                                return $ctx.params.code;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}/report/detail/${(() => {
                              try {
                                return currentItem.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToImagingReports2"] != null &&
                      typeof $steps["goToImagingReports2"] === "object" &&
                      typeof $steps["goToImagingReports2"].then === "function"
                    ) {
                      $steps["goToImagingReports2"] = await $steps[
                        "goToImagingReports2"
                      ];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"imagingTitledatetime"}
                    data-plasmic-override={overrides.imagingTitledatetime}
                    className={classNames(
                      projectcss.all,
                      sty.imagingTitledatetime
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    <div
                      data-plasmic-name={"imagingTitle"}
                      data-plasmic-override={overrides.imagingTitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.imagingTitle
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.service_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      data-plasmic-name={"imagingDatetime"}
                      data-plasmic-override={overrides.imagingDatetime}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.imagingDatetime
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const gregorianDate = new Date(
                                currentItem.service_datetime
                              );
                              const shamsiDate = new Intl.DateTimeFormat(
                                "fa-IR"
                              ).format(gregorianDate);
                              const shamsiTime =
                                gregorianDate.toLocaleTimeString("fa-IR", {
                                  hour12: false
                                });
                              const englishDate = shamsiDate.replace(
                                /[۰-۹]/g,
                                d => String.fromCharCode(d.charCodeAt(0) - 1728)
                              );
                              const englishTime = shamsiTime.replace(
                                /[۰-۹]/g,
                                d => String.fromCharCode(d.charCodeAt(0) - 1728)
                              );
                              return `${englishDate}  ${englishTime}`;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"imagingType"}
                    data-plasmic-override={overrides.imagingType}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.imagingType
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.title
                            .replace(/\(\s+#\s*\)/g, "")
                            .replace(/\(\s+#\*\s*\)/g, "");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
          </React.Fragment>
        )}
      </DataCtxReader__>
    </ApiFetcherComponent>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  reports: [
    "reports",
    "freeBox",
    "imagingTitledatetime",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  freeBox: [
    "freeBox",
    "imagingTitledatetime",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  imagingTitledatetime: [
    "imagingTitledatetime",
    "imagingTitle",
    "imagingDatetime"
  ],
  imagingTitle: ["imagingTitle"],
  imagingDatetime: ["imagingDatetime"],
  imagingType: ["imagingType"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  reports: typeof ApiFetcherComponent;
  freeBox: "div";
  imagingTitledatetime: "div";
  imagingTitle: "div";
  imagingDatetime: "div";
  imagingType: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReport__VariantsArgs;
    args?: PlasmicReport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReport__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReport__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReport__ArgProps,
          internalVariantPropNames: PlasmicReport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "reports") {
    func.displayName = "PlasmicReport";
  } else {
    func.displayName = `PlasmicReport.${nodeName}`;
  }
  return func;
}

export const PlasmicReport = Object.assign(
  // Top-level PlasmicReport renders the root element
  makeNodeComponent("reports"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    imagingTitledatetime: makeNodeComponent("imagingTitledatetime"),
    imagingTitle: makeNodeComponent("imagingTitle"),
    imagingDatetime: makeNodeComponent("imagingDatetime"),
    imagingType: makeNodeComponent("imagingType"),

    // Metadata about props expected for PlasmicReport
    internalVariantProps: PlasmicReport__VariantProps,
    internalArgProps: PlasmicReport__ArgProps
  }
);

export default PlasmicReport;
/* prettier-ignore-end */
