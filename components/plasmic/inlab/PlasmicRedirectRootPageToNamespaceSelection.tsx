// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: rhyWwtv3sPGn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicRedirectRootPageToNamespaceSelection.module.css"; // plasmic-import: rhyWwtv3sPGn/css

createPlasmicElementProxy;

export type PlasmicRedirectRootPageToNamespaceSelection__VariantMembers = {};
export type PlasmicRedirectRootPageToNamespaceSelection__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicRedirectRootPageToNamespaceSelection__VariantsArgs;
export const PlasmicRedirectRootPageToNamespaceSelection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRedirectRootPageToNamespaceSelection__ArgsType = {};
type ArgPropType = keyof PlasmicRedirectRootPageToNamespaceSelection__ArgsType;
export const PlasmicRedirectRootPageToNamespaceSelection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicRedirectRootPageToNamespaceSelection__OverridesType = {
  redirectRootPageToNamespaceSelection?: Flex__<typeof SideEffect>;
};

export interface DefaultRedirectRootPageToNamespaceSelectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRedirectRootPageToNamespaceSelection__RenderFunc(props: {
  variants: PlasmicRedirectRootPageToNamespaceSelection__VariantsArgs;
  args: PlasmicRedirectRootPageToNamespaceSelection__ArgsType;
  overrides: PlasmicRedirectRootPageToNamespaceSelection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <SideEffect
      data-plasmic-name={"redirectRootPageToNamespaceSelection"}
      data-plasmic-override={overrides.redirectRootPageToNamespaceSelection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.redirectRootPageToNamespaceSelection
      )}
      onMount={async () => {
        const $steps = {};

        $steps["consoleLogOfInlabUser"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return console.log(
                    `inlab_user: ${localStorage.getItem("inlab_user")}`
                  );
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["consoleLogOfInlabUser"] != null &&
          typeof $steps["consoleLogOfInlabUser"] === "object" &&
          typeof $steps["consoleLogOfInlabUser"].then === "function"
        ) {
          $steps["consoleLogOfInlabUser"] = await $steps[
            "consoleLogOfInlabUser"
          ];
        }

        $steps["cosoleLogOfInlabUserNamespaceId"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return console.log(
                    `inlab_user_namespace_id: ${localStorage.getItem(
                      "inlab_user_namespace_id"
                    )}`
                  );
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["cosoleLogOfInlabUserNamespaceId"] != null &&
          typeof $steps["cosoleLogOfInlabUserNamespaceId"] === "object" &&
          typeof $steps["cosoleLogOfInlabUserNamespaceId"].then === "function"
        ) {
          $steps["cosoleLogOfInlabUserNamespaceId"] = await $steps[
            "cosoleLogOfInlabUserNamespaceId"
          ];
        }

        $steps["goToNamespaceSelection"] =
          localStorage.getItem("inlab_user") &&
          !localStorage.getItem("inlab_user_namespace_id")
            ? (() => {
                const actionArgs = { destination: `/user/setting/namespace` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["goToNamespaceSelection"] != null &&
          typeof $steps["goToNamespaceSelection"] === "object" &&
          typeof $steps["goToNamespaceSelection"].then === "function"
        ) {
          $steps["goToNamespaceSelection"] = await $steps[
            "goToNamespaceSelection"
          ];
        }
      }}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  redirectRootPageToNamespaceSelection: ["redirectRootPageToNamespaceSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  redirectRootPageToNamespaceSelection: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRedirectRootPageToNamespaceSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRedirectRootPageToNamespaceSelection__VariantsArgs;
    args?: PlasmicRedirectRootPageToNamespaceSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicRedirectRootPageToNamespaceSelection__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicRedirectRootPageToNamespaceSelection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicRedirectRootPageToNamespaceSelection__ArgProps,
          internalVariantPropNames:
            PlasmicRedirectRootPageToNamespaceSelection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRedirectRootPageToNamespaceSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "redirectRootPageToNamespaceSelection") {
    func.displayName = "PlasmicRedirectRootPageToNamespaceSelection";
  } else {
    func.displayName = `PlasmicRedirectRootPageToNamespaceSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicRedirectRootPageToNamespaceSelection = Object.assign(
  // Top-level PlasmicRedirectRootPageToNamespaceSelection renders the root element
  makeNodeComponent("redirectRootPageToNamespaceSelection"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicRedirectRootPageToNamespaceSelection
    internalVariantProps:
      PlasmicRedirectRootPageToNamespaceSelection__VariantProps,
    internalArgProps: PlasmicRedirectRootPageToNamespaceSelection__ArgProps
  }
);

export default PlasmicRedirectRootPageToNamespaceSelection;
/* prettier-ignore-end */
