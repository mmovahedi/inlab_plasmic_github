// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: YivXi3wItkax

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component
import OnloadUserPatientInteractionCount from "../../OnloadUserPatientInteractionCount"; // plasmic-import: 6oEGl3M40QrL/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicLaboratoryData.module.css"; // plasmic-import: YivXi3wItkax/css

createPlasmicElementProxy;

export type PlasmicLaboratoryData__VariantMembers = {
  viewNormalRange: "viewNormalRange";
  bookmarkedPatient: "bookmarkedPatient";
};
export type PlasmicLaboratoryData__VariantsArgs = {
  viewNormalRange?: SingleBooleanChoiceArg<"viewNormalRange">;
  bookmarkedPatient?: SingleBooleanChoiceArg<"bookmarkedPatient">;
};
type VariantPropType = keyof PlasmicLaboratoryData__VariantsArgs;
export const PlasmicLaboratoryData__VariantProps = new Array<VariantPropType>(
  "viewNormalRange",
  "bookmarkedPatient"
);

export type PlasmicLaboratoryData__ArgsType = {};
type ArgPropType = keyof PlasmicLaboratoryData__ArgsType;
export const PlasmicLaboratoryData__ArgProps = new Array<ArgPropType>();

export type PlasmicLaboratoryData__OverridesType = {
  laboratoryData?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  header?: Flex__<"div">;
  patientDataApiFetcher?: Flex__<typeof ApiFetcherComponent>;
  normalRangeButton?: Flex__<"div">;
  normalRangeButtonCircle?: Flex__<"div">;
  labData?: Flex__<typeof ApiFetcherComponent>;
  laboratoryLists?: Flex__<"div">;
  labResults?: Flex__<"div">;
  checkedFactors?: Flex__<"div">;
  emptyCell?: Flex__<"div">;
  factorName?: Flex__<"div">;
  laboratoryResultsPerTitle?: Flex__<"div">;
  labPerDate?: Flex__<"div">;
  issuedDatetime?: Flex__<"div">;
  labLists?: Flex__<"div">;
  factorNamevalue?: Flex__<"div">;
  normalFactorValue?: Flex__<"div">;
  abnormalFactorValue?: Flex__<"div">;
  normalRanged?: Flex__<"div">;
  antibiogramData?: Flex__<typeof ApiFetcherComponent>;
  antibiogramPerDate?: Flex__<"div">;
  datetimename?: Flex__<"div">;
  datetime?: Flex__<"div">;
  antibiogram?: Flex__<"div">;
  antibioticName?: Flex__<"div">;
  antibioticResult?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  homepage?: Flex__<typeof PlasmicImg__>;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  radiologyReport?: Flex__<typeof PlasmicImg__>;
  laboratoryPage2?: Flex__<typeof PlasmicImg__>;
  onloadUserPatientInteractionCount?: Flex__<
    typeof OnloadUserPatientInteractionCount
  >;
};

export interface DefaultLaboratoryDataProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLaboratoryData__RenderFunc(props: {
  variants: PlasmicLaboratoryData__VariantsArgs;
  args: PlasmicLaboratoryData__ArgsType;
  overrides: PlasmicLaboratoryData__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "viewNormalRange",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.viewNormalRange
      },
      {
        path: "bookmarkedPatient",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.bookmarkedPatient
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"laboratoryData"}
        data-plasmic-override={overrides.laboratoryData}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.laboratoryData,
          {
            [sty.laboratoryDatabookmarkedPatient]: hasVariant(
              $state,
              "bookmarkedPatient",
              "bookmarkedPatient"
            ),
            [sty.laboratoryDataviewNormalRange]: hasVariant(
              $state,
              "viewNormalRange",
              "viewNormalRange"
            ),
            [sty.laboratoryDataviewNormalRange_bookmarkedPatient]:
              hasVariant($state, "bookmarkedPatient", "bookmarkedPatient") &&
              hasVariant($state, "viewNormalRange", "viewNormalRange")
          }
        )}
      >
        <RedirectToInlabLogin
          data-plasmic-name={"redirectToInlabLogin"}
          data-plasmic-override={overrides.redirectToInlabLogin}
          className={classNames("__wab_instance", sty.redirectToInlabLogin)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <ApiFetcherComponent
            data-plasmic-name={"patientDataApiFetcher"}
            data-plasmic-override={overrides.patientDataApiFetcher}
            className={classNames("__wab_instance", sty.patientDataApiFetcher)}
            delay={50}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v2/patient/${$ctx.params.code}`}
            ref={ref => {
              $refs["patientDataApiFetcher"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t37T4,
                    {
                      [sty.textviewNormalRange__t37T4Bwg80]: hasVariant(
                        $state,
                        "viewNormalRange",
                        "viewNormalRange"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {$ctx.fetched_data.loading == false &&
                      (() => {
                        const dob = new Date($ctx.fetched_data.data.dob);
                        const ageDiffMs = Date.now() - dob.getTime();
                        const ageDate = new Date(ageDiffMs);
                        const ageYears = Math.abs(
                          ageDate.getUTCFullYear() - 1970
                        );
                        const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                        if (ageYears < 1) {
                          const ageMonths = ageDate.getUTCMonth();
                          return `${fullName} 
${ageMonths} months ${
                            $ctx.fetched_data.data.gender === "F"
                              ? " ♀️"
                              : $ctx.fetched_data.data.gender === "M"
                              ? " ♂️"
                              : ""
                          }`;
                        } else {
                          return `${fullName} ${ageYears}${
                            $ctx.fetched_data.data.gender === "F"
                              ? " ♀️"
                              : $ctx.fetched_data.data.gender === "M"
                              ? " ♂️"
                              : ""
                          }`;
                        }
                      })()}
                  </React.Fragment>
                </div>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
          <div
            data-plasmic-name={"normalRangeButton"}
            data-plasmic-override={overrides.normalRangeButton}
            className={classNames(projectcss.all, sty.normalRangeButton, {
              [sty.normalRangeButtonviewNormalRange]: hasVariant(
                $state,
                "viewNormalRange",
                "viewNormalRange"
              )
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateViewNormalRange"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "viewNormalRange",
                      operation: 2,
                      value: "viewNormalRange"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateViewNormalRange"] != null &&
                typeof $steps["updateViewNormalRange"] === "object" &&
                typeof $steps["updateViewNormalRange"].then === "function"
              ) {
                $steps["updateViewNormalRange"] = await $steps[
                  "updateViewNormalRange"
                ];
              }
            }}
          >
            <div
              data-plasmic-name={"normalRangeButtonCircle"}
              data-plasmic-override={overrides.normalRangeButtonCircle}
              className={classNames(
                projectcss.all,
                sty.normalRangeButtonCircle,
                {
                  [sty.normalRangeButtonCircleviewNormalRange]: hasVariant(
                    $state,
                    "viewNormalRange",
                    "viewNormalRange"
                  )
                }
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oI3Bw,
                {
                  [sty.textviewNormalRange__oI3BwBwg80]: hasVariant(
                    $state,
                    "viewNormalRange",
                    "viewNormalRange"
                  )
                }
              )}
            >
              {"Normal Ranges"}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__pziWk, {
                [sty.freeBoxviewNormalRange__pziWkBwg80]: hasVariant(
                  $state,
                  "viewNormalRange",
                  "viewNormalRange"
                )
              })}
            />
          </div>
        </div>
        <ApiFetcherComponent
          data-plasmic-name={"labData"}
          data-plasmic-override={overrides.labData}
          className={classNames("__wab_instance", sty.labData, {
            [sty.labDataviewNormalRange]: hasVariant(
              $state,
              "viewNormalRange",
              "viewNormalRange"
            )
          })}
          method={"GET"}
          path={`/api/v3/patient/lab/${
            $ctx.params.code
          }?namespace_id=${localStorage.getItem("inlab_user_namespace_id")}`}
          ref={ref => {
            $refs["labData"] = ref;
          }}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                {$ctx.fetched_data.loading == false &&
                $ctx.fetched_data.data.lab_test_groups == 0 ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vcc6L
                    )}
                  >
                    {
                      "\u0622\u0632\u0645\u0627\u06cc\u0634\u06cc \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
                    }
                  </div>
                ) : null}
                {$ctx.fetched_data.loading == true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__woDte
                    )}
                  >
                    {
                      "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                    }
                  </div>
                ) : null}
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.fetched_data.data.lab_test_groups;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"laboratoryLists"}
                      data-plasmic-override={overrides.laboratoryLists}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.laboratoryLists,
                        {
                          [sty.laboratoryListsviewNormalRange]: hasVariant(
                            $state,
                            "viewNormalRange",
                            "viewNormalRange"
                          )
                        }
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b1Ehi
                        )}
                      />

                      <div
                        data-plasmic-name={"labResults"}
                        data-plasmic-override={overrides.labResults}
                        className={classNames(projectcss.all, sty.labResults, {
                          [sty.labResultsviewNormalRange]: hasVariant(
                            $state,
                            "viewNormalRange",
                            "viewNormalRange"
                          )
                        })}
                      >
                        <div
                          data-plasmic-name={"checkedFactors"}
                          data-plasmic-override={overrides.checkedFactors}
                          className={classNames(
                            projectcss.all,
                            sty.checkedFactors,
                            {
                              [sty.checkedFactorsviewNormalRange]: hasVariant(
                                $state,
                                "viewNormalRange",
                                "viewNormalRange"
                              )
                            }
                          )}
                        >
                          <div
                            data-plasmic-name={"emptyCell"}
                            data-plasmic-override={overrides.emptyCell}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.emptyCell,
                              {
                                [sty.emptyCellviewNormalRange]: hasVariant(
                                  $state,
                                  "viewNormalRange",
                                  "viewNormalRange"
                                )
                              }
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title
                                    .replace(" (  #* ) ", "")
                                    .replace(" (  # ) ", "")
                                    .replace("( #)", "")
                                    .replace("( #*)", "")
                                    .replace("* ( #*)", "")
                                    .replace("(  #* )", "");
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return currentItem.factors;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_1, __plasmic_idx_1) => {
                            const currentItem = __plasmic_item_1;
                            const currentIndex = __plasmic_idx_1;
                            return (
                              <div
                                data-plasmic-name={"factorName"}
                                data-plasmic-override={overrides.factorName}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.factorName,
                                  {
                                    [sty.factorNameviewNormalRange]: hasVariant(
                                      $state,
                                      "viewNormalRange",
                                      "viewNormalRange"
                                    )
                                  }
                                )}
                                key={currentIndex}
                              >
                                <React.Fragment>
                                  {currentItem.name
                                    .replace(" (  #* ) ", "")
                                    .replace(" (  # ) ", "")
                                    .replace("( #)", "")
                                    .replace("( #*)", "")
                                    .replace("* ( #*)", "")
                                    .replace("(  #* )", "")
                                    .replace("* ( #* )", "")
                                    .replace("( #* )", "")}
                                </React.Fragment>
                              </div>
                            );
                          })}
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"laboratoryResultsPerTitle"}
                          data-plasmic-override={
                            overrides.laboratoryResultsPerTitle
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.laboratoryResultsPerTitle,
                            {
                              [sty.laboratoryResultsPerTitleviewNormalRange]:
                                hasVariant(
                                  $state,
                                  "viewNormalRange",
                                  "viewNormalRange"
                                )
                            }
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return currentItem.results;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_1, __plasmic_idx_1) => {
                            const currentItem = __plasmic_item_1;
                            const currentIndex = __plasmic_idx_1;
                            return (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"labPerDate"}
                                data-plasmic-override={overrides.labPerDate}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.labPerDate,
                                  {
                                    [sty.labPerDateviewNormalRange]: hasVariant(
                                      $state,
                                      "viewNormalRange",
                                      "viewNormalRange"
                                    )
                                  }
                                )}
                                key={currentIndex}
                              >
                                <div
                                  data-plasmic-name={"issuedDatetime"}
                                  data-plasmic-override={
                                    overrides.issuedDatetime
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.issuedDatetime,
                                    {
                                      [sty.issuedDatetimeviewNormalRange]:
                                        hasVariant(
                                          $state,
                                          "viewNormalRange",
                                          "viewNormalRange"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const gregorianDate = new Date(
                                            currentItem.issued_datetime
                                          );
                                          const shamsiDate =
                                            new Intl.DateTimeFormat(
                                              "fa-IR"
                                            ).format(gregorianDate);
                                          const shamsiTime =
                                            gregorianDate.toLocaleTimeString(
                                              "fa-IR",
                                              { hour12: false }
                                            );
                                          const englishDate =
                                            shamsiDate.replace(/[۰-۹]/g, d =>
                                              String.fromCharCode(
                                                d.charCodeAt(0) - 1728
                                              )
                                            );

                                          // Extracting only the hour and minutes from shamsiTime
                                          const englishTime = shamsiTime
                                            .split(":")
                                            .slice(0, 2)
                                            .join(":")
                                            .replace(/[۰-۹]/g, d =>
                                              String.fromCharCode(
                                                d.charCodeAt(0) - 1728
                                              )
                                            );

                                          return `${englishDate} ${englishTime}`;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return currentItem.values;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_2, __plasmic_idx_2) => {
                                  const currentItem = __plasmic_item_2;
                                  const currentIndex = __plasmic_idx_2;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"labLists"}
                                      data-plasmic-override={overrides.labLists}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.labLists,
                                        {
                                          [sty.labListsviewNormalRange]:
                                            hasVariant(
                                              $state,
                                              "viewNormalRange",
                                              "viewNormalRange"
                                            )
                                        }
                                      )}
                                      key={currentIndex}
                                    >
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"factorNamevalue"}
                                        data-plasmic-override={
                                          overrides.factorNamevalue
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.factorNamevalue,
                                          {
                                            [sty.factorNamevalueviewNormalRange]:
                                              hasVariant(
                                                $state,
                                                "viewNormalRange",
                                                "viewNormalRange"
                                              )
                                          }
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___4Tel,
                                            {
                                              [sty.freeBoxviewNormalRange___4TelBwg80]:
                                                hasVariant(
                                                  $state,
                                                  "viewNormalRange",
                                                  "viewNormalRange"
                                                )
                                            }
                                          )}
                                        >
                                          {currentItem.abnormal == false ? (
                                            <div
                                              data-plasmic-name={
                                                "normalFactorValue"
                                              }
                                              data-plasmic-override={
                                                overrides.normalFactorValue
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.normalFactorValue,
                                                {
                                                  [sty.normalFactorValueviewNormalRange]:
                                                    hasVariant(
                                                      $state,
                                                      "viewNormalRange",
                                                      "viewNormalRange"
                                                    )
                                                }
                                              )}
                                            >
                                              <React.Fragment>
                                                {currentItem.value}
                                              </React.Fragment>
                                            </div>
                                          ) : null}
                                          {currentItem.abnormal == true ? (
                                            <div
                                              data-plasmic-name={
                                                "abnormalFactorValue"
                                              }
                                              data-plasmic-override={
                                                overrides.abnormalFactorValue
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.abnormalFactorValue,
                                                {
                                                  [sty.abnormalFactorValueviewNormalRange]:
                                                    hasVariant(
                                                      $state,
                                                      "viewNormalRange",
                                                      "viewNormalRange"
                                                    )
                                                }
                                              )}
                                            >
                                              <React.Fragment>
                                                {currentItem.value}
                                              </React.Fragment>
                                            </div>
                                          ) : null}
                                          <div
                                            data-plasmic-name={"normalRanged"}
                                            data-plasmic-override={
                                              overrides.normalRanged
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.normalRanged,
                                              {
                                                [sty.normalRangedviewNormalRange]:
                                                  hasVariant(
                                                    $state,
                                                    "viewNormalRange",
                                                    "viewNormalRange"
                                                  )
                                              }
                                            )}
                                          >
                                            <React.Fragment>
                                              {currentItem.normal_range}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </Stack__>
                                    </Stack__>
                                  );
                                })}
                              </Stack__>
                            );
                          })}
                        </Stack__>
                      </div>
                    </Stack__>
                  );
                })}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </ApiFetcherComponent>
        {(() => {
          try {
            return true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <ApiFetcherComponent
            data-plasmic-name={"antibiogramData"}
            data-plasmic-override={overrides.antibiogramData}
            className={classNames("__wab_instance", sty.antibiogramData, {
              [sty.antibiogramDataviewNormalRange]: hasVariant(
                $state,
                "viewNormalRange",
                "viewNormalRange"
              )
            })}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v3/patient/antibiogram/${$ctx.params.code}`}
            ref={ref => {
              $refs["antibiogramData"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx =>
                $ctx.fetched_data.data !== 0
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetched_data.data[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"antibiogramPerDate"}
                          data-plasmic-override={overrides.antibiogramPerDate}
                          className={classNames(
                            projectcss.all,
                            sty.antibiogramPerDate
                          )}
                          key={currentIndex}
                        >
                          <div
                            data-plasmic-name={"datetimename"}
                            data-plasmic-override={overrides.datetimename}
                            className={classNames(
                              projectcss.all,
                              sty.datetimename
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nnvRv
                              )}
                            >
                              {"antibiogram"}
                            </div>
                            <div
                              data-plasmic-name={"datetime"}
                              data-plasmic-override={overrides.datetime}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.datetime
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.answer_datetime_jalali_str;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return currentItem.labgiveanti_set;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_1, __plasmic_idx_1) => {
                            const currentItem = __plasmic_item_1;
                            const currentIndex = __plasmic_idx_1;
                            return (
                              <div
                                data-plasmic-name={"antibiogram"}
                                data-plasmic-override={overrides.antibiogram}
                                className={classNames(
                                  projectcss.all,
                                  sty.antibiogram
                                )}
                                key={currentIndex}
                              >
                                <div
                                  data-plasmic-name={"antibioticName"}
                                  data-plasmic-override={
                                    overrides.antibioticName
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.antibioticName
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.labgiveanti_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={"antibioticResult"}
                                  data-plasmic-override={
                                    overrides.antibioticResult
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.antibioticResult
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.labgiveanti_status;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      );
                    })
                  : null
              }
            </DataCtxReader__>
          </ApiFetcherComponent>
        ) : null}
        <div
          data-plasmic-name={"switchingTabs"}
          data-plasmic-override={overrides.switchingTabs}
          className={classNames(projectcss.all, sty.switchingTabs)}
        >
          <SwitchingTab
            data-plasmic-name={"switchingTab"}
            data-plasmic-override={overrides.switchingTab}
            className={classNames("__wab_instance", sty.switchingTab)}
          >
            <PlasmicImg__
              data-plasmic-name={"homepage"}
              data-plasmic-override={overrides.homepage}
              alt={""}
              className={classNames(sty.homepage)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/patients` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/icons8Home1Svg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"patientProfile"}
              data-plasmic-override={overrides.patientProfile}
              alt={""}
              className={classNames(sty.patientProfile)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPatientProfile"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/${(() => {
                          try {
                            return $ctx.params.bookmarked === "true"
                              ? true
                              : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/profile`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPatientProfile"] != null &&
                  typeof $steps["goToPatientProfile"] === "object" &&
                  typeof $steps["goToPatientProfile"].then === "function"
                ) {
                  $steps["goToPatientProfile"] = await $steps[
                    "goToPatientProfile"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group2063.svg",
                fullWidth: 18.77,
                fullHeight: 20.34,
                aspectRatio: 0.904762
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"radiologyReport"}
              data-plasmic-override={overrides.radiologyReport}
              alt={""}
              className={classNames(sty.radiologyReport)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToImagingReport1"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/${(() => {
                          try {
                            return $ctx.params.bookmarked === "true"
                              ? true
                              : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/report/list`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToImagingReport1"] != null &&
                  typeof $steps["goToImagingReport1"] === "object" &&
                  typeof $steps["goToImagingReport1"].then === "function"
                ) {
                  $steps["goToImagingReport1"] = await $steps[
                    "goToImagingReport1"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group376.svg",
                fullWidth: 19.424,
                fullHeight: 19.98,
                aspectRatio: 1
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"laboratoryPage2"}
              data-plasmic-override={overrides.laboratoryPage2}
              alt={""}
              className={classNames(sty.laboratoryPage2)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToImagingReport1"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/${(() => {
                          try {
                            return $ctx.params.bookmarked;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/lab`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToImagingReport1"] != null &&
                  typeof $steps["goToImagingReport1"] === "object" &&
                  typeof $steps["goToImagingReport1"].then === "function"
                ) {
                  $steps["goToImagingReport1"] = await $steps[
                    "goToImagingReport1"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group384.svg",
                fullWidth: 14.575,
                fullHeight: 18.692,
                aspectRatio: 0.789474
              }}
            />
          </SwitchingTab>
        </div>
        {false ? (
          <OnloadUserPatientInteractionCount
            data-plasmic-name={"onloadUserPatientInteractionCount"}
            data-plasmic-override={overrides.onloadUserPatientInteractionCount}
            className={classNames(
              "__wab_instance",
              sty.onloadUserPatientInteractionCount
            )}
            patientIdForOnloadUserPatientInteractionCount={(() => {
              try {
                return $ctx.params.code;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  laboratoryData: [
    "laboratoryData",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "header",
    "patientDataApiFetcher",
    "normalRangeButton",
    "normalRangeButtonCircle",
    "labData",
    "laboratoryLists",
    "labResults",
    "checkedFactors",
    "emptyCell",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "antibiogramData",
    "antibiogramPerDate",
    "datetimename",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult",
    "switchingTabs",
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratoryPage2",
    "onloadUserPatientInteractionCount"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  header: [
    "header",
    "patientDataApiFetcher",
    "normalRangeButton",
    "normalRangeButtonCircle"
  ],
  patientDataApiFetcher: ["patientDataApiFetcher"],
  normalRangeButton: ["normalRangeButton", "normalRangeButtonCircle"],
  normalRangeButtonCircle: ["normalRangeButtonCircle"],
  labData: [
    "labData",
    "laboratoryLists",
    "labResults",
    "checkedFactors",
    "emptyCell",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  laboratoryLists: [
    "laboratoryLists",
    "labResults",
    "checkedFactors",
    "emptyCell",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  labResults: [
    "labResults",
    "checkedFactors",
    "emptyCell",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  checkedFactors: ["checkedFactors", "emptyCell", "factorName"],
  emptyCell: ["emptyCell"],
  factorName: ["factorName"],
  laboratoryResultsPerTitle: [
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  labPerDate: [
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  issuedDatetime: ["issuedDatetime"],
  labLists: [
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  factorNamevalue: [
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  normalFactorValue: ["normalFactorValue"],
  abnormalFactorValue: ["abnormalFactorValue"],
  normalRanged: ["normalRanged"],
  antibiogramData: [
    "antibiogramData",
    "antibiogramPerDate",
    "datetimename",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult"
  ],
  antibiogramPerDate: [
    "antibiogramPerDate",
    "datetimename",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult"
  ],
  datetimename: ["datetimename", "datetime"],
  datetime: ["datetime"],
  antibiogram: ["antibiogram", "antibioticName", "antibioticResult"],
  antibioticName: ["antibioticName"],
  antibioticResult: ["antibioticResult"],
  switchingTabs: [
    "switchingTabs",
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratoryPage2"
  ],
  switchingTab: [
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratoryPage2"
  ],
  homepage: ["homepage"],
  patientProfile: ["patientProfile"],
  radiologyReport: ["radiologyReport"],
  laboratoryPage2: ["laboratoryPage2"],
  onloadUserPatientInteractionCount: ["onloadUserPatientInteractionCount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  laboratoryData: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  header: "div";
  patientDataApiFetcher: typeof ApiFetcherComponent;
  normalRangeButton: "div";
  normalRangeButtonCircle: "div";
  labData: typeof ApiFetcherComponent;
  laboratoryLists: "div";
  labResults: "div";
  checkedFactors: "div";
  emptyCell: "div";
  factorName: "div";
  laboratoryResultsPerTitle: "div";
  labPerDate: "div";
  issuedDatetime: "div";
  labLists: "div";
  factorNamevalue: "div";
  normalFactorValue: "div";
  abnormalFactorValue: "div";
  normalRanged: "div";
  antibiogramData: typeof ApiFetcherComponent;
  antibiogramPerDate: "div";
  datetimename: "div";
  datetime: "div";
  antibiogram: "div";
  antibioticName: "div";
  antibioticResult: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  homepage: typeof PlasmicImg__;
  patientProfile: typeof PlasmicImg__;
  radiologyReport: typeof PlasmicImg__;
  laboratoryPage2: typeof PlasmicImg__;
  onloadUserPatientInteractionCount: typeof OnloadUserPatientInteractionCount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLaboratoryData__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLaboratoryData__VariantsArgs;
    args?: PlasmicLaboratoryData__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLaboratoryData__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLaboratoryData__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLaboratoryData__ArgProps,
          internalVariantPropNames: PlasmicLaboratoryData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLaboratoryData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "laboratoryData") {
    func.displayName = "PlasmicLaboratoryData";
  } else {
    func.displayName = `PlasmicLaboratoryData.${nodeName}`;
  }
  return func;
}

export const PlasmicLaboratoryData = Object.assign(
  // Top-level PlasmicLaboratoryData renders the root element
  makeNodeComponent("laboratoryData"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    header: makeNodeComponent("header"),
    patientDataApiFetcher: makeNodeComponent("patientDataApiFetcher"),
    normalRangeButton: makeNodeComponent("normalRangeButton"),
    normalRangeButtonCircle: makeNodeComponent("normalRangeButtonCircle"),
    labData: makeNodeComponent("labData"),
    laboratoryLists: makeNodeComponent("laboratoryLists"),
    labResults: makeNodeComponent("labResults"),
    checkedFactors: makeNodeComponent("checkedFactors"),
    emptyCell: makeNodeComponent("emptyCell"),
    factorName: makeNodeComponent("factorName"),
    laboratoryResultsPerTitle: makeNodeComponent("laboratoryResultsPerTitle"),
    labPerDate: makeNodeComponent("labPerDate"),
    issuedDatetime: makeNodeComponent("issuedDatetime"),
    labLists: makeNodeComponent("labLists"),
    factorNamevalue: makeNodeComponent("factorNamevalue"),
    normalFactorValue: makeNodeComponent("normalFactorValue"),
    abnormalFactorValue: makeNodeComponent("abnormalFactorValue"),
    normalRanged: makeNodeComponent("normalRanged"),
    antibiogramData: makeNodeComponent("antibiogramData"),
    antibiogramPerDate: makeNodeComponent("antibiogramPerDate"),
    datetimename: makeNodeComponent("datetimename"),
    datetime: makeNodeComponent("datetime"),
    antibiogram: makeNodeComponent("antibiogram"),
    antibioticName: makeNodeComponent("antibioticName"),
    antibioticResult: makeNodeComponent("antibioticResult"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    homepage: makeNodeComponent("homepage"),
    patientProfile: makeNodeComponent("patientProfile"),
    radiologyReport: makeNodeComponent("radiologyReport"),
    laboratoryPage2: makeNodeComponent("laboratoryPage2"),
    onloadUserPatientInteractionCount: makeNodeComponent(
      "onloadUserPatientInteractionCount"
    ),

    // Metadata about props expected for PlasmicLaboratoryData
    internalVariantProps: PlasmicLaboratoryData__VariantProps,
    internalArgProps: PlasmicLaboratoryData__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLaboratoryData;
/* prettier-ignore-end */
