// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: YivXi3wItkax

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component
import RedirectToLoginPage from "../../RedirectToLoginPage"; // plasmic-import: 0wFpBWYaqpsM/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: aXAcva2etiX1/component
import OnloadUserPatientInteractionCount from "../../OnloadUserPatientInteractionCount"; // plasmic-import: 6oEGl3M40QrL/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicLaboratoryData.module.css"; // plasmic-import: YivXi3wItkax/css

import ArrowLeftIcon from "./icons/PlasmicIcon__ArrowLeft"; // plasmic-import: OPwXrI9x1012/icon

createPlasmicElementProxy;

export type PlasmicLaboratoryData__VariantMembers = {};
export type PlasmicLaboratoryData__VariantsArgs = {};
type VariantPropType = keyof PlasmicLaboratoryData__VariantsArgs;
export const PlasmicLaboratoryData__VariantProps = new Array<VariantPropType>();

export type PlasmicLaboratoryData__ArgsType = {};
type ArgPropType = keyof PlasmicLaboratoryData__ArgsType;
export const PlasmicLaboratoryData__ArgProps = new Array<ArgPropType>();

export type PlasmicLaboratoryData__OverridesType = {
  laboratoryData?: Flex__<"div">;
  header?: Flex__<"div">;
  svg?: Flex__<"svg">;
  labData?: Flex__<typeof ApiFetcherComponent>;
  laboratoryLists?: Flex__<"div">;
  laboratoryTitle?: Flex__<"div">;
  laboratoryResultsPerTitle?: Flex__<"div">;
  labPerDate?: Flex__<"div">;
  dateOfReport?: Flex__<"div">;
  labLists?: Flex__<"div">;
  factorNamevalue?: Flex__<"div">;
  factorNamevalue2?: Flex__<"div">;
  factorName?: Flex__<"div">;
  factorValue?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  redirectToLoginPage?: Flex__<typeof RedirectToLoginPage>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  onloadUserPatientInteractionCount?: Flex__<
    typeof OnloadUserPatientInteractionCount
  >;
};

export interface DefaultLaboratoryDataProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLaboratoryData__RenderFunc(props: {
  variants: PlasmicLaboratoryData__VariantsArgs;
  args: PlasmicLaboratoryData__ArgsType;
  overrides: PlasmicLaboratoryData__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"laboratoryData"}
        data-plasmic-override={overrides.laboratoryData}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.laboratoryData
        )}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          {false ? (
            <ArrowLeftIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/patients` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              role={"img"}
            />
          ) : null}
        </div>
        <ApiFetcherComponent
          data-plasmic-name={"labData"}
          data-plasmic-override={overrides.labData}
          className={classNames("__wab_instance", sty.labData)}
          headers={(() => {
            try {
              return {
                "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          method={"GET"}
          path={`/api/v2/patient/${$ctx.params.code}/raw_lab_tests/recent?offset=0&limit=20`}
          ref={ref => {
            $refs["labData"] = ref;
          }}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                {$ctx.fetched_data.loading == false &&
                $ctx.fetched_data.data.lab_test_groups == 0 ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vcc6L
                    )}
                  >
                    {
                      "\u0622\u0632\u0645\u0627\u06cc\u0634\u06cc \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
                    }
                  </div>
                ) : null}
                {$ctx.fetched_data.loading == true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__woDte
                    )}
                  >
                    {
                      "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                    }
                  </div>
                ) : null}
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.fetched_data.data.lab_test_groups;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"laboratoryLists"}
                      data-plasmic-override={overrides.laboratoryLists}
                      className={classNames(
                        projectcss.all,
                        sty.laboratoryLists
                      )}
                      key={currentIndex}
                    >
                      <div
                        data-plasmic-name={"laboratoryTitle"}
                        data-plasmic-override={overrides.laboratoryTitle}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.laboratoryTitle
                        )}
                      >
                        <React.Fragment>
                          {currentItem.title.replace(" (  # ) ", "")}
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"laboratoryResultsPerTitle"}
                        data-plasmic-override={
                          overrides.laboratoryResultsPerTitle
                        }
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.laboratoryResultsPerTitle
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return currentItem.results;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"labPerDate"}
                              data-plasmic-override={overrides.labPerDate}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.labPerDate
                              )}
                              key={currentIndex}
                            >
                              <div
                                data-plasmic-name={"dateOfReport"}
                                data-plasmic-override={overrides.dateOfReport}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.dateOfReport
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const gregorianDate = new Date(
                                          currentItem.report_datetime
                                        );
                                        const shamsiDate =
                                          new Intl.DateTimeFormat(
                                            "fa-IR"
                                          ).format(gregorianDate);
                                        const englishNumbers =
                                          shamsiDate.replace(
                                            /[\u0660-\u0669]/g,
                                            c =>
                                              String.fromCharCode(
                                                c.charCodeAt(0) -
                                                  0x0660 +
                                                  0x0030
                                              )
                                          );
                                        return englishNumbers;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.values;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_2, __plasmic_idx_2) => {
                                const currentItem = __plasmic_item_2;
                                const currentIndex = __plasmic_idx_2;
                                return (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"labLists"}
                                    data-plasmic-override={overrides.labLists}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.labLists
                                    )}
                                    key={currentIndex}
                                  >
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"factorNamevalue"}
                                      data-plasmic-override={
                                        overrides.factorNamevalue
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.factorNamevalue
                                      )}
                                    >
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"factorNamevalue2"}
                                        data-plasmic-override={
                                          overrides.factorNamevalue2
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.factorNamevalue2
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"factorName"}
                                          data-plasmic-override={
                                            overrides.factorName
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.factorName
                                          )}
                                        >
                                          <React.Fragment>
                                            {currentItem.factor_name.replace(
                                              " (  # )",
                                              "",
                                              "(#*)"
                                            )}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          data-plasmic-name={"factorValue"}
                                          data-plasmic-override={
                                            overrides.factorValue
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.factorValue
                                          )}
                                        >
                                          <React.Fragment>
                                            {currentItem.value}
                                          </React.Fragment>
                                        </div>
                                      </Stack__>
                                    </Stack__>
                                  </Stack__>
                                );
                              })}
                            </Stack__>
                          );
                        })}
                      </Stack__>
                    </div>
                  );
                })}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </ApiFetcherComponent>
        <div
          data-plasmic-name={"switchingTabs"}
          data-plasmic-override={overrides.switchingTabs}
          className={classNames(projectcss.all, sty.switchingTabs)}
        >
          <SwitchingTab
            data-plasmic-name={"switchingTab"}
            data-plasmic-override={overrides.switchingTab}
            className={classNames("__wab_instance", sty.switchingTab)}
          />
        </div>
        <RedirectToLoginPage
          data-plasmic-name={"redirectToLoginPage"}
          data-plasmic-override={overrides.redirectToLoginPage}
          className={classNames("__wab_instance", sty.redirectToLoginPage)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <OnloadUserPatientInteractionCount
          data-plasmic-name={"onloadUserPatientInteractionCount"}
          data-plasmic-override={overrides.onloadUserPatientInteractionCount}
          className={classNames(
            "__wab_instance",
            sty.onloadUserPatientInteractionCount
          )}
          patientIdForOnloadUserPatientInteractionCount={(() => {
            try {
              return $ctx.params.code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  laboratoryData: [
    "laboratoryData",
    "header",
    "svg",
    "labData",
    "laboratoryLists",
    "laboratoryTitle",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "dateOfReport",
    "labLists",
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue",
    "switchingTabs",
    "switchingTab",
    "redirectToLoginPage",
    "redirectToNamespaceSelection",
    "onloadUserPatientInteractionCount"
  ],
  header: ["header", "svg"],
  svg: ["svg"],
  labData: [
    "labData",
    "laboratoryLists",
    "laboratoryTitle",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "dateOfReport",
    "labLists",
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue"
  ],
  laboratoryLists: [
    "laboratoryLists",
    "laboratoryTitle",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "dateOfReport",
    "labLists",
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue"
  ],
  laboratoryTitle: ["laboratoryTitle"],
  laboratoryResultsPerTitle: [
    "laboratoryResultsPerTitle",
    "labPerDate",
    "dateOfReport",
    "labLists",
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue"
  ],
  labPerDate: [
    "labPerDate",
    "dateOfReport",
    "labLists",
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue"
  ],
  dateOfReport: ["dateOfReport"],
  labLists: [
    "labLists",
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue"
  ],
  factorNamevalue: [
    "factorNamevalue",
    "factorNamevalue2",
    "factorName",
    "factorValue"
  ],
  factorNamevalue2: ["factorNamevalue2", "factorName", "factorValue"],
  factorName: ["factorName"],
  factorValue: ["factorValue"],
  switchingTabs: ["switchingTabs", "switchingTab"],
  switchingTab: ["switchingTab"],
  redirectToLoginPage: ["redirectToLoginPage"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  onloadUserPatientInteractionCount: ["onloadUserPatientInteractionCount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  laboratoryData: "div";
  header: "div";
  svg: "svg";
  labData: typeof ApiFetcherComponent;
  laboratoryLists: "div";
  laboratoryTitle: "div";
  laboratoryResultsPerTitle: "div";
  labPerDate: "div";
  dateOfReport: "div";
  labLists: "div";
  factorNamevalue: "div";
  factorNamevalue2: "div";
  factorName: "div";
  factorValue: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  redirectToLoginPage: typeof RedirectToLoginPage;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  onloadUserPatientInteractionCount: typeof OnloadUserPatientInteractionCount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLaboratoryData__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLaboratoryData__VariantsArgs;
    args?: PlasmicLaboratoryData__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLaboratoryData__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLaboratoryData__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLaboratoryData__ArgProps,
          internalVariantPropNames: PlasmicLaboratoryData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLaboratoryData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "laboratoryData") {
    func.displayName = "PlasmicLaboratoryData";
  } else {
    func.displayName = `PlasmicLaboratoryData.${nodeName}`;
  }
  return func;
}

export const PlasmicLaboratoryData = Object.assign(
  // Top-level PlasmicLaboratoryData renders the root element
  makeNodeComponent("laboratoryData"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    svg: makeNodeComponent("svg"),
    labData: makeNodeComponent("labData"),
    laboratoryLists: makeNodeComponent("laboratoryLists"),
    laboratoryTitle: makeNodeComponent("laboratoryTitle"),
    laboratoryResultsPerTitle: makeNodeComponent("laboratoryResultsPerTitle"),
    labPerDate: makeNodeComponent("labPerDate"),
    dateOfReport: makeNodeComponent("dateOfReport"),
    labLists: makeNodeComponent("labLists"),
    factorNamevalue: makeNodeComponent("factorNamevalue"),
    factorNamevalue2: makeNodeComponent("factorNamevalue2"),
    factorName: makeNodeComponent("factorName"),
    factorValue: makeNodeComponent("factorValue"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    redirectToLoginPage: makeNodeComponent("redirectToLoginPage"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    onloadUserPatientInteractionCount: makeNodeComponent(
      "onloadUserPatientInteractionCount"
    ),

    // Metadata about props expected for PlasmicLaboratoryData
    internalVariantProps: PlasmicLaboratoryData__VariantProps,
    internalArgProps: PlasmicLaboratoryData__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLaboratoryData;
/* prettier-ignore-end */
