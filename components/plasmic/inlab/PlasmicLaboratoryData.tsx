// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: YivXi3wItkax

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicLaboratoryData.module.css"; // plasmic-import: YivXi3wItkax/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: YIqBWKHX3AVs/icon
import Icons8ClosesvgIcon from "./icons/PlasmicIcon__Icons8Closesvg"; // plasmic-import: -xG_spDBispP/icon

createPlasmicElementProxy;

export type PlasmicLaboratoryData__VariantMembers = {
  viewNormalRange: "viewNormalRange";
  bookmarkedPatient: "bookmarkedPatient";
};
export type PlasmicLaboratoryData__VariantsArgs = {
  viewNormalRange?: SingleBooleanChoiceArg<"viewNormalRange">;
  bookmarkedPatient?: SingleBooleanChoiceArg<"bookmarkedPatient">;
};
type VariantPropType = keyof PlasmicLaboratoryData__VariantsArgs;
export const PlasmicLaboratoryData__VariantProps = new Array<VariantPropType>(
  "viewNormalRange",
  "bookmarkedPatient"
);

export type PlasmicLaboratoryData__ArgsType = {};
type ArgPropType = keyof PlasmicLaboratoryData__ArgsType;
export const PlasmicLaboratoryData__ArgProps = new Array<ArgPropType>();

export type PlasmicLaboratoryData__OverridesType = {
  laboratoryData?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  header?: Flex__<"div">;
  patientDataApiFetcher?: Flex__<typeof ApiFetcherComponent>;
  patientNameagegender?: Flex__<"div">;
  saveAdmissionDatetime?: Flex__<typeof SideEffect>;
  normalRangeButton?: Flex__<"div">;
  normalRangeButtonCircle?: Flex__<"div">;
  tabButtons?: Flex__<"div">;
  checkedFactor?: Flex__<typeof Button>;
  newFeatureTag?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  laboratoryResult?: Flex__<typeof Button>;
  labData?: Flex__<typeof ApiFetcherComponent>;
  searchLabName?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  antibiogramData?: Flex__<typeof ApiFetcherComponent>;
  antibiogramPerDate?: Flex__<"div">;
  datetimename?: Flex__<"div">;
  antibiogramGroupName?: Flex__<"div">;
  datetime?: Flex__<"div">;
  antibiogram?: Flex__<"div">;
  antibioticName?: Flex__<"div">;
  antibioticResult?: Flex__<"div">;
  laboratoryLists?: Flex__<"div">;
  labResults?: Flex__<"div">;
  checkedFactors?: Flex__<"div">;
  labGroupName?: Flex__<"div">;
  factorName?: Flex__<"div">;
  laboratoryResultsPerTitle?: Flex__<"div">;
  labPerDate?: Flex__<"div">;
  issuedDatetime?: Flex__<"div">;
  labLists?: Flex__<"div">;
  factorNamevalue?: Flex__<"div">;
  normalFactorValue?: Flex__<"div">;
  abnormalFactorValue?: Flex__<"div">;
  normalRanged?: Flex__<"div">;
  overlayLayer?: Flex__<"div">;
  checkedFactorsApiFetcher?: Flex__<typeof ApiFetcherComponent>;
  labFactorList?: Flex__<"div">;
  labFactorPerDate?: Flex__<"div">;
  labFactorDatetime?: Flex__<"div">;
  factorsList?: Flex__<"div">;
  factor?: Flex__<typeof AntdSingleCollapse>;
  factorName2?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  homepage?: Flex__<typeof PlasmicImg__>;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  radiologyReport?: Flex__<typeof PlasmicImg__>;
  laboratoryPage2?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultLaboratoryDataProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLaboratoryData__RenderFunc(props: {
  variants: PlasmicLaboratoryData__VariantsArgs;
  args: PlasmicLaboratoryData__ArgsType;
  overrides: PlasmicLaboratoryData__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "viewNormalRange",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.viewNormalRange
      },
      {
        path: "bookmarkedPatient",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.bookmarkedPatient
      },
      {
        path: "admissionDatetime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "searchLabName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkedFactor.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkedFactor.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedTab == "CheckedFactors";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "checkedFactor.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedTab !== "CheckedFactors";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "checkedFactor.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkedFactor.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "laboratoryResult.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "laboratoryResult.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedTab == "LabTestResult";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "laboratoryResult.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedTab !== "LabTestResult";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "laboratoryResult.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "laboratoryResult.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "LabTestResult";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "factor[][].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "button.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"laboratoryData"}
        data-plasmic-override={overrides.laboratoryData}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.laboratoryData,
          {
            [sty.laboratoryDatabookmarkedPatient]: hasVariant(
              $state,
              "bookmarkedPatient",
              "bookmarkedPatient"
            ),
            [sty.laboratoryDataviewNormalRange]: hasVariant(
              $state,
              "viewNormalRange",
              "viewNormalRange"
            ),
            [sty.laboratoryDataviewNormalRange_bookmarkedPatient]:
              hasVariant($state, "bookmarkedPatient", "bookmarkedPatient") &&
              hasVariant($state, "viewNormalRange", "viewNormalRange")
          }
        )}
      >
        <RedirectToInlabLogin
          data-plasmic-name={"redirectToInlabLogin"}
          data-plasmic-override={overrides.redirectToInlabLogin}
          className={classNames("__wab_instance", sty.redirectToInlabLogin)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <ApiFetcherComponent
            data-plasmic-name={"patientDataApiFetcher"}
            data-plasmic-override={overrides.patientDataApiFetcher}
            className={classNames("__wab_instance", sty.patientDataApiFetcher)}
            delay={50}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v2/patient/${$ctx.params.code}`}
            ref={ref => {
              $refs["patientDataApiFetcher"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    data-plasmic-name={"patientNameagegender"}
                    data-plasmic-override={overrides.patientNameagegender}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.patientNameagegender,
                      {
                        [sty.patientNameagegenderviewNormalRange]: hasVariant(
                          $state,
                          "viewNormalRange",
                          "viewNormalRange"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {$ctx.fetched_data.loading == false &&
                        (() => {
                          const dob = new Date($ctx.fetched_data.data.dob);
                          const ageDiffMs = Date.now() - dob.getTime();
                          const ageDate = new Date(ageDiffMs);
                          const ageYears = Math.abs(
                            ageDate.getUTCFullYear() - 1970
                          );
                          const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                          if (ageYears < 1) {
                            const ageMonths = ageDate.getUTCMonth();
                            return `${fullName} 
${ageMonths} months ${
                              $ctx.fetched_data.data.gender === "F"
                                ? " ♀️"
                                : $ctx.fetched_data.data.gender === "M"
                                ? " ♂️"
                                : ""
                            }`;
                          } else {
                            return `${fullName} ${ageYears}${
                              $ctx.fetched_data.data.gender === "F"
                                ? " ♀️"
                                : $ctx.fetched_data.data.gender === "M"
                                ? " ♂️"
                                : ""
                            }`;
                          }
                        })()}
                    </React.Fragment>
                  </div>
                  <SideEffect
                    data-plasmic-name={"saveAdmissionDatetime"}
                    data-plasmic-override={overrides.saveAdmissionDatetime}
                    className={classNames(
                      "__wab_instance",
                      sty.saveAdmissionDatetime
                    )}
                    onMount={async () => {
                      const $steps = {};

                      $steps["updateAdmissionDatetime"] =
                        $ctx.fetched_data.loading == false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["admissionDatetime"]
                                },
                                operation: 0,
                                value: $ctx.fetched_data.data.admission_datetime
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateAdmissionDatetime"] != null &&
                        typeof $steps["updateAdmissionDatetime"] === "object" &&
                        typeof $steps["updateAdmissionDatetime"].then ===
                          "function"
                      ) {
                        $steps["updateAdmissionDatetime"] = await $steps[
                          "updateAdmissionDatetime"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
          <div
            data-plasmic-name={"normalRangeButton"}
            data-plasmic-override={overrides.normalRangeButton}
            className={classNames(projectcss.all, sty.normalRangeButton, {
              [sty.normalRangeButtonviewNormalRange]: hasVariant(
                $state,
                "viewNormalRange",
                "viewNormalRange"
              )
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateViewNormalRange"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "viewNormalRange",
                      operation: 2,
                      value: "viewNormalRange"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateViewNormalRange"] != null &&
                typeof $steps["updateViewNormalRange"] === "object" &&
                typeof $steps["updateViewNormalRange"].then === "function"
              ) {
                $steps["updateViewNormalRange"] = await $steps[
                  "updateViewNormalRange"
                ];
              }
            }}
          >
            <div
              data-plasmic-name={"normalRangeButtonCircle"}
              data-plasmic-override={overrides.normalRangeButtonCircle}
              className={classNames(
                projectcss.all,
                sty.normalRangeButtonCircle,
                {
                  [sty.normalRangeButtonCircleviewNormalRange]: hasVariant(
                    $state,
                    "viewNormalRange",
                    "viewNormalRange"
                  )
                }
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oI3Bw,
                {
                  [sty.textviewNormalRange__oI3BwBwg80]: hasVariant(
                    $state,
                    "viewNormalRange",
                    "viewNormalRange"
                  )
                }
              )}
            >
              {"Normal Ranges"}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__pziWk, {
                [sty.freeBoxviewNormalRange__pziWkBwg80]: hasVariant(
                  $state,
                  "viewNormalRange",
                  "viewNormalRange"
                )
              })}
            />
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"tabButtons"}
          data-plasmic-override={overrides.tabButtons}
          hasGap={true}
          className={classNames(projectcss.all, sty.tabButtons)}
        >
          <Button
            data-plasmic-name={"checkedFactor"}
            data-plasmic-override={overrides.checkedFactor}
            className={classNames("__wab_instance", sty.checkedFactor)}
            deselected={generateStateValueProp($state, [
              "checkedFactor",
              "deselected"
            ])}
            isDisabled={generateStateValueProp($state, [
              "checkedFactor",
              "isDisabled"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["updateCheckedFactors2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selectedTab"]
                      },
                      operation: 0,
                      value: "CheckedFactors"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCheckedFactors2"] != null &&
                typeof $steps["updateCheckedFactors2"] === "object" &&
                typeof $steps["updateCheckedFactors2"].then === "function"
              ) {
                $steps["updateCheckedFactors2"] = await $steps[
                  "updateCheckedFactors2"
                ];
              }
            }}
            onDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "checkedFactor",
                "deselected"
              ])(eventArgs[0]);
            }}
            onIsDisabledChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "checkedFactor",
                "isDisabled"
              ])(eventArgs[0]);
            }}
            onSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["checkedFactor", "selected"])(
                eventArgs[0]
              );
            }}
            onSortDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "checkedFactor",
                "sortDeselected"
              ])(eventArgs[0]);
            }}
            onSortSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "checkedFactor",
                "sortSelected"
              ])(eventArgs[0]);
            }}
            selected={generateStateValueProp($state, [
              "checkedFactor",
              "selected"
            ])}
            sortDeselected={generateStateValueProp($state, [
              "checkedFactor",
              "sortDeselected"
            ])}
            sortSelected={generateStateValueProp($state, [
              "checkedFactor",
              "sortSelected"
            ])}
          >
            <div
              data-plasmic-name={"newFeatureTag"}
              data-plasmic-override={overrides.newFeatureTag}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.newFeatureTag
              )}
            >
              {"New"}
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              deselected={generateStateValueProp($state, [
                "button",
                "deselected"
              ])}
              isDisabled={generateStateValueProp($state, [
                "button",
                "isDisabled"
              ])}
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "deselected"])(
                  eventArgs[0]
                );
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "isDisabled"])(
                  eventArgs[0]
                );
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "selected"])(
                  eventArgs[0]
                );
              }}
              onSortDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "sortDeselected"])(
                  eventArgs[0]
                );
              }}
              onSortSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["button", "sortSelected"])(
                  eventArgs[0]
                );
              }}
              selected={generateStateValueProp($state, ["button", "selected"])}
              shape={"rounded"}
              size4={"compact"}
              sortDeselected={generateStateValueProp($state, [
                "button",
                "sortDeselected"
              ])}
              sortSelected={generateStateValueProp($state, [
                "button",
                "sortSelected"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n9GNm
                )}
              >
                {"New "}
              </div>
            </Button>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eZjWx
              )}
            >
              {
                "\u0622\u0632\u0645\u0627\u06cc\u0634 \u0647\u0627\u06cc \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u062f\u0647 "
              }
            </div>
          </Button>
          <Button
            data-plasmic-name={"laboratoryResult"}
            data-plasmic-override={overrides.laboratoryResult}
            className={classNames("__wab_instance", sty.laboratoryResult)}
            deselected={generateStateValueProp($state, [
              "laboratoryResult",
              "deselected"
            ])}
            isDisabled={generateStateValueProp($state, [
              "laboratoryResult",
              "isDisabled"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["updateSelectedTab"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selectedTab"]
                      },
                      operation: 0,
                      value: "LabTestResult"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelectedTab"] != null &&
                typeof $steps["updateSelectedTab"] === "object" &&
                typeof $steps["updateSelectedTab"].then === "function"
              ) {
                $steps["updateSelectedTab"] = await $steps["updateSelectedTab"];
              }
            }}
            onDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "laboratoryResult",
                "deselected"
              ])(eventArgs[0]);
            }}
            onIsDisabledChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "laboratoryResult",
                "isDisabled"
              ])(eventArgs[0]);
            }}
            onSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "laboratoryResult",
                "selected"
              ])(eventArgs[0]);
            }}
            onSortDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "laboratoryResult",
                "sortDeselected"
              ])(eventArgs[0]);
            }}
            onSortSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "laboratoryResult",
                "sortSelected"
              ])(eventArgs[0]);
            }}
            selected={generateStateValueProp($state, [
              "laboratoryResult",
              "selected"
            ])}
            sortDeselected={generateStateValueProp($state, [
              "laboratoryResult",
              "sortDeselected"
            ])}
            sortSelected={generateStateValueProp($state, [
              "laboratoryResult",
              "sortSelected"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p8XU0
              )}
            >
              {
                "\u0646\u062a\u0627\u06cc\u062c \u0622\u0632\u0645\u0627\u06cc\u0634 \u0647\u0627 "
              }
            </div>
          </Button>
        </Stack__>
        {$state.selectedTab === "LabTestResult" ? (
          <ApiFetcherComponent
            data-plasmic-name={"labData"}
            data-plasmic-override={overrides.labData}
            className={classNames("__wab_instance", sty.labData, {
              [sty.labDataviewNormalRange]: hasVariant(
                $state,
                "viewNormalRange",
                "viewNormalRange"
              )
            })}
            method={"GET"}
            path={`/api/v3/patient/lab/${
              $ctx.params.code
            }?namespace_id=${localStorage.getItem("inlab_user_namespace_id")}`}
            ref={ref => {
              $refs["labData"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetched_data.loading == true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__woDte
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                      }
                    </div>
                  ) : null}
                  {false ? (
                    <TextInput
                      data-plasmic-name={"searchLabName"}
                      data-plasmic-override={overrides.searchLabName}
                      className={classNames(
                        "__wab_instance",
                        sty.searchLabName
                      )}
                      endIcon={
                        $state.value !== "" ? (
                          <Icons8ClosesvgIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateSearchLabNameValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["searchLabName", "value"]
                                      },
                                      operation: 0,
                                      value: ($state.searchLabName.value = "")
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSearchLabNameValue"] != null &&
                                typeof $steps["updateSearchLabNameValue"] ===
                                  "object" &&
                                typeof $steps["updateSearchLabNameValue"]
                                  .then === "function"
                              ) {
                                $steps["updateSearchLabNameValue"] =
                                  await $steps["updateSearchLabNameValue"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "searchLabName",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        "\u0646\u0627\u0645 \u0622\u0632\u0645\u0627\u06cc\u0634 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      }
                      showEndIcon={true}
                      value={
                        generateStateValueProp($state, [
                          "searchLabName",
                          "value"
                        ]) ?? ""
                      }
                    />
                  ) : null}
                  {$ctx.fetched_data.loading == false &&
                  $ctx.fetched_data.data.lab_test_groups == 0 ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vcc6L
                      )}
                    >
                      {
                        "\u0622\u0632\u0645\u0627\u06cc\u0634\u06cc \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
                      }
                    </div>
                  ) : null}
                  <ApiFetcherComponent
                    data-plasmic-name={"antibiogramData"}
                    data-plasmic-override={overrides.antibiogramData}
                    className={classNames(
                      "__wab_instance",
                      sty.antibiogramData,
                      {
                        [sty.antibiogramDataviewNormalRange]: hasVariant(
                          $state,
                          "viewNormalRange",
                          "viewNormalRange"
                        )
                      }
                    )}
                    delay={300}
                    headers={(() => {
                      try {
                        return {
                          "X-Namespace": localStorage.getItem(
                            "inlab_user_namespace_id"
                          )
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    method={"GET"}
                    path={`/api/v3/patient/antibiogram/${$ctx.params.code}`}
                    ref={ref => {
                      $refs["antibiogramData"] = ref;
                    }}
                  >
                    <DataCtxReader__>
                      {$ctx =>
                        $ctx.fetched_data.data !== 0
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.fetched_data.data[0];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  data-plasmic-name={"antibiogramPerDate"}
                                  data-plasmic-override={
                                    overrides.antibiogramPerDate
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.antibiogramPerDate
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    data-plasmic-name={"datetimename"}
                                    data-plasmic-override={
                                      overrides.datetimename
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.datetimename
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"antibiogramGroupName"}
                                      data-plasmic-override={
                                        overrides.antibiogramGroupName
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.antibiogramGroupName
                                      )}
                                    >
                                      <React.Fragment>
                                        {currentItem.gname}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      data-plasmic-name={"datetime"}
                                      data-plasmic-override={overrides.datetime}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.datetime
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.answer_datetime_jalali_str;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return currentItem.labgiveanti_set;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                    const currentItem = __plasmic_item_1;
                                    const currentIndex = __plasmic_idx_1;
                                    return (
                                      <div
                                        data-plasmic-name={"antibiogram"}
                                        data-plasmic-override={
                                          overrides.antibiogram
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.antibiogram
                                        )}
                                        key={currentIndex}
                                      >
                                        <div
                                          data-plasmic-name={"antibioticName"}
                                          data-plasmic-override={
                                            overrides.antibioticName
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.antibioticName
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.labgiveanti_name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          data-plasmic-name={"antibioticResult"}
                                          data-plasmic-override={
                                            overrides.antibioticResult
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.antibioticResult
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.labgiveanti_status;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              );
                            })
                          : null
                      }
                    </DataCtxReader__>
                  </ApiFetcherComponent>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx.fetched_data.data.lab_test_groups;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"laboratoryLists"}
                        data-plasmic-override={overrides.laboratoryLists}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.laboratoryLists,
                          {
                            [sty.laboratoryListsviewNormalRange]: hasVariant(
                              $state,
                              "viewNormalRange",
                              "viewNormalRange"
                            )
                          }
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b1Ehi
                          )}
                        />

                        <div
                          data-plasmic-name={"labResults"}
                          data-plasmic-override={overrides.labResults}
                          className={classNames(
                            projectcss.all,
                            sty.labResults,
                            {
                              [sty.labResultsviewNormalRange]: hasVariant(
                                $state,
                                "viewNormalRange",
                                "viewNormalRange"
                              )
                            }
                          )}
                        >
                          <div
                            data-plasmic-name={"checkedFactors"}
                            data-plasmic-override={overrides.checkedFactors}
                            className={classNames(
                              projectcss.all,
                              sty.checkedFactors,
                              {
                                [sty.checkedFactorsviewNormalRange]: hasVariant(
                                  $state,
                                  "viewNormalRange",
                                  "viewNormalRange"
                                )
                              }
                            )}
                          >
                            {(() => {
                              try {
                                return currentItem != null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"labGroupName"}
                                data-plasmic-override={overrides.labGroupName}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.labGroupName,
                                  {
                                    [sty.labGroupNameviewNormalRange]:
                                      hasVariant(
                                        $state,
                                        "viewNormalRange",
                                        "viewNormalRange"
                                      )
                                  }
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.title
                                        .replace(" (  #* ) ", "")
                                        .replace(" (  # ) ", "")
                                        .replace("( #)", "")
                                        .replace("( #*)", "")
                                        .replace("* ( #*)", "")
                                        .replace("(  #* )", "");
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ) : null}
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return currentItem.factors;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  data-plasmic-name={"factorName"}
                                  data-plasmic-override={overrides.factorName}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.factorName,
                                    {
                                      [sty.factorNameviewNormalRange]:
                                        hasVariant(
                                          $state,
                                          "viewNormalRange",
                                          "viewNormalRange"
                                        )
                                    }
                                  )}
                                  key={currentIndex}
                                >
                                  <React.Fragment>
                                    {currentItem.name
                                      .replace(" (  #* ) ", "")
                                      .replace(" (  # ) ", "")
                                      .replace("( #)", "")
                                      .replace("( #*)", "")
                                      .replace("* ( #*)", "")
                                      .replace("(  #* )", "")
                                      .replace("* ( #* )", "")
                                      .replace("( #* )", "")}
                                  </React.Fragment>
                                </div>
                              );
                            })}
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"laboratoryResultsPerTitle"}
                            data-plasmic-override={
                              overrides.laboratoryResultsPerTitle
                            }
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.laboratoryResultsPerTitle,
                              {
                                [sty.laboratoryResultsPerTitleviewNormalRange]:
                                  hasVariant(
                                    $state,
                                    "viewNormalRange",
                                    "viewNormalRange"
                                  )
                              }
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return currentItem.results;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"labPerDate"}
                                  data-plasmic-override={overrides.labPerDate}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.labPerDate,
                                    {
                                      [sty.labPerDateviewNormalRange]:
                                        hasVariant(
                                          $state,
                                          "viewNormalRange",
                                          "viewNormalRange"
                                        )
                                    }
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    data-plasmic-name={"issuedDatetime"}
                                    data-plasmic-override={
                                      overrides.issuedDatetime
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.issuedDatetime,
                                      {
                                        [sty.issuedDatetimeviewNormalRange]:
                                          hasVariant(
                                            $state,
                                            "viewNormalRange",
                                            "viewNormalRange"
                                          )
                                      }
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const gregorianDate = new Date(
                                              currentItem.issued_datetime
                                            );
                                            const shamsiDate =
                                              new Intl.DateTimeFormat(
                                                "fa-IR"
                                              ).format(gregorianDate);
                                            const shamsiTime =
                                              gregorianDate.toLocaleTimeString(
                                                "fa-IR",
                                                { hour12: false }
                                              );
                                            const englishDate =
                                              shamsiDate.replace(/[۰-۹]/g, d =>
                                                String.fromCharCode(
                                                  d.charCodeAt(0) - 1728
                                                )
                                              );

                                            // Extracting only the hour and minutes from shamsiTime
                                            const englishTime = shamsiTime
                                              .split(":")
                                              .slice(0, 2)
                                              .join(":")
                                              .replace(/[۰-۹]/g, d =>
                                                String.fromCharCode(
                                                  d.charCodeAt(0) - 1728
                                                )
                                              );

                                            return `${englishDate} ${englishTime}`;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return currentItem.values;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_2, __plasmic_idx_2) => {
                                    const currentItem = __plasmic_item_2;
                                    const currentIndex = __plasmic_idx_2;
                                    return (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"labLists"}
                                        data-plasmic-override={
                                          overrides.labLists
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.labLists,
                                          {
                                            [sty.labListsviewNormalRange]:
                                              hasVariant(
                                                $state,
                                                "viewNormalRange",
                                                "viewNormalRange"
                                              )
                                          }
                                        )}
                                        key={currentIndex}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"factorNamevalue"}
                                          data-plasmic-override={
                                            overrides.factorNamevalue
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.factorNamevalue,
                                            {
                                              [sty.factorNamevalueviewNormalRange]:
                                                hasVariant(
                                                  $state,
                                                  "viewNormalRange",
                                                  "viewNormalRange"
                                                )
                                            }
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___4Tel,
                                              {
                                                [sty.freeBoxviewNormalRange___4TelBwg80]:
                                                  hasVariant(
                                                    $state,
                                                    "viewNormalRange",
                                                    "viewNormalRange"
                                                  )
                                              }
                                            )}
                                          >
                                            {currentItem.abnormal == false ? (
                                              <div
                                                data-plasmic-name={
                                                  "normalFactorValue"
                                                }
                                                data-plasmic-override={
                                                  overrides.normalFactorValue
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.normalFactorValue,
                                                  {
                                                    [sty.normalFactorValueviewNormalRange]:
                                                      hasVariant(
                                                        $state,
                                                        "viewNormalRange",
                                                        "viewNormalRange"
                                                      )
                                                  }
                                                )}
                                              >
                                                <React.Fragment>
                                                  {currentItem.value}
                                                </React.Fragment>
                                              </div>
                                            ) : null}
                                            {currentItem.abnormal == true ? (
                                              <div
                                                data-plasmic-name={
                                                  "abnormalFactorValue"
                                                }
                                                data-plasmic-override={
                                                  overrides.abnormalFactorValue
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.abnormalFactorValue,
                                                  {
                                                    [sty.abnormalFactorValueviewNormalRange]:
                                                      hasVariant(
                                                        $state,
                                                        "viewNormalRange",
                                                        "viewNormalRange"
                                                      )
                                                  }
                                                )}
                                              >
                                                <React.Fragment>
                                                  {currentItem.value}
                                                </React.Fragment>
                                              </div>
                                            ) : null}
                                            <div
                                              data-plasmic-name={"normalRanged"}
                                              data-plasmic-override={
                                                overrides.normalRanged
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.normalRanged,
                                                {
                                                  [sty.normalRangedviewNormalRange]:
                                                    hasVariant(
                                                      $state,
                                                      "viewNormalRange",
                                                      "viewNormalRange"
                                                    )
                                                }
                                              )}
                                            >
                                              <React.Fragment>
                                                {currentItem.normal_range}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </Stack__>
                                      </Stack__>
                                    );
                                  })}
                                  {new Date(currentItem.issued_datetime) <
                                  new Date($state.admissionDatetime) ? (
                                    <div
                                      data-plasmic-name={"overlayLayer"}
                                      data-plasmic-override={
                                        overrides.overlayLayer
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.overlayLayer
                                      )}
                                    >
                                      {""}
                                    </div>
                                  ) : null}
                                </Stack__>
                              );
                            })}
                          </Stack__>
                        </div>
                      </Stack__>
                    );
                  })}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        ) : null}
        {$state.selectedTab === "CheckedFactors" ? (
          <ApiFetcherComponent
            data-plasmic-name={"checkedFactorsApiFetcher"}
            data-plasmic-override={overrides.checkedFactorsApiFetcher}
            className={classNames(
              "__wab_instance",
              sty.checkedFactorsApiFetcher
            )}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v3/patient/lab_factors/${$ctx.params.adm_id}`}
            ref={ref => {
              $refs["checkedFactorsApiFetcher"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {$ctx.fetched_data.loading == true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bmUQf
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                      }
                    </div>
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"labFactorList"}
                    data-plasmic-override={overrides.labFactorList}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.labFactorList)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetched_data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"labFactorPerDate"}
                          data-plasmic-override={overrides.labFactorPerDate}
                          className={classNames(
                            projectcss.all,
                            sty.labFactorPerDate
                          )}
                          key={currentIndex}
                        >
                          <div
                            data-plasmic-name={"labFactorDatetime"}
                            data-plasmic-override={overrides.labFactorDatetime}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.labFactorDatetime
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.issued_datetime;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"factorsList"}
                            data-plasmic-override={overrides.factorsList}
                            className={classNames(
                              projectcss.all,
                              sty.factorsList
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return currentItem.lab_groups;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___1NlKt
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__irl0O
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__xC6Cb
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          bordered: true,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.factor
                                          ),
                                          defaultOpen: false,
                                          headerClass: classNames({
                                            [sty["pcls_q2lYXHR-r9ME"]]: true
                                          }),
                                          label2: (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.gname;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Collapse Header";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          ),
                                          onChange:
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "open",
                                              [
                                                "factor",
                                                __plasmic_idx_0,
                                                __plasmic_idx_1,
                                                "open"
                                              ],
                                              AntdSingleCollapse_Helpers
                                            ),
                                          open: generateStateValueProp($state, [
                                            "factor",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "open"
                                          ]),
                                          showArrow: true
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "open",
                                              plasmicStateName:
                                                "factor[][].open"
                                            }
                                          ],
                                          [__plasmic_idx_0, __plasmic_idx_1],
                                          AntdSingleCollapse_Helpers ?? {},
                                          child$Props
                                        );
                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "factor[][].open",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => false
                                            }
                                          ],
                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <AntdSingleCollapse
                                            data-plasmic-name={"factor"}
                                            data-plasmic-override={
                                              overrides.factor
                                            }
                                            {...child$Props}
                                          >
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return currentItem.lab_results;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_2,
                                                __plasmic_idx_2
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_2;
                                                const currentIndex =
                                                  __plasmic_idx_2;
                                                return (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__fxDb6
                                                    )}
                                                    key={currentIndex}
                                                  >
                                                    <div
                                                      data-plasmic-name={
                                                        "factorName2"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.factorName2
                                                      }
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.factorName2
                                                      )}
                                                    >
                                                      <React.Fragment>
                                                        {(() => {
                                                          try {
                                                            return currentItem.tname;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return "Collapsible text...";
                                                            }
                                                            throw e;
                                                          }
                                                        })()}
                                                      </React.Fragment>
                                                    </div>
                                                  </div>
                                                );
                                              }
                                            )}
                                          </AntdSingleCollapse>
                                        );
                                      })()}
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    })}
                  </Stack__>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        ) : null}
        <div
          data-plasmic-name={"switchingTabs"}
          data-plasmic-override={overrides.switchingTabs}
          className={classNames(projectcss.all, sty.switchingTabs)}
        >
          <SwitchingTab
            data-plasmic-name={"switchingTab"}
            data-plasmic-override={overrides.switchingTab}
            className={classNames("__wab_instance", sty.switchingTab)}
          >
            <PlasmicImg__
              data-plasmic-name={"homepage"}
              data-plasmic-override={overrides.homepage}
              alt={""}
              className={classNames(sty.homepage)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/patients` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/icons8Home1Svg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"patientProfile"}
              data-plasmic-override={overrides.patientProfile}
              alt={""}
              className={classNames(sty.patientProfile)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPatientProfile"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/profile/${(() => {
                          try {
                            return $ctx.params.adm_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPatientProfile"] != null &&
                  typeof $steps["goToPatientProfile"] === "object" &&
                  typeof $steps["goToPatientProfile"].then === "function"
                ) {
                  $steps["goToPatientProfile"] = await $steps[
                    "goToPatientProfile"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group2063.svg",
                fullWidth: 18.77,
                fullHeight: 20.34,
                aspectRatio: 0.904762
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"radiologyReport"}
              data-plasmic-override={overrides.radiologyReport}
              alt={""}
              className={classNames(sty.radiologyReport)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToImagingReport1"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/report/list/${(() => {
                          try {
                            return $ctx.params.adm_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToImagingReport1"] != null &&
                  typeof $steps["goToImagingReport1"] === "object" &&
                  typeof $steps["goToImagingReport1"].then === "function"
                ) {
                  $steps["goToImagingReport1"] = await $steps[
                    "goToImagingReport1"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group376.svg",
                fullWidth: 19.424,
                fullHeight: 19.98,
                aspectRatio: 1
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"laboratoryPage2"}
              data-plasmic-override={overrides.laboratoryPage2}
              alt={""}
              className={classNames(sty.laboratoryPage2)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToImagingReport1"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/lab/${(() => {
                          try {
                            return $ctx.params.adm_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToImagingReport1"] != null &&
                  typeof $steps["goToImagingReport1"] === "object" &&
                  typeof $steps["goToImagingReport1"].then === "function"
                ) {
                  $steps["goToImagingReport1"] = await $steps[
                    "goToImagingReport1"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group384.svg",
                fullWidth: 14.575,
                fullHeight: 18.692,
                aspectRatio: 0.789474
              }}
            />
          </SwitchingTab>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  laboratoryData: [
    "laboratoryData",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "header",
    "patientDataApiFetcher",
    "patientNameagegender",
    "saveAdmissionDatetime",
    "normalRangeButton",
    "normalRangeButtonCircle",
    "tabButtons",
    "checkedFactor",
    "newFeatureTag",
    "button",
    "laboratoryResult",
    "labData",
    "searchLabName",
    "svg",
    "antibiogramData",
    "antibiogramPerDate",
    "datetimename",
    "antibiogramGroupName",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult",
    "laboratoryLists",
    "labResults",
    "checkedFactors",
    "labGroupName",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "overlayLayer",
    "checkedFactorsApiFetcher",
    "labFactorList",
    "labFactorPerDate",
    "labFactorDatetime",
    "factorsList",
    "factor",
    "factorName2",
    "switchingTabs",
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratoryPage2"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  header: [
    "header",
    "patientDataApiFetcher",
    "patientNameagegender",
    "saveAdmissionDatetime",
    "normalRangeButton",
    "normalRangeButtonCircle"
  ],
  patientDataApiFetcher: [
    "patientDataApiFetcher",
    "patientNameagegender",
    "saveAdmissionDatetime"
  ],
  patientNameagegender: ["patientNameagegender"],
  saveAdmissionDatetime: ["saveAdmissionDatetime"],
  normalRangeButton: ["normalRangeButton", "normalRangeButtonCircle"],
  normalRangeButtonCircle: ["normalRangeButtonCircle"],
  tabButtons: [
    "tabButtons",
    "checkedFactor",
    "newFeatureTag",
    "button",
    "laboratoryResult"
  ],
  checkedFactor: ["checkedFactor", "newFeatureTag", "button"],
  newFeatureTag: ["newFeatureTag"],
  button: ["button"],
  laboratoryResult: ["laboratoryResult"],
  labData: [
    "labData",
    "searchLabName",
    "svg",
    "antibiogramData",
    "antibiogramPerDate",
    "datetimename",
    "antibiogramGroupName",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult",
    "laboratoryLists",
    "labResults",
    "checkedFactors",
    "labGroupName",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "overlayLayer"
  ],
  searchLabName: ["searchLabName", "svg"],
  svg: ["svg"],
  antibiogramData: [
    "antibiogramData",
    "antibiogramPerDate",
    "datetimename",
    "antibiogramGroupName",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult"
  ],
  antibiogramPerDate: [
    "antibiogramPerDate",
    "datetimename",
    "antibiogramGroupName",
    "datetime",
    "antibiogram",
    "antibioticName",
    "antibioticResult"
  ],
  datetimename: ["datetimename", "antibiogramGroupName", "datetime"],
  antibiogramGroupName: ["antibiogramGroupName"],
  datetime: ["datetime"],
  antibiogram: ["antibiogram", "antibioticName", "antibioticResult"],
  antibioticName: ["antibioticName"],
  antibioticResult: ["antibioticResult"],
  laboratoryLists: [
    "laboratoryLists",
    "labResults",
    "checkedFactors",
    "labGroupName",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "overlayLayer"
  ],
  labResults: [
    "labResults",
    "checkedFactors",
    "labGroupName",
    "factorName",
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "overlayLayer"
  ],
  checkedFactors: ["checkedFactors", "labGroupName", "factorName"],
  labGroupName: ["labGroupName"],
  factorName: ["factorName"],
  laboratoryResultsPerTitle: [
    "laboratoryResultsPerTitle",
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "overlayLayer"
  ],
  labPerDate: [
    "labPerDate",
    "issuedDatetime",
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged",
    "overlayLayer"
  ],
  issuedDatetime: ["issuedDatetime"],
  labLists: [
    "labLists",
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  factorNamevalue: [
    "factorNamevalue",
    "normalFactorValue",
    "abnormalFactorValue",
    "normalRanged"
  ],
  normalFactorValue: ["normalFactorValue"],
  abnormalFactorValue: ["abnormalFactorValue"],
  normalRanged: ["normalRanged"],
  overlayLayer: ["overlayLayer"],
  checkedFactorsApiFetcher: [
    "checkedFactorsApiFetcher",
    "labFactorList",
    "labFactorPerDate",
    "labFactorDatetime",
    "factorsList",
    "factor",
    "factorName2"
  ],
  labFactorList: [
    "labFactorList",
    "labFactorPerDate",
    "labFactorDatetime",
    "factorsList",
    "factor",
    "factorName2"
  ],
  labFactorPerDate: [
    "labFactorPerDate",
    "labFactorDatetime",
    "factorsList",
    "factor",
    "factorName2"
  ],
  labFactorDatetime: ["labFactorDatetime"],
  factorsList: ["factorsList", "factor", "factorName2"],
  factor: ["factor", "factorName2"],
  factorName2: ["factorName2"],
  switchingTabs: [
    "switchingTabs",
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratoryPage2"
  ],
  switchingTab: [
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratoryPage2"
  ],
  homepage: ["homepage"],
  patientProfile: ["patientProfile"],
  radiologyReport: ["radiologyReport"],
  laboratoryPage2: ["laboratoryPage2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  laboratoryData: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  header: "div";
  patientDataApiFetcher: typeof ApiFetcherComponent;
  patientNameagegender: "div";
  saveAdmissionDatetime: typeof SideEffect;
  normalRangeButton: "div";
  normalRangeButtonCircle: "div";
  tabButtons: "div";
  checkedFactor: typeof Button;
  newFeatureTag: "div";
  button: typeof Button;
  laboratoryResult: typeof Button;
  labData: typeof ApiFetcherComponent;
  searchLabName: typeof TextInput;
  svg: "svg";
  antibiogramData: typeof ApiFetcherComponent;
  antibiogramPerDate: "div";
  datetimename: "div";
  antibiogramGroupName: "div";
  datetime: "div";
  antibiogram: "div";
  antibioticName: "div";
  antibioticResult: "div";
  laboratoryLists: "div";
  labResults: "div";
  checkedFactors: "div";
  labGroupName: "div";
  factorName: "div";
  laboratoryResultsPerTitle: "div";
  labPerDate: "div";
  issuedDatetime: "div";
  labLists: "div";
  factorNamevalue: "div";
  normalFactorValue: "div";
  abnormalFactorValue: "div";
  normalRanged: "div";
  overlayLayer: "div";
  checkedFactorsApiFetcher: typeof ApiFetcherComponent;
  labFactorList: "div";
  labFactorPerDate: "div";
  labFactorDatetime: "div";
  factorsList: "div";
  factor: typeof AntdSingleCollapse;
  factorName2: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  homepage: typeof PlasmicImg__;
  patientProfile: typeof PlasmicImg__;
  radiologyReport: typeof PlasmicImg__;
  laboratoryPage2: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLaboratoryData__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLaboratoryData__VariantsArgs;
    args?: PlasmicLaboratoryData__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLaboratoryData__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLaboratoryData__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLaboratoryData__ArgProps,
          internalVariantPropNames: PlasmicLaboratoryData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLaboratoryData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "laboratoryData") {
    func.displayName = "PlasmicLaboratoryData";
  } else {
    func.displayName = `PlasmicLaboratoryData.${nodeName}`;
  }
  return func;
}

export const PlasmicLaboratoryData = Object.assign(
  // Top-level PlasmicLaboratoryData renders the root element
  makeNodeComponent("laboratoryData"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    header: makeNodeComponent("header"),
    patientDataApiFetcher: makeNodeComponent("patientDataApiFetcher"),
    patientNameagegender: makeNodeComponent("patientNameagegender"),
    saveAdmissionDatetime: makeNodeComponent("saveAdmissionDatetime"),
    normalRangeButton: makeNodeComponent("normalRangeButton"),
    normalRangeButtonCircle: makeNodeComponent("normalRangeButtonCircle"),
    tabButtons: makeNodeComponent("tabButtons"),
    checkedFactor: makeNodeComponent("checkedFactor"),
    newFeatureTag: makeNodeComponent("newFeatureTag"),
    button: makeNodeComponent("button"),
    laboratoryResult: makeNodeComponent("laboratoryResult"),
    labData: makeNodeComponent("labData"),
    searchLabName: makeNodeComponent("searchLabName"),
    svg: makeNodeComponent("svg"),
    antibiogramData: makeNodeComponent("antibiogramData"),
    antibiogramPerDate: makeNodeComponent("antibiogramPerDate"),
    datetimename: makeNodeComponent("datetimename"),
    antibiogramGroupName: makeNodeComponent("antibiogramGroupName"),
    datetime: makeNodeComponent("datetime"),
    antibiogram: makeNodeComponent("antibiogram"),
    antibioticName: makeNodeComponent("antibioticName"),
    antibioticResult: makeNodeComponent("antibioticResult"),
    laboratoryLists: makeNodeComponent("laboratoryLists"),
    labResults: makeNodeComponent("labResults"),
    checkedFactors: makeNodeComponent("checkedFactors"),
    labGroupName: makeNodeComponent("labGroupName"),
    factorName: makeNodeComponent("factorName"),
    laboratoryResultsPerTitle: makeNodeComponent("laboratoryResultsPerTitle"),
    labPerDate: makeNodeComponent("labPerDate"),
    issuedDatetime: makeNodeComponent("issuedDatetime"),
    labLists: makeNodeComponent("labLists"),
    factorNamevalue: makeNodeComponent("factorNamevalue"),
    normalFactorValue: makeNodeComponent("normalFactorValue"),
    abnormalFactorValue: makeNodeComponent("abnormalFactorValue"),
    normalRanged: makeNodeComponent("normalRanged"),
    overlayLayer: makeNodeComponent("overlayLayer"),
    checkedFactorsApiFetcher: makeNodeComponent("checkedFactorsApiFetcher"),
    labFactorList: makeNodeComponent("labFactorList"),
    labFactorPerDate: makeNodeComponent("labFactorPerDate"),
    labFactorDatetime: makeNodeComponent("labFactorDatetime"),
    factorsList: makeNodeComponent("factorsList"),
    factor: makeNodeComponent("factor"),
    factorName2: makeNodeComponent("factorName2"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    homepage: makeNodeComponent("homepage"),
    patientProfile: makeNodeComponent("patientProfile"),
    radiologyReport: makeNodeComponent("radiologyReport"),
    laboratoryPage2: makeNodeComponent("laboratoryPage2"),

    // Metadata about props expected for PlasmicLaboratoryData
    internalVariantProps: PlasmicLaboratoryData__VariantProps,
    internalArgProps: PlasmicLaboratoryData__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLaboratoryData;
/* prettier-ignore-end */
