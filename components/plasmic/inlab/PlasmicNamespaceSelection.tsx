// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: yfSr1skfxkHn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToHomepage from "../../RedirectToHomepage"; // plasmic-import: x1Fxn6tnPsJ0/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicNamespaceSelection.module.css"; // plasmic-import: yfSr1skfxkHn/css

createPlasmicElementProxy;

export type PlasmicNamespaceSelection__VariantMembers = {};
export type PlasmicNamespaceSelection__VariantsArgs = {};
type VariantPropType = keyof PlasmicNamespaceSelection__VariantsArgs;
export const PlasmicNamespaceSelection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNamespaceSelection__ArgsType = {};
type ArgPropType = keyof PlasmicNamespaceSelection__ArgsType;
export const PlasmicNamespaceSelection__ArgProps = new Array<ArgPropType>();

export type PlasmicNamespaceSelection__OverridesType = {
  namespaceSelection?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToHomepage?: Flex__<typeof RedirectToHomepage>;
  namespaces2?: Flex__<"div">;
  text?: Flex__<"div">;
  namespaces?: Flex__<typeof ApiFetcherComponent>;
  namespacesList?: Flex__<"div">;
  namespaceName?: Flex__<"div">;
};

export interface DefaultNamespaceSelectionProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNamespaceSelection__RenderFunc(props: {
  variants: PlasmicNamespaceSelection__VariantsArgs;
  args: PlasmicNamespaceSelection__ArgsType;
  overrides: PlasmicNamespaceSelection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"namespaceSelection"}
          data-plasmic-override={overrides.namespaceSelection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.namespaceSelection
          )}
        >
          <RedirectToInlabLogin
            data-plasmic-name={"redirectToInlabLogin"}
            data-plasmic-override={overrides.redirectToInlabLogin}
            className={classNames("__wab_instance", sty.redirectToInlabLogin)}
          />

          <RedirectToHomepage
            data-plasmic-name={"redirectToHomepage"}
            data-plasmic-override={overrides.redirectToHomepage}
            className={classNames("__wab_instance", sty.redirectToHomepage)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"namespaces2"}
            data-plasmic-override={overrides.namespaces2}
            hasGap={true}
            className={classNames(projectcss.all, sty.namespaces2)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "\u0628\u06cc\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <ApiFetcherComponent
              data-plasmic-name={"namespaces"}
              data-plasmic-override={overrides.namespaces}
              className={classNames("__wab_instance", sty.namespaces)}
              headers={{ "X-Namespace": "undefined " }}
              method={"GET"}
              path={"/api/v3/user/user_namespaces"}
              ref={ref => {
                $refs["namespaces"] = ref;
              }}
            >
              <DataCtxReader__>
                {$ctx => (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"namespacesList"}
                    data-plasmic-override={overrides.namespacesList}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.namespacesList)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetched_data.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"namespaceName"}
                          data-plasmic-override={overrides.namespaceName}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.namespaceName
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["namespaceIdTitleLocalStorage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        localStorage.setItem(
                                          "inlab_user_namespace_id",
                                          currentItem.id
                                        );
                                        return localStorage.setItem(
                                          "inlab_user_namespace_title",
                                          currentItem.title
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["namespaceIdTitleLocalStorage"] != null &&
                              typeof $steps["namespaceIdTitleLocalStorage"] ===
                                "object" &&
                              typeof $steps["namespaceIdTitleLocalStorage"]
                                .then === "function"
                            ) {
                              $steps["namespaceIdTitleLocalStorage"] =
                                await $steps["namespaceIdTitleLocalStorage"];
                            }

                            $steps["resetFilterWardWardNameWardId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        localStorage.removeItem("selected_tab");
                                        localStorage.removeItem(
                                          "bookmark_list"
                                        );
                                        localStorage.removeItem("ward_list");
                                        localStorage.removeItem(
                                          "filter_ward_name"
                                        );
                                        localStorage.removeItem(
                                          "filter_ward_id"
                                        );
                                        localStorage.removeItem(
                                          "physicians_list"
                                        );
                                        localStorage.removeItem(
                                          "filter_physician_name"
                                        );
                                        return localStorage.removeItem(
                                          "filter_physician_id"
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["resetFilterWardWardNameWardId"] != null &&
                              typeof $steps["resetFilterWardWardNameWardId"] ===
                                "object" &&
                              typeof $steps["resetFilterWardWardNameWardId"]
                                .then === "function"
                            ) {
                              $steps["resetFilterWardWardNameWardId"] =
                                await $steps["resetFilterWardWardNameWardId"];
                            }

                            $steps["logConsole"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        console.log(
                                          `selected_tab: ${localStorage.getItem(
                                            "selected_tab"
                                          )}`
                                        );
                                        console.log(
                                          `bookmark_list: ${localStorage.getItem(
                                            "bookmark_list"
                                          )}`
                                        );
                                        console.log(
                                          `ward_list: ${localStorage.getItem(
                                            "ward_list"
                                          )}`
                                        );
                                        console.log(
                                          `filter_ward_name: ${localStorage.getItem(
                                            "filter_ward_name"
                                          )}`
                                        );
                                        console.log(
                                          `filter_ward_id: ${localStorage.getItem(
                                            "filter_ward_id"
                                          )}`
                                        );
                                        console.log(
                                          `physicians_list: ${localStorage.getItem(
                                            "physicians_list"
                                          )}`
                                        );
                                        console.log(
                                          `filter_physician_name: ${localStorage.getItem(
                                            "filter_physician_name"
                                          )}`
                                        );
                                        return console.log(
                                          `filter_physician_id: ${localStorage.getItem(
                                            "filter_physician_id"
                                          )}`
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["logConsole"] != null &&
                              typeof $steps["logConsole"] === "object" &&
                              typeof $steps["logConsole"].then === "function"
                            ) {
                              $steps["logConsole"] = await $steps["logConsole"];
                            }

                            $steps["goToHomepage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/patients`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToHomepage"] != null &&
                              typeof $steps["goToHomepage"] === "object" &&
                              typeof $steps["goToHomepage"].then === "function"
                            ) {
                              $steps["goToHomepage"] = await $steps[
                                "goToHomepage"
                              ];
                            }
                          }}
                        >
                          <React.Fragment>{currentItem.title}</React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  namespaceSelection: [
    "namespaceSelection",
    "redirectToInlabLogin",
    "redirectToHomepage",
    "namespaces2",
    "text",
    "namespaces",
    "namespacesList",
    "namespaceName"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToHomepage: ["redirectToHomepage"],
  namespaces2: [
    "namespaces2",
    "text",
    "namespaces",
    "namespacesList",
    "namespaceName"
  ],
  text: ["text"],
  namespaces: ["namespaces", "namespacesList", "namespaceName"],
  namespacesList: ["namespacesList", "namespaceName"],
  namespaceName: ["namespaceName"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  namespaceSelection: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToHomepage: typeof RedirectToHomepage;
  namespaces2: "div";
  text: "div";
  namespaces: typeof ApiFetcherComponent;
  namespacesList: "div";
  namespaceName: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNamespaceSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNamespaceSelection__VariantsArgs;
    args?: PlasmicNamespaceSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNamespaceSelection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNamespaceSelection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNamespaceSelection__ArgProps,
          internalVariantPropNames: PlasmicNamespaceSelection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNamespaceSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "namespaceSelection") {
    func.displayName = "PlasmicNamespaceSelection";
  } else {
    func.displayName = `PlasmicNamespaceSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicNamespaceSelection = Object.assign(
  // Top-level PlasmicNamespaceSelection renders the root element
  makeNodeComponent("namespaceSelection"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToHomepage: makeNodeComponent("redirectToHomepage"),
    namespaces2: makeNodeComponent("namespaces2"),
    text: makeNodeComponent("text"),
    namespaces: makeNodeComponent("namespaces"),
    namespacesList: makeNodeComponent("namespacesList"),
    namespaceName: makeNodeComponent("namespaceName"),

    // Metadata about props expected for PlasmicNamespaceSelection
    internalVariantProps: PlasmicNamespaceSelection__VariantProps,
    internalArgProps: PlasmicNamespaceSelection__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNamespaceSelection;
/* prettier-ignore-end */
