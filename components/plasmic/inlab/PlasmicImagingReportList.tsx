// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: AFB-1jxjMqDb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component
import BookmarkIcon from "../../BookmarkIcon"; // plasmic-import: PK_hwsu90gKT/component
import OnloadUserPatientInteractionCount from "../../OnloadUserPatientInteractionCount"; // plasmic-import: 6oEGl3M40QrL/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicImagingReportList.module.css"; // plasmic-import: AFB-1jxjMqDb/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon
import LoaderSpinnerIcon from "./icons/PlasmicIcon__LoaderSpinner"; // plasmic-import: -kAkKYtWcc8f/icon

createPlasmicElementProxy;

export type PlasmicImagingReportList__VariantMembers = {
  bookmarked: "bookmarked";
};
export type PlasmicImagingReportList__VariantsArgs = {
  bookmarked?: SingleBooleanChoiceArg<"bookmarked">;
};
type VariantPropType = keyof PlasmicImagingReportList__VariantsArgs;
export const PlasmicImagingReportList__VariantProps =
  new Array<VariantPropType>("bookmarked");

export type PlasmicImagingReportList__ArgsType = {};
type ArgPropType = keyof PlasmicImagingReportList__ArgsType;
export const PlasmicImagingReportList__ArgProps = new Array<ArgPropType>();

export type PlasmicImagingReportList__OverridesType = {
  imagingReportList?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  header?: Flex__<"div">;
  apiFetcherComponent?: Flex__<typeof ApiFetcherComponent>;
  patientNameagegender?: Flex__<"div">;
  saveAdmissionDatetime?: Flex__<typeof SideEffect>;
  imagingReport?: Flex__<typeof ApiFetcherComponent>;
  viewPacsButton?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  imagingReportsSection?: Flex__<"section">;
  imagingReportSection?: Flex__<"section">;
  imagingReportList2?: Flex__<"div">;
  imagingReportCard?: Flex__<"div">;
  imagingTitledatetime?: Flex__<"div">;
  previousAdmission?: Flex__<typeof Button>;
  imagingTitle?: Flex__<"div">;
  imagingDatetime?: Flex__<"div">;
  imagingType?: Flex__<"div">;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
  homepage?: Flex__<typeof PlasmicImg__>;
  patientProfile?: Flex__<typeof PlasmicImg__>;
  radiologyReport?: Flex__<typeof PlasmicImg__>;
  laboratory?: Flex__<typeof PlasmicImg__>;
  bookmarkIcon?: Flex__<typeof BookmarkIcon>;
  onloadUserPatientInteractionCount?: Flex__<
    typeof OnloadUserPatientInteractionCount
  >;
};

export interface DefaultImagingReportListProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImagingReportList__RenderFunc(props: {
  variants: PlasmicImagingReportList__VariantsArgs;
  args: PlasmicImagingReportList__ArgsType;
  overrides: PlasmicImagingReportList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "bookmarked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bookmarked
      },
      {
        path: "bookmarkIcon.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.params.bookmarked === "true" ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "admissionDatetime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "previousAdmission[].isDisabled",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "previousAdmission[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "previousAdmission[].deselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "previousAdmission[].sortDeselected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "previousAdmission[].sortSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "viewPacsButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "viewPacsButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "viewPacsButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "viewPacsButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "viewPacsButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"imagingReportList"}
        data-plasmic-override={overrides.imagingReportList}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.imagingReportList,
          {
            [sty.imagingReportListbookmarked]: hasVariant(
              $state,
              "bookmarked",
              "bookmarked"
            )
          }
        )}
      >
        <RedirectToInlabLogin
          data-plasmic-name={"redirectToInlabLogin"}
          data-plasmic-override={overrides.redirectToInlabLogin}
          className={classNames("__wab_instance", sty.redirectToInlabLogin)}
        />

        <RedirectToNamespaceSelection
          data-plasmic-name={"redirectToNamespaceSelection"}
          data-plasmic-override={overrides.redirectToNamespaceSelection}
          className={classNames(
            "__wab_instance",
            sty.redirectToNamespaceSelection
          )}
        />

        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <ApiFetcherComponent
            data-plasmic-name={"apiFetcherComponent"}
            data-plasmic-override={overrides.apiFetcherComponent}
            className={classNames("__wab_instance", sty.apiFetcherComponent)}
            headers={(() => {
              try {
                return {
                  "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            method={"GET"}
            path={`/api/v2/patient/${$ctx.params.code}`}
            ref={ref => {
              $refs["apiFetcherComponent"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    data-plasmic-name={"patientNameagegender"}
                    data-plasmic-override={overrides.patientNameagegender}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.patientNameagegender
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $ctx.fetched_data.loading == false &&
                            (() => {
                              const dob = new Date($ctx.fetched_data.data.dob);
                              const ageDiffMs = Date.now() - dob.getTime();
                              const ageDate = new Date(ageDiffMs);
                              const ageYears = Math.abs(
                                ageDate.getUTCFullYear() - 1970
                              );
                              const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                              if (ageYears < 1) {
                                const ageMonths = ageDate.getUTCMonth();
                                return `${fullName} 
${ageMonths} months ${
                                  $ctx.fetched_data.data.gender === "F"
                                    ? " ♀️"
                                    : $ctx.fetched_data.data.gender === "M"
                                    ? " ♂️"
                                    : ""
                                }`;
                              } else {
                                return `${fullName} ${ageYears}${
                                  $ctx.fetched_data.data.gender === "F"
                                    ? " ♀️"
                                    : $ctx.fetched_data.data.gender === "M"
                                    ? " ♂️"
                                    : ""
                                }`;
                              }
                            })()
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <SideEffect
                    data-plasmic-name={"saveAdmissionDatetime"}
                    data-plasmic-override={overrides.saveAdmissionDatetime}
                    className={classNames(
                      "__wab_instance",
                      sty.saveAdmissionDatetime
                    )}
                    onMount={async () => {
                      const $steps = {};

                      $steps["updateAdmissionDatetime"] =
                        $ctx.fetched_data.loading == false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["admissionDatetime"]
                                },
                                operation: 0,
                                value:
                                  $ctx.fetched_data.data.dismission_datetime
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateAdmissionDatetime"] != null &&
                        typeof $steps["updateAdmissionDatetime"] === "object" &&
                        typeof $steps["updateAdmissionDatetime"].then ===
                          "function"
                      ) {
                        $steps["updateAdmissionDatetime"] = await $steps[
                          "updateAdmissionDatetime"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ApiFetcherComponent>
        </div>
        <ApiFetcherComponent
          data-plasmic-name={"imagingReport"}
          data-plasmic-override={overrides.imagingReport}
          className={classNames("__wab_instance", sty.imagingReport)}
          delay={100}
          headers={(() => {
            try {
              return {
                "X-Namespace": localStorage.getItem("inlab_user_namespace_id")
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          method={"GET"}
          path={`/api/v2/patient/${$ctx.params.code}/radiology_services/recent?offset=0&limit=20`}
          ref={ref => {
            $refs["imagingReport"] = ref;
          }}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                <Button
                  data-plasmic-name={"viewPacsButton"}
                  data-plasmic-override={overrides.viewPacsButton}
                  className={classNames("__wab_instance", sty.viewPacsButton)}
                  color={(() => {
                    try {
                      return $ctx.fetched_data.data.pacs_url === null &&
                        localStorage.getItem("namespace") !== "5"
                        ? "clear"
                        : "blue";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "clear";
                      }
                      throw e;
                    }
                  })()}
                  deselected={generateStateValueProp($state, [
                    "viewPacsButton",
                    "deselected"
                  ])}
                  isDisabled={generateStateValueProp($state, [
                    "viewPacsButton",
                    "isDisabled"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] =
                      localStorage.getItem("namespace_id") !== "5"
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return $ctx.fetched_data.data.pacs_url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }

                    $steps["invokeGlobalAction"] =
                      localStorage.getItem("namespace_id") === "5"
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                `https://synapps.tums.ac.ir/n8n/webhook/PACS?patient_id=${$ctx.params.code}`
                              ]
                            };
                            return $globalActions[
                              "AuthGlobalContext.apiFetcher"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  onDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "viewPacsButton",
                      "deselected"
                    ])(eventArgs[0]);
                  }}
                  onIsDisabledChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "viewPacsButton",
                      "isDisabled"
                    ])(eventArgs[0]);
                  }}
                  onSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "viewPacsButton",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  onSortDeselectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "viewPacsButton",
                      "sortDeselected"
                    ])(eventArgs[0]);
                  }}
                  onSortSelectedChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "viewPacsButton",
                      "sortSelected"
                    ])(eventArgs[0]);
                  }}
                  selected={generateStateValueProp($state, [
                    "viewPacsButton",
                    "selected"
                  ])}
                  sortDeselected={generateStateValueProp($state, [
                    "viewPacsButton",
                    "sortDeselected"
                  ])}
                  sortSelected={generateStateValueProp($state, [
                    "viewPacsButton",
                    "sortSelected"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Thhk
                    )}
                  >
                    {"View PACS"}
                  </div>
                </Button>
                {(
                  hasVariant(globalVariants, "screen", "mobileFirst")
                    ? $ctx.fetched_data.loading === true
                    : $ctx.fetched_data.loading === true
                ) ? (
                  <LoaderSpinnerIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                ) : null}
                {$ctx.fetched_data.loading == false &&
                $ctx.fetched_data.data.radiology_services == "" ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__scVr8
                    )}
                  >
                    {
                      "\u06af\u0632\u0627\u0631\u0634\u06cc \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a "
                    }
                  </div>
                ) : null}
                <section
                  data-plasmic-name={"imagingReportsSection"}
                  data-plasmic-override={overrides.imagingReportsSection}
                  className={classNames(
                    projectcss.all,
                    sty.imagingReportsSection
                  )}
                >
                  <section
                    data-plasmic-name={"imagingReportSection"}
                    data-plasmic-override={overrides.imagingReportSection}
                    className={classNames(
                      projectcss.all,
                      sty.imagingReportSection
                    )}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetched_data.data.radiology_services;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"imagingReportList2"}
                          data-plasmic-override={overrides.imagingReportList2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.imagingReportList2
                          )}
                          key={currentIndex}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"imagingReportCard"}
                            data-plasmic-override={overrides.imagingReportCard}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.imagingReportCard
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToImagingReportDatail"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/patient/${(() => {
                                        try {
                                          return $ctx.params.code;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}/report/detail/${(() => {
                                        try {
                                          return currentItem.id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToImagingReportDatail"] != null &&
                                typeof $steps["goToImagingReportDatail"] ===
                                  "object" &&
                                typeof $steps["goToImagingReportDatail"]
                                  .then === "function"
                              ) {
                                $steps["goToImagingReportDatail"] =
                                  await $steps["goToImagingReportDatail"];
                              }
                            }}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"imagingTitledatetime"}
                              data-plasmic-override={
                                overrides.imagingTitledatetime
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.imagingTitledatetime
                              )}
                            >
                              {new Date(currentItem.service_datetime) <
                              new Date($state.admissionDatetime)
                                ? (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.previousAdmission
                                      ),
                                      color: "blue",
                                      deselected: generateStateValueProp(
                                        $state,
                                        [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "deselected"
                                        ]
                                      ),
                                      isDisabled: generateStateValueProp(
                                        $state,
                                        [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "isDisabled"
                                        ]
                                      ),
                                      onDeselectedChange: (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "deselected"
                                        ])(eventArgs[0]);
                                      },
                                      onIsDisabledChange: (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "isDisabled"
                                        ])(eventArgs[0]);
                                      },
                                      onSelectedChange: (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "selected"
                                        ])(eventArgs[0]);
                                      },
                                      onSortDeselectedChange: (
                                        ...eventArgs
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "sortDeselected"
                                        ])(eventArgs[0]);
                                      },
                                      onSortSelectedChange: (...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "sortSelected"
                                        ])(eventArgs[0]);
                                      },
                                      selected: generateStateValueProp($state, [
                                        "previousAdmission",
                                        __plasmic_idx_0,
                                        "selected"
                                      ]),
                                      shape: "sharp",
                                      sortDeselected: generateStateValueProp(
                                        $state,
                                        [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "sortDeselected"
                                        ]
                                      ),
                                      sortSelected: generateStateValueProp(
                                        $state,
                                        [
                                          "previousAdmission",
                                          __plasmic_idx_0,
                                          "sortSelected"
                                        ]
                                      )
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "previousAdmission[].isDisabled",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        },
                                        {
                                          name: "previousAdmission[].selected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        },
                                        {
                                          name: "previousAdmission[].deselected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        },
                                        {
                                          name: "previousAdmission[].sortDeselected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        },
                                        {
                                          name: "previousAdmission[].sortSelected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <Button
                                        data-plasmic-name={"previousAdmission"}
                                        data-plasmic-override={
                                          overrides.previousAdmission
                                        }
                                        {...child$Props}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__a9Ld4
                                          )}
                                        >
                                          {
                                            "\u0628\u0633\u062a\u0631\u06cc \u0642\u0628\u0644\u06cc "
                                          }
                                        </div>
                                      </Button>
                                    );
                                  })()
                                : null}
                              <div
                                data-plasmic-name={"imagingTitle"}
                                data-plasmic-override={overrides.imagingTitle}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.imagingTitle
                                )}
                              >
                                <React.Fragment>
                                  {currentItem.service_name}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"imagingDatetime"}
                                data-plasmic-override={
                                  overrides.imagingDatetime
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.imagingDatetime
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    const gregorianDate = new Date(
                                      currentItem.service_datetime
                                    );
                                    const shamsiDate = new Intl.DateTimeFormat(
                                      "fa-IR"
                                    ).format(gregorianDate);
                                    const shamsiTime =
                                      gregorianDate.toLocaleTimeString(
                                        "fa-IR",
                                        { hour12: false }
                                      );
                                    const englishDate = shamsiDate.replace(
                                      /[۰-۹]/g,
                                      d =>
                                        String.fromCharCode(
                                          d.charCodeAt(0) - 1728
                                        )
                                    );
                                    const englishTime = shamsiTime.replace(
                                      /[۰-۹]/g,
                                      d =>
                                        String.fromCharCode(
                                          d.charCodeAt(0) - 1728
                                        )
                                    );
                                    return `${englishDate}  ${englishTime}`;
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <div
                              data-plasmic-name={"imagingType"}
                              data-plasmic-override={overrides.imagingType}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.imagingType
                              )}
                            >
                              <React.Fragment>
                                {currentItem.title.replace(/\(\s+#\s*\)/g, "")}
                              </React.Fragment>
                            </div>
                          </Stack__>
                        </Stack__>
                      );
                    })}
                  </section>
                </section>
              </React.Fragment>
            )}
          </DataCtxReader__>
        </ApiFetcherComponent>
        <div
          data-plasmic-name={"switchingTabs"}
          data-plasmic-override={overrides.switchingTabs}
          className={classNames(projectcss.all, sty.switchingTabs)}
        >
          <SwitchingTab
            data-plasmic-name={"switchingTab"}
            data-plasmic-override={overrides.switchingTab}
            className={classNames("__wab_instance", sty.switchingTab)}
          >
            <PlasmicImg__
              data-plasmic-name={"homepage"}
              data-plasmic-override={overrides.homepage}
              alt={""}
              className={classNames(sty.homepage)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/patients` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/icons8Home1Svg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"patientProfile"}
              data-plasmic-override={overrides.patientProfile}
              alt={""}
              className={classNames(sty.patientProfile)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToPatientProfile"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/profile`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPatientProfile"] != null &&
                  typeof $steps["goToPatientProfile"] === "object" &&
                  typeof $steps["goToPatientProfile"].then === "function"
                ) {
                  $steps["goToPatientProfile"] = await $steps[
                    "goToPatientProfile"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group2063.svg",
                fullWidth: 18.77,
                fullHeight: 20.34,
                aspectRatio: 0.904762
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"radiologyReport"}
              data-plasmic-override={overrides.radiologyReport}
              alt={""}
              className={classNames(sty.radiologyReport)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToImagingReportList"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/report/list`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToImagingReportList"] != null &&
                  typeof $steps["goToImagingReportList"] === "object" &&
                  typeof $steps["goToImagingReportList"].then === "function"
                ) {
                  $steps["goToImagingReportList"] = await $steps[
                    "goToImagingReportList"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group376.svg",
                fullWidth: 19.424,
                fullHeight: 19.98,
                aspectRatio: 1
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"laboratory"}
              data-plasmic-override={overrides.laboratory}
              alt={""}
              className={classNames(sty.laboratory)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25%"}
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["goToLaboratoryData"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/patient/${(() => {
                          try {
                            return $ctx.params.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}/lab`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLaboratoryData"] != null &&
                  typeof $steps["goToLaboratoryData"] === "object" &&
                  typeof $steps["goToLaboratoryData"].then === "function"
                ) {
                  $steps["goToLaboratoryData"] = await $steps[
                    "goToLaboratoryData"
                  ];
                }
              }}
              src={{
                src: "/plasmic/inlab/images/group384.svg",
                fullWidth: 14.575,
                fullHeight: 18.692,
                aspectRatio: 0.789474
              }}
            />

            {false
              ? (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.bookmarkIcon),
                    onSelectedChange: generateStateOnChangeProp($state, [
                      "bookmarkIcon",
                      "selected"
                    ]),
                    patientId: (() => {
                      try {
                        return $ctx.params.code;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    selected: generateStateValueProp($state, [
                      "bookmarkIcon",
                      "selected"
                    ]),
                    trigerReload: async () => {
                      const $steps = {};

                      $steps["updateBookmarked"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "bookmarked",
                              operation: 2,
                              value: "bookmarked"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              const oldValue = $stateGet($state, vgroup);
                              $stateSet($state, vgroup, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBookmarked"] != null &&
                        typeof $steps["updateBookmarked"] === "object" &&
                        typeof $steps["updateBookmarked"].then === "function"
                      ) {
                        $steps["updateBookmarked"] = await $steps[
                          "updateBookmarked"
                        ];
                      }
                    }
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "bookmarkIcon.selected",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return $ctx.params.bookmarked === "true"
                                ? true
                                : false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    []
                  );
                  return (
                    <BookmarkIcon
                      data-plasmic-name={"bookmarkIcon"}
                      data-plasmic-override={overrides.bookmarkIcon}
                      {...child$Props}
                    />
                  );
                })()
              : null}
          </SwitchingTab>
        </div>
        {false ? (
          <OnloadUserPatientInteractionCount
            data-plasmic-name={"onloadUserPatientInteractionCount"}
            data-plasmic-override={overrides.onloadUserPatientInteractionCount}
            className={classNames(
              "__wab_instance",
              sty.onloadUserPatientInteractionCount
            )}
            patientIdForOnloadUserPatientInteractionCount={(() => {
              try {
                return $ctx.params.code;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  imagingReportList: [
    "imagingReportList",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "header",
    "apiFetcherComponent",
    "patientNameagegender",
    "saveAdmissionDatetime",
    "imagingReport",
    "viewPacsButton",
    "svg",
    "imagingReportsSection",
    "imagingReportSection",
    "imagingReportList2",
    "imagingReportCard",
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime",
    "imagingType",
    "switchingTabs",
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratory",
    "bookmarkIcon",
    "onloadUserPatientInteractionCount"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  header: [
    "header",
    "apiFetcherComponent",
    "patientNameagegender",
    "saveAdmissionDatetime"
  ],
  apiFetcherComponent: [
    "apiFetcherComponent",
    "patientNameagegender",
    "saveAdmissionDatetime"
  ],
  patientNameagegender: ["patientNameagegender"],
  saveAdmissionDatetime: ["saveAdmissionDatetime"],
  imagingReport: [
    "imagingReport",
    "viewPacsButton",
    "svg",
    "imagingReportsSection",
    "imagingReportSection",
    "imagingReportList2",
    "imagingReportCard",
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  viewPacsButton: ["viewPacsButton"],
  svg: ["svg"],
  imagingReportsSection: [
    "imagingReportsSection",
    "imagingReportSection",
    "imagingReportList2",
    "imagingReportCard",
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  imagingReportSection: [
    "imagingReportSection",
    "imagingReportList2",
    "imagingReportCard",
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  imagingReportList2: [
    "imagingReportList2",
    "imagingReportCard",
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  imagingReportCard: [
    "imagingReportCard",
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime",
    "imagingType"
  ],
  imagingTitledatetime: [
    "imagingTitledatetime",
    "previousAdmission",
    "imagingTitle",
    "imagingDatetime"
  ],
  previousAdmission: ["previousAdmission"],
  imagingTitle: ["imagingTitle"],
  imagingDatetime: ["imagingDatetime"],
  imagingType: ["imagingType"],
  switchingTabs: [
    "switchingTabs",
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratory",
    "bookmarkIcon"
  ],
  switchingTab: [
    "switchingTab",
    "homepage",
    "patientProfile",
    "radiologyReport",
    "laboratory",
    "bookmarkIcon"
  ],
  homepage: ["homepage"],
  patientProfile: ["patientProfile"],
  radiologyReport: ["radiologyReport"],
  laboratory: ["laboratory"],
  bookmarkIcon: ["bookmarkIcon"],
  onloadUserPatientInteractionCount: ["onloadUserPatientInteractionCount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  imagingReportList: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  header: "div";
  apiFetcherComponent: typeof ApiFetcherComponent;
  patientNameagegender: "div";
  saveAdmissionDatetime: typeof SideEffect;
  imagingReport: typeof ApiFetcherComponent;
  viewPacsButton: typeof Button;
  svg: "svg";
  imagingReportsSection: "section";
  imagingReportSection: "section";
  imagingReportList2: "div";
  imagingReportCard: "div";
  imagingTitledatetime: "div";
  previousAdmission: typeof Button;
  imagingTitle: "div";
  imagingDatetime: "div";
  imagingType: "div";
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
  homepage: typeof PlasmicImg__;
  patientProfile: typeof PlasmicImg__;
  radiologyReport: typeof PlasmicImg__;
  laboratory: typeof PlasmicImg__;
  bookmarkIcon: typeof BookmarkIcon;
  onloadUserPatientInteractionCount: typeof OnloadUserPatientInteractionCount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImagingReportList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImagingReportList__VariantsArgs;
    args?: PlasmicImagingReportList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImagingReportList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImagingReportList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImagingReportList__ArgProps,
          internalVariantPropNames: PlasmicImagingReportList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImagingReportList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "imagingReportList") {
    func.displayName = "PlasmicImagingReportList";
  } else {
    func.displayName = `PlasmicImagingReportList.${nodeName}`;
  }
  return func;
}

export const PlasmicImagingReportList = Object.assign(
  // Top-level PlasmicImagingReportList renders the root element
  makeNodeComponent("imagingReportList"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    header: makeNodeComponent("header"),
    apiFetcherComponent: makeNodeComponent("apiFetcherComponent"),
    patientNameagegender: makeNodeComponent("patientNameagegender"),
    saveAdmissionDatetime: makeNodeComponent("saveAdmissionDatetime"),
    imagingReport: makeNodeComponent("imagingReport"),
    viewPacsButton: makeNodeComponent("viewPacsButton"),
    svg: makeNodeComponent("svg"),
    imagingReportsSection: makeNodeComponent("imagingReportsSection"),
    imagingReportSection: makeNodeComponent("imagingReportSection"),
    imagingReportList2: makeNodeComponent("imagingReportList2"),
    imagingReportCard: makeNodeComponent("imagingReportCard"),
    imagingTitledatetime: makeNodeComponent("imagingTitledatetime"),
    previousAdmission: makeNodeComponent("previousAdmission"),
    imagingTitle: makeNodeComponent("imagingTitle"),
    imagingDatetime: makeNodeComponent("imagingDatetime"),
    imagingType: makeNodeComponent("imagingType"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),
    homepage: makeNodeComponent("homepage"),
    patientProfile: makeNodeComponent("patientProfile"),
    radiologyReport: makeNodeComponent("radiologyReport"),
    laboratory: makeNodeComponent("laboratory"),
    bookmarkIcon: makeNodeComponent("bookmarkIcon"),
    onloadUserPatientInteractionCount: makeNodeComponent(
      "onloadUserPatientInteractionCount"
    ),

    // Metadata about props expected for PlasmicImagingReportList
    internalVariantProps: PlasmicImagingReportList__VariantProps,
    internalArgProps: PlasmicImagingReportList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicImagingReportList;
/* prettier-ignore-end */
