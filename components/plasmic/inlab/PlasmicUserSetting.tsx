// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: RHOuYiwuacpG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import RedirectToLoginPage from "../../RedirectToLoginPage"; // plasmic-import: 0wFpBWYaqpsM/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: aXAcva2etiX1/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicUserSetting.module.css"; // plasmic-import: RHOuYiwuacpG/css

import ArrowLeftIcon from "./icons/PlasmicIcon__ArrowLeft"; // plasmic-import: OPwXrI9x1012/icon
import PersonCropSquareFillSvgrepoComsvgIcon from "./icons/PlasmicIcon__PersonCropSquareFillSvgrepoComsvg"; // plasmic-import: KRqJj_I4xpne/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: -RBNimWBwZ_J/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Pji6nZZT_lpO/icon
import Group1917Icon from "./icons/PlasmicIcon__Group1917"; // plasmic-import: ycuumst0kLdp/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicUserSetting__VariantMembers = {};
export type PlasmicUserSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserSetting__VariantsArgs;
export const PlasmicUserSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicUserSetting__ArgsType = {};
type ArgPropType = keyof PlasmicUserSetting__ArgsType;
export const PlasmicUserSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicUserSetting__OverridesType = {
  userSetting?: Flex__<"div">;
  picsAndName2?: Flex__<"div">;
  name2?: Flex__<"div">;
  myProfile?: Flex__<"div">;
  myProfile2?: Flex__<"div">;
  hospital?: Flex__<"div">;
  hospital3?: Flex__<"svg">;
  hospital2?: Flex__<"div">;
  resetPassword?: Flex__<"div">;
  resetPass?: Flex__<"svg">;
  resetPassword2?: Flex__<"div">;
  logout?: Flex__<typeof Button>;
  redirectToLoginPage?: Flex__<typeof RedirectToLoginPage>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
};

export interface DefaultUserSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserSetting__RenderFunc(props: {
  variants: PlasmicUserSetting__VariantsArgs;
  args: PlasmicUserSetting__ArgsType;
  overrides: PlasmicUserSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "logout.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"userSetting"}
          data-plasmic-override={overrides.userSetting}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.userSetting
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8NjX5)}>
            <ArrowLeftIcon
              className={classNames(projectcss.all, sty.svg___8Xmn)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/patients` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              role={"img"}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ttAvM)}
          >
            <div
              data-plasmic-name={"picsAndName2"}
              data-plasmic-override={overrides.picsAndName2}
              className={classNames(projectcss.all, sty.picsAndName2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mrH0L)}
              >
                <div
                  data-plasmic-name={"name2"}
                  data-plasmic-override={overrides.name2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const output =
                            $ctx.inlab_user &&
                            $ctx.inlab_user?.user?.first_name +
                              " " +
                              $ctx.inlab_user?.user?.last_name;
                          return output !== null
                            ? output
                            : "نام و نام خانوادگی";
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nrO8M
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.inlab_user.user.rank.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u0642\u0634";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Fkg4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.inlab_user.user.username;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <PersonCropSquareFillSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__iEtuG)}
                role={"img"}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"myProfile"}
              data-plasmic-override={overrides.myProfile}
              hasGap={true}
              className={classNames(projectcss.all, sty.myProfile)}
              onClick={async event => {
                const $steps = {};

                $steps["goToUserProfile"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/user/setting/my_profile`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToUserProfile"] != null &&
                  typeof $steps["goToUserProfile"] === "object" &&
                  typeof $steps["goToUserProfile"].then === "function"
                ) {
                  $steps["goToUserProfile"] = await $steps["goToUserProfile"];
                }
              }}
            >
              <div
                data-plasmic-name={"myProfile2"}
                data-plasmic-override={overrides.myProfile2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.myProfile2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToMyprofile"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/user/setting/my_profile`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToMyprofile"] != null &&
                    typeof $steps["goToMyprofile"] === "object" &&
                    typeof $steps["goToMyprofile"].then === "function"
                  ) {
                    $steps["goToMyprofile"] = await $steps["goToMyprofile"];
                  }
                }}
              >
                {"My profile"}
              </div>
              <ProfileIcon
                className={classNames(projectcss.all, sty.svg___5QIhx)}
                role={"img"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"hospital"}
              data-plasmic-override={overrides.hospital}
              hasGap={true}
              className={classNames(projectcss.all, sty.hospital)}
              onClick={async event => {
                const $steps = {};

                $steps["removeInlabUserNamespaceIdValue"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return localStorage.removeItem(
                            "inlab_user_namespace_id"
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["removeInlabUserNamespaceIdValue"] != null &&
                  typeof $steps["removeInlabUserNamespaceIdValue"] ===
                    "object" &&
                  typeof $steps["removeInlabUserNamespaceIdValue"].then ===
                    "function"
                ) {
                  $steps["removeInlabUserNamespaceIdValue"] = await $steps[
                    "removeInlabUserNamespaceIdValue"
                  ];
                }

                $steps["consoleLogInlabUserNamespaceId"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return console.log(
                            `inlab_user_namespace_id: ${localStorage.getItem(
                              "inlab_user_namespace_id"
                            )}`
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["consoleLogInlabUserNamespaceId"] != null &&
                  typeof $steps["consoleLogInlabUserNamespaceId"] ===
                    "object" &&
                  typeof $steps["consoleLogInlabUserNamespaceId"].then ===
                    "function"
                ) {
                  $steps["consoleLogInlabUserNamespaceId"] = await $steps[
                    "consoleLogInlabUserNamespaceId"
                  ];
                }

                $steps["goToNamespaceSelection"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/user/setting/namespace`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToNamespaceSelection"] != null &&
                  typeof $steps["goToNamespaceSelection"] === "object" &&
                  typeof $steps["goToNamespaceSelection"].then === "function"
                ) {
                  $steps["goToNamespaceSelection"] = await $steps[
                    "goToNamespaceSelection"
                  ];
                }
              }}
            >
              <Icon3Icon
                data-plasmic-name={"hospital3"}
                data-plasmic-override={overrides.hospital3}
                className={classNames(projectcss.all, sty.hospital3)}
                role={"img"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sDnJy)}
              >
                <div
                  data-plasmic-name={"hospital2"}
                  data-plasmic-override={overrides.hospital2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.hospital2
                  )}
                >
                  {"\u0628\u06cc\u0645\u0627\u0631\u0633\u062a\u0627\u0646 "}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lpJy
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return localStorage.setItem(
                                  "inlab_user_namespace_id",
                                  currentItem.id
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/patients` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                >
                  <React.Fragment>
                    {localStorage.getItem("inlab_user_namespace_title")}
                  </React.Fragment>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"resetPassword"}
              data-plasmic-override={overrides.resetPassword}
              hasGap={true}
              className={classNames(projectcss.all, sty.resetPassword)}
              onClick={async event => {
                const $steps = {};

                $steps[
                  "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                ] = true
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://docs.google.com/forms/d/e/1FAIpQLScmvuKNhINyeNxRDBA6NRMSCqzl5NCC60Hbkqa6X42kIhXGKQ/viewform?usp=sf_link"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps[
                    "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                  ] != null &&
                  typeof $steps[
                    "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                  ] === "object" &&
                  typeof $steps[
                    "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                  ].then === "function"
                ) {
                  $steps[
                    "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                  ] = await $steps[
                    "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                  ];
                }
              }}
            >
              <Group1917Icon
                data-plasmic-name={"resetPass"}
                data-plasmic-override={overrides.resetPass}
                className={classNames(projectcss.all, sty.resetPass)}
                role={"img"}
              />

              <div
                data-plasmic-name={"resetPassword2"}
                data-plasmic-override={overrides.resetPassword2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.resetPassword2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps[
                    "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                  ] = true
                    ? (() => {
                        const actionArgs = {
                          destination:
                            "https://docs.google.com/forms/d/e/1FAIpQLScmvuKNhINyeNxRDBA6NRMSCqzl5NCC60Hbkqa6X42kIhXGKQ/viewform?usp=sf_link"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps[
                      "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                    ] != null &&
                    typeof $steps[
                      "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                    ] === "object" &&
                    typeof $steps[
                      "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                    ].then === "function"
                  ) {
                    $steps[
                      "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                    ] = await $steps[
                      "goToHttpsdocsgooglecomformsde1FaIpQlScmvuKNhINyeNxRdba6NrmsCqzl5Ncc60Hbkqa6X42KIhXgkQviewformuspsfLink"
                    ];
                  }
                }}
              >
                {
                  "\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                }
              </div>
            </Stack__>
            <Button
              data-plasmic-name={"logout"}
              data-plasmic-override={overrides.logout}
              className={classNames("__wab_instance", sty.logout)}
              isDisabled={generateStateValueProp($state, [
                "logout",
                "isDisabled"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["logout"] = true
                  ? (() => {
                      const actionArgs = { args: [] };
                      return $globalActions["AuthGlobalContext.logout"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["logout"] != null &&
                  typeof $steps["logout"] === "object" &&
                  typeof $steps["logout"].then === "function"
                ) {
                  $steps["logout"] = await $steps["logout"];
                }

                $steps["goToInlabLoginPage"] = !$steps.logout
                  ? (() => {
                      const actionArgs = { destination: `/inlab_login` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToInlabLoginPage"] != null &&
                  typeof $steps["goToInlabLoginPage"] === "object" &&
                  typeof $steps["goToInlabLoginPage"].then === "function"
                ) {
                  $steps["goToInlabLoginPage"] = await $steps[
                    "goToInlabLoginPage"
                  ];
                }
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["logout", "isDisabled"])(
                  eventArgs[0]
                );
              }}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__fLi6W)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zjr24
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "var(--token-jgohepLVeKvh)" }}
                  >
                    {"Log Out"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
          </Stack__>
          <RedirectToLoginPage
            data-plasmic-name={"redirectToLoginPage"}
            data-plasmic-override={overrides.redirectToLoginPage}
            className={classNames("__wab_instance", sty.redirectToLoginPage)}
          />

          <RedirectToNamespaceSelection
            data-plasmic-name={"redirectToNamespaceSelection"}
            data-plasmic-override={overrides.redirectToNamespaceSelection}
            className={classNames(
              "__wab_instance",
              sty.redirectToNamespaceSelection
            )}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  userSetting: [
    "userSetting",
    "picsAndName2",
    "name2",
    "myProfile",
    "myProfile2",
    "hospital",
    "hospital3",
    "hospital2",
    "resetPassword",
    "resetPass",
    "resetPassword2",
    "logout",
    "redirectToLoginPage",
    "redirectToNamespaceSelection"
  ],
  picsAndName2: ["picsAndName2", "name2"],
  name2: ["name2"],
  myProfile: ["myProfile", "myProfile2"],
  myProfile2: ["myProfile2"],
  hospital: ["hospital", "hospital3", "hospital2"],
  hospital3: ["hospital3"],
  hospital2: ["hospital2"],
  resetPassword: ["resetPassword", "resetPass", "resetPassword2"],
  resetPass: ["resetPass"],
  resetPassword2: ["resetPassword2"],
  logout: ["logout"],
  redirectToLoginPage: ["redirectToLoginPage"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  userSetting: "div";
  picsAndName2: "div";
  name2: "div";
  myProfile: "div";
  myProfile2: "div";
  hospital: "div";
  hospital3: "svg";
  hospital2: "div";
  resetPassword: "div";
  resetPass: "svg";
  resetPassword2: "div";
  logout: typeof Button;
  redirectToLoginPage: typeof RedirectToLoginPage;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserSetting__VariantsArgs;
    args?: PlasmicUserSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUserSetting__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserSetting__ArgProps,
          internalVariantPropNames: PlasmicUserSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "userSetting") {
    func.displayName = "PlasmicUserSetting";
  } else {
    func.displayName = `PlasmicUserSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicUserSetting = Object.assign(
  // Top-level PlasmicUserSetting renders the root element
  makeNodeComponent("userSetting"),
  {
    // Helper components rendering sub-elements
    picsAndName2: makeNodeComponent("picsAndName2"),
    name2: makeNodeComponent("name2"),
    myProfile: makeNodeComponent("myProfile"),
    myProfile2: makeNodeComponent("myProfile2"),
    hospital: makeNodeComponent("hospital"),
    hospital3: makeNodeComponent("hospital3"),
    hospital2: makeNodeComponent("hospital2"),
    resetPassword: makeNodeComponent("resetPassword"),
    resetPass: makeNodeComponent("resetPass"),
    resetPassword2: makeNodeComponent("resetPassword2"),
    logout: makeNodeComponent("logout"),
    redirectToLoginPage: makeNodeComponent("redirectToLoginPage"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),

    // Metadata about props expected for PlasmicUserSetting
    internalVariantProps: PlasmicUserSetting__VariantProps,
    internalArgProps: PlasmicUserSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserSetting;
/* prettier-ignore-end */
