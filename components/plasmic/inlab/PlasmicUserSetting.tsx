// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: RHOuYiwuacpG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RedirectToInlabLogin from "../../RedirectToInlabLogin"; // plasmic-import: dnRUnqur1vWa/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: rhyWwtv3sPGn/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import Alert from "../../Alert"; // plasmic-import: a9E2wGEF0Qy9/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import ShareTool from "../../ShareTool"; // plasmic-import: B3T4IwC_PpNX/component
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicUserSetting.module.css"; // plasmic-import: RHOuYiwuacpG/css

import PersonCropSquareFillSvgrepoComSvgIcon from "./icons/PlasmicIcon__PersonCropSquareFillSvgrepoComSvg"; // plasmic-import: KRqJj_I4xpne/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: -RBNimWBwZ_J/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Pji6nZZT_lpO/icon
import Group1917Icon from "./icons/PlasmicIcon__Group1917"; // plasmic-import: ycuumst0kLdp/icon
import Icons8CloseSvgIcon from "./icons/PlasmicIcon__Icons8CloseSvg"; // plasmic-import: -xG_spDBispP/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: qdjybZJw3tm3/icon

createPlasmicElementProxy;

export type PlasmicUserSetting__VariantMembers = {
  disabledLogoutButton: "disabledLogoutButton";
};
export type PlasmicUserSetting__VariantsArgs = {
  disabledLogoutButton?: SingleBooleanChoiceArg<"disabledLogoutButton">;
};
type VariantPropType = keyof PlasmicUserSetting__VariantsArgs;
export const PlasmicUserSetting__VariantProps = new Array<VariantPropType>(
  "disabledLogoutButton"
);

export type PlasmicUserSetting__ArgsType = {};
type ArgPropType = keyof PlasmicUserSetting__ArgsType;
export const PlasmicUserSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicUserSetting__OverridesType = {
  userSetting?: Flex__<"div">;
  redirectToInlabLogin?: Flex__<typeof RedirectToInlabLogin>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
  pageContent?: Flex__<"div">;
  pictureAndName?: Flex__<"div">;
  nameRankUsername?: Flex__<"div">;
  name?: Flex__<"div">;
  userRankTitle?: Flex__<"div">;
  usernameValue?: Flex__<"div">;
  userPicture?: Flex__<"svg">;
  myProfile?: Flex__<"div">;
  myProfile2?: Flex__<"div">;
  namespace?: Flex__<"div">;
  hospitalIcon?: Flex__<"svg">;
  namespaceTitle?: Flex__<"div">;
  hospital2?: Flex__<"div">;
  namespaceName?: Flex__<"div">;
  resetPassword?: Flex__<"div">;
  resetPasswordImage?: Flex__<"svg">;
  changePassword?: Flex__<typeof AntdModal>;
  modalContent?: Flex__<"div">;
  passwordContent?: Flex__<"div">;
  password?: Flex__<typeof TextInput>;
  repeatPasswordContent?: Flex__<"div">;
  repeatPassword?: Flex__<typeof TextInput>;
  changePasswordButton?: Flex__<typeof Button>;
  passwordRepeatPasswordMismatch2?: Flex__<typeof Alert>;
  successfulChangePassword2?: Flex__<typeof Alert>;
  unsuccessfulChangePassword2?: Flex__<typeof Alert>;
  triggerToOpenModalButton?: Flex__<typeof AntdButton>;
  shareToolContent?: Flex__<"div">;
  shareTool?: Flex__<typeof ShareTool>;
  logoutButton?: Flex__<typeof Button>;
  homepageSwitchingTab?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
};

export interface DefaultUserSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserSetting__RenderFunc(props: {
  variants: PlasmicUserSetting__VariantsArgs;
  args: PlasmicUserSetting__ArgsType;
  overrides: PlasmicUserSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "logoutButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "disabledLogoutButton", "disabledLogoutButton")
            ? "isDisabled"
            : undefined
      },
      {
        path: "disabledLogoutButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.disabledLogoutButton
      },
      {
        path: "logoutButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "logoutButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "logoutButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "logoutButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "changePassword.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "repeatPassword.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "changePasswordButton.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "changePasswordButton.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "changePasswordButton.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "changePasswordButton.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "changePasswordButton.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "passwordRepeatPasswordMismatch",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "successfulChangePassword",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "unsuccessfulChangePassword",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"userSetting"}
          data-plasmic-override={overrides.userSetting}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.userSetting,
            {
              [sty.userSettingdisabledLogoutButton]: hasVariant(
                $state,
                "disabledLogoutButton",
                "disabledLogoutButton"
              )
            }
          )}
        >
          <RedirectToInlabLogin
            data-plasmic-name={"redirectToInlabLogin"}
            data-plasmic-override={overrides.redirectToInlabLogin}
            className={classNames("__wab_instance", sty.redirectToInlabLogin)}
          />

          <RedirectToNamespaceSelection
            data-plasmic-name={"redirectToNamespaceSelection"}
            data-plasmic-override={overrides.redirectToNamespaceSelection}
            className={classNames(
              "__wab_instance",
              sty.redirectToNamespaceSelection
            )}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"pageContent"}
            data-plasmic-override={overrides.pageContent}
            hasGap={true}
            className={classNames(projectcss.all, sty.pageContent, {
              [sty.pageContentdisabledLogoutButton]: hasVariant(
                $state,
                "disabledLogoutButton",
                "disabledLogoutButton"
              )
            })}
          >
            <div
              data-plasmic-name={"pictureAndName"}
              data-plasmic-override={overrides.pictureAndName}
              className={classNames(projectcss.all, sty.pictureAndName, {
                [sty.pictureAndNamedisabledLogoutButton]: hasVariant(
                  $state,
                  "disabledLogoutButton",
                  "disabledLogoutButton"
                )
              })}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"nameRankUsername"}
                data-plasmic-override={overrides.nameRankUsername}
                hasGap={true}
                className={classNames(projectcss.all, sty.nameRankUsername, {
                  [sty.nameRankUsernamedisabledLogoutButton]: hasVariant(
                    $state,
                    "disabledLogoutButton",
                    "disabledLogoutButton"
                  )
                })}
              >
                <div
                  data-plasmic-name={"name"}
                  data-plasmic-override={overrides.name}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      const output =
                        $ctx.inlab_user &&
                        $ctx.inlab_user?.user?.first_name +
                          " " +
                          $ctx.inlab_user?.user?.last_name;
                      return output !== null ? output : "نام و نام خانوادگی";
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"userRankTitle"}
                  data-plasmic-override={overrides.userRankTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.userRankTitle
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.inlab_user.user.rank.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u0642\u0634";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"usernameValue"}
                  data-plasmic-override={overrides.usernameValue}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.usernameValue
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.inlab_user.user.username;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <PersonCropSquareFillSvgrepoComSvgIcon
                data-plasmic-name={"userPicture"}
                data-plasmic-override={overrides.userPicture}
                className={classNames(projectcss.all, sty.userPicture)}
                role={"img"}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"myProfile"}
              data-plasmic-override={overrides.myProfile}
              hasGap={true}
              className={classNames(projectcss.all, sty.myProfile)}
              onClick={async event => {
                const $steps = {};

                $steps["goToUserProfile"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/user/setting/my_profile`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToUserProfile"] != null &&
                  typeof $steps["goToUserProfile"] === "object" &&
                  typeof $steps["goToUserProfile"].then === "function"
                ) {
                  $steps["goToUserProfile"] = await $steps["goToUserProfile"];
                }
              }}
            >
              <div
                data-plasmic-name={"myProfile2"}
                data-plasmic-override={overrides.myProfile2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.myProfile2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToMyprofile"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/user/setting/my_profile`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToMyprofile"] != null &&
                    typeof $steps["goToMyprofile"] === "object" &&
                    typeof $steps["goToMyprofile"].then === "function"
                  ) {
                    $steps["goToMyprofile"] = await $steps["goToMyprofile"];
                  }
                }}
              >
                {"My profile"}
              </div>
              <ProfileIcon
                className={classNames(projectcss.all, sty.svg___5QIhx)}
                role={"img"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"namespace"}
              data-plasmic-override={overrides.namespace}
              hasGap={true}
              className={classNames(projectcss.all, sty.namespace, {
                [sty.namespacedisabledLogoutButton]: hasVariant(
                  $state,
                  "disabledLogoutButton",
                  "disabledLogoutButton"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["removeInlabUserNamespaceIdValue"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return localStorage.removeItem(
                            "inlab_user_namespace_id"
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["removeInlabUserNamespaceIdValue"] != null &&
                  typeof $steps["removeInlabUserNamespaceIdValue"] ===
                    "object" &&
                  typeof $steps["removeInlabUserNamespaceIdValue"].then ===
                    "function"
                ) {
                  $steps["removeInlabUserNamespaceIdValue"] = await $steps[
                    "removeInlabUserNamespaceIdValue"
                  ];
                }

                $steps["consoleLogInlabUserNamespaceId"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return console.log(
                            `inlab_user_namespace_id: ${localStorage.getItem(
                              "inlab_user_namespace_id"
                            )}`
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["consoleLogInlabUserNamespaceId"] != null &&
                  typeof $steps["consoleLogInlabUserNamespaceId"] ===
                    "object" &&
                  typeof $steps["consoleLogInlabUserNamespaceId"].then ===
                    "function"
                ) {
                  $steps["consoleLogInlabUserNamespaceId"] = await $steps[
                    "consoleLogInlabUserNamespaceId"
                  ];
                }

                $steps["goToNamespaceSelection"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/user/setting/namespace`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToNamespaceSelection"] != null &&
                  typeof $steps["goToNamespaceSelection"] === "object" &&
                  typeof $steps["goToNamespaceSelection"].then === "function"
                ) {
                  $steps["goToNamespaceSelection"] = await $steps[
                    "goToNamespaceSelection"
                  ];
                }
              }}
            >
              <Icon3Icon
                data-plasmic-name={"hospitalIcon"}
                data-plasmic-override={overrides.hospitalIcon}
                className={classNames(projectcss.all, sty.hospitalIcon)}
                role={"img"}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"namespaceTitle"}
                data-plasmic-override={overrides.namespaceTitle}
                hasGap={true}
                className={classNames(projectcss.all, sty.namespaceTitle)}
              >
                <div
                  data-plasmic-name={"hospital2"}
                  data-plasmic-override={overrides.hospital2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.hospital2,
                    {
                      [sty.hospital2disabledLogoutButton]: hasVariant(
                        $state,
                        "disabledLogoutButton",
                        "disabledLogoutButton"
                      )
                    }
                  )}
                >
                  {"\u0628\u06cc\u0645\u0627\u0631\u0633\u062a\u0627\u0646 "}
                </div>
                <div
                  data-plasmic-name={"namespaceName"}
                  data-plasmic-override={overrides.namespaceName}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.namespaceName,
                    {
                      [sty.namespaceNamedisabledLogoutButton]: hasVariant(
                        $state,
                        "disabledLogoutButton",
                        "disabledLogoutButton"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {localStorage.getItem("inlab_user_namespace_title")}
                  </React.Fragment>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"resetPassword"}
              data-plasmic-override={overrides.resetPassword}
              hasGap={true}
              className={classNames(projectcss.all, sty.resetPassword, {
                [sty.resetPassworddisabledLogoutButton]: hasVariant(
                  $state,
                  "disabledLogoutButton",
                  "disabledLogoutButton"
                )
              })}
            >
              <Group1917Icon
                data-plasmic-name={"resetPasswordImage"}
                data-plasmic-override={overrides.resetPasswordImage}
                className={classNames(projectcss.all, sty.resetPasswordImage)}
                role={"img"}
              />

              <AntdModal
                data-plasmic-name={"changePassword"}
                data-plasmic-override={overrides.changePassword}
                className={classNames("__wab_instance", sty.changePassword)}
                closeButtonClassName={classNames({
                  [sty["pcls__psrn3OXhphL"]]: true
                })}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={true}
                modalContentClassName={classNames({
                  [sty["pcls_VyKcQQz6TGrW"]]: true
                })}
                modalScopeClassName={sty["changePassword__modal"]}
                onOpenChange={generateStateOnChangeProp($state, [
                  "changePassword",
                  "open"
                ])}
                open={generateStateValueProp($state, [
                  "changePassword",
                  "open"
                ])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lCl1
                    )}
                  >
                    {
                      "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062e\u0648\u062f \u0631\u0627 \u062a\u063a\u06cc\u06cc\u0631 \u062f\u0647\u06cc\u062f"
                    }
                  </div>
                }
                trigger={
                  <AntdButton
                    data-plasmic-name={"triggerToOpenModalButton"}
                    data-plasmic-override={overrides.triggerToOpenModalButton}
                    className={classNames(
                      "__wab_instance",
                      sty.triggerToOpenModalButton
                    )}
                    onClick={async () => {
                      const $steps = {};

                      $steps["makeFalsePasswordRepeatPasswordMismatchState"] =
                        true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "passwordRepeatPasswordMismatch"
                                  ]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps[
                          "makeFalsePasswordRepeatPasswordMismatchState"
                        ] != null &&
                        typeof $steps[
                          "makeFalsePasswordRepeatPasswordMismatchState"
                        ] === "object" &&
                        typeof $steps[
                          "makeFalsePasswordRepeatPasswordMismatchState"
                        ].then === "function"
                      ) {
                        $steps["makeFalsePasswordRepeatPasswordMismatchState"] =
                          await $steps[
                            "makeFalsePasswordRepeatPasswordMismatchState"
                          ];
                      }

                      $steps["makeFalseSuccessfulChangePassword"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["successfulChangePassword"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["makeFalseSuccessfulChangePassword"] != null &&
                        typeof $steps["makeFalseSuccessfulChangePassword"] ===
                          "object" &&
                        typeof $steps["makeFalseSuccessfulChangePassword"]
                          .then === "function"
                      ) {
                        $steps["makeFalseSuccessfulChangePassword"] =
                          await $steps["makeFalseSuccessfulChangePassword"];
                      }

                      $steps["makeFalseUnsuccessfulChangePassword"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["unsuccessfulChangePassword"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["makeFalseUnsuccessfulChangePassword"] != null &&
                        typeof $steps["makeFalseUnsuccessfulChangePassword"] ===
                          "object" &&
                        typeof $steps["makeFalseUnsuccessfulChangePassword"]
                          .then === "function"
                      ) {
                        $steps["makeFalseUnsuccessfulChangePassword"] =
                          await $steps["makeFalseUnsuccessfulChangePassword"];
                      }
                    }}
                    type={"default"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wv95T
                      )}
                    >
                      {
                        " \u062a\u063a\u06cc\u06cc\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 "
                      }
                    </div>
                  </AntdButton>
                }
                wrapClassName={classNames({ [sty["pcls_mE8Tgpm2y9Lm"]]: true })}
              >
                <div
                  data-plasmic-name={"modalContent"}
                  data-plasmic-override={overrides.modalContent}
                  className={classNames(projectcss.all, sty.modalContent)}
                >
                  <div
                    data-plasmic-name={"passwordContent"}
                    data-plasmic-override={overrides.passwordContent}
                    className={classNames(projectcss.all, sty.passwordContent)}
                  >
                    <TextInput
                      data-plasmic-name={"password"}
                      data-plasmic-override={overrides.password}
                      className={classNames("__wab_instance", sty.password)}
                      endIcon={
                        $state.value !== "" ? (
                          <Icons8CloseSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nsK2A
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["clearPasswordValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["password", "value"]
                                      },
                                      operation: 0,
                                      value: ""
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["clearPasswordValue"] != null &&
                                typeof $steps["clearPasswordValue"] ===
                                  "object" &&
                                typeof $steps["clearPasswordValue"].then ===
                                  "function"
                              ) {
                                $steps["clearPasswordValue"] = await $steps[
                                  "clearPasswordValue"
                                ];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "password",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      }
                      startIcon={null}
                      type={"password"}
                      value={
                        generateStateValueProp($state, ["password", "value"]) ??
                        ""
                      }
                    />
                  </div>
                  <div
                    data-plasmic-name={"repeatPasswordContent"}
                    data-plasmic-override={overrides.repeatPasswordContent}
                    className={classNames(
                      projectcss.all,
                      sty.repeatPasswordContent
                    )}
                  >
                    <TextInput
                      data-plasmic-name={"repeatPassword"}
                      data-plasmic-override={overrides.repeatPassword}
                      autoFocus={false}
                      className={classNames(
                        "__wab_instance",
                        sty.repeatPassword
                      )}
                      endIcon={
                        $state.value !== "" ? (
                          <Icons8CloseSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kHsuF
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["clearRepeatPasswordValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "repeatPassword",
                                          "value"
                                        ]
                                      },
                                      operation: 0,
                                      value: ""
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["clearRepeatPasswordValue"] != null &&
                                typeof $steps["clearRepeatPasswordValue"] ===
                                  "object" &&
                                typeof $steps["clearRepeatPasswordValue"]
                                  .then === "function"
                              ) {
                                $steps["clearRepeatPasswordValue"] =
                                  await $steps["clearRepeatPasswordValue"];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "repeatPassword",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f \u0631\u0627 \u0645\u062c\u062f\u062f\u0627 \u062a\u06a9\u0631\u0627\u0631 \u06a9\u0646\u06cc\u062f"
                      }
                      startIcon={null}
                      type={"password"}
                      value={
                        generateStateValueProp($state, [
                          "repeatPassword",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <Button
                    data-plasmic-name={"changePasswordButton"}
                    data-plasmic-override={overrides.changePasswordButton}
                    className={classNames(
                      "__wab_instance",
                      sty.changePasswordButton
                    )}
                    color={"blue"}
                    deselected={generateStateValueProp($state, [
                      "changePasswordButton",
                      "deselected"
                    ])}
                    isDisabled={generateStateValueProp($state, [
                      "changePasswordButton",
                      "isDisabled"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["makeFalsePasswordRepeatPasswordMismatchState"] =
                        true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "passwordRepeatPasswordMismatch"
                                  ]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps[
                          "makeFalsePasswordRepeatPasswordMismatchState"
                        ] != null &&
                        typeof $steps[
                          "makeFalsePasswordRepeatPasswordMismatchState"
                        ] === "object" &&
                        typeof $steps[
                          "makeFalsePasswordRepeatPasswordMismatchState"
                        ].then === "function"
                      ) {
                        $steps["makeFalsePasswordRepeatPasswordMismatchState"] =
                          await $steps[
                            "makeFalsePasswordRepeatPasswordMismatchState"
                          ];
                      }

                      $steps["makeFalseSuccessfulChangePassword"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["successfulChangePassword"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["makeFalseSuccessfulChangePassword"] != null &&
                        typeof $steps["makeFalseSuccessfulChangePassword"] ===
                          "object" &&
                        typeof $steps["makeFalseSuccessfulChangePassword"]
                          .then === "function"
                      ) {
                        $steps["makeFalseSuccessfulChangePassword"] =
                          await $steps["makeFalseSuccessfulChangePassword"];
                      }

                      $steps["makeFalseUnsuccessfulChangePassword"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["unsuccessfulChangePassword"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["makeFalseUnsuccessfulChangePassword"] != null &&
                        typeof $steps["makeFalseUnsuccessfulChangePassword"] ===
                          "object" &&
                        typeof $steps["makeFalseUnsuccessfulChangePassword"]
                          .then === "function"
                      ) {
                        $steps["makeFalseUnsuccessfulChangePassword"] =
                          await $steps["makeFalseUnsuccessfulChangePassword"];
                      }

                      $steps["makeTruePasswordRepeatPasswordMismatchState"] =
                        $state.password.value != $state.repeatPassword.value
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "passwordRepeatPasswordMismatch"
                                  ]
                                },
                                operation: 0,
                                value: "True"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["makeTruePasswordRepeatPasswordMismatchState"] !=
                          null &&
                        typeof $steps[
                          "makeTruePasswordRepeatPasswordMismatchState"
                        ] === "object" &&
                        typeof $steps[
                          "makeTruePasswordRepeatPasswordMismatchState"
                        ].then === "function"
                      ) {
                        $steps["makeTruePasswordRepeatPasswordMismatchState"] =
                          await $steps[
                            "makeTruePasswordRepeatPasswordMismatchState"
                          ];
                      }

                      $steps["patchUserPassword"] =
                        $state.password.value == $state.repeatPassword.value
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PATCH",
                                  `/api/v3/users/password/${$ctx.inlab_user.user.id}`,
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        password: $state.password.value
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "AuthGlobalContext.apiFetcher"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["patchUserPassword"] != null &&
                        typeof $steps["patchUserPassword"] === "object" &&
                        typeof $steps["patchUserPassword"].then === "function"
                      ) {
                        $steps["patchUserPassword"] = await $steps[
                          "patchUserPassword"
                        ];
                      }

                      $steps["consoleLogPatchUsersPasswordStatus"] = false
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return console.log(
                                  `PATCH user/password status: ${$steps.patchUserpassword?.status}`
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["consoleLogPatchUsersPasswordStatus"] != null &&
                        typeof $steps["consoleLogPatchUsersPasswordStatus"] ===
                          "object" &&
                        typeof $steps["consoleLogPatchUsersPasswordStatus"]
                          .then === "function"
                      ) {
                        $steps["consoleLogPatchUsersPasswordStatus"] =
                          await $steps["consoleLogPatchUsersPasswordStatus"];
                      }

                      $steps["makeTrueSuccessfulChangePassword"] =
                        $steps.patchUserpassword?.status === 200
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["successfulChangePassword"]
                                },
                                operation: 0,
                                value: "True"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["makeTrueSuccessfulChangePassword"] != null &&
                        typeof $steps["makeTrueSuccessfulChangePassword"] ===
                          "object" &&
                        typeof $steps["makeTrueSuccessfulChangePassword"]
                          .then === "function"
                      ) {
                        $steps["makeTrueSuccessfulChangePassword"] =
                          await $steps["makeTrueSuccessfulChangePassword"];
                      }

                      $steps["makeTrueUnsuccessfulChangePassword"] =
                        $steps.patchUserpassword.status != 200
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["unsuccessfulChangePassword"]
                                },
                                operation: 0,
                                value: "True"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["makeTrueUnsuccessfulChangePassword"] != null &&
                        typeof $steps["makeTrueUnsuccessfulChangePassword"] ===
                          "object" &&
                        typeof $steps["makeTrueUnsuccessfulChangePassword"]
                          .then === "function"
                      ) {
                        $steps["makeTrueUnsuccessfulChangePassword"] =
                          await $steps["makeTrueUnsuccessfulChangePassword"];
                      }
                    }}
                    onDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "changePasswordButton",
                        "deselected"
                      ])(eventArgs[0]);
                    }}
                    onIsDisabledChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "changePasswordButton",
                        "isDisabled"
                      ])(eventArgs[0]);
                    }}
                    onSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "changePasswordButton",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    onSortDeselectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "changePasswordButton",
                        "sortDeselected"
                      ])(eventArgs[0]);
                    }}
                    onSortSelectedChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "changePasswordButton",
                        "sortSelected"
                      ])(eventArgs[0]);
                    }}
                    selected={generateStateValueProp($state, [
                      "changePasswordButton",
                      "selected"
                    ])}
                    sortDeselected={generateStateValueProp($state, [
                      "changePasswordButton",
                      "sortDeselected"
                    ])}
                    sortSelected={generateStateValueProp($state, [
                      "changePasswordButton",
                      "sortSelected"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tlPId
                      )}
                    >
                      {
                        "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                      }
                    </div>
                  </Button>
                  {(() => {
                    try {
                      return $state.passwordRepeatPasswordMismatch;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Alert
                      data-plasmic-name={"passwordRepeatPasswordMismatch2"}
                      data-plasmic-override={
                        overrides.passwordRepeatPasswordMismatch2
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.passwordRepeatPasswordMismatch2
                      )}
                      error={true}
                      header={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9IY1
                          )}
                        >
                          {
                            "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u06cc\u06a9\u0633\u0627\u0646 \u0646\u06cc\u0633\u062a"
                          }
                        </div>
                      }
                      noBody={true}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.successfulChangePassword;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Alert
                      data-plasmic-name={"successfulChangePassword2"}
                      data-plasmic-override={
                        overrides.successfulChangePassword2
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.successfulChangePassword2
                      )}
                      header={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6O8Tn
                          )}
                        >
                          {
                            "\u062a\u063a\u06cc\u06cc\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f"
                          }
                        </div>
                      }
                      noBody={true}
                      success={true}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.unsuccessfulChangePassword;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Alert
                      data-plasmic-name={"unsuccessfulChangePassword2"}
                      data-plasmic-override={
                        overrides.unsuccessfulChangePassword2
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.unsuccessfulChangePassword2
                      )}
                      error={true}
                      header={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5HjGe
                          )}
                        >
                          {
                            "\u062a\u063a\u06cc\u06cc\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627 \u062e\u0637\u0627 \u0647\u0645\u0631\u0627\u0647 \u0634\u062f"
                          }
                        </div>
                      }
                      noBody={true}
                    />
                  ) : null}
                </div>
              </AntdModal>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"shareToolContent"}
              data-plasmic-override={overrides.shareToolContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.shareToolContent, {
                [sty.shareToolContentdisabledLogoutButton]: hasVariant(
                  $state,
                  "disabledLogoutButton",
                  "disabledLogoutButton"
                )
              })}
            >
              <ShareTool
                data-plasmic-name={"shareTool"}
                data-plasmic-override={overrides.shareTool}
                className={classNames("__wab_instance", sty.shareTool)}
              />
            </Stack__>
            <Button
              data-plasmic-name={"logoutButton"}
              data-plasmic-override={overrides.logoutButton}
              className={classNames("__wab_instance", sty.logoutButton, {
                [sty.logoutButtondisabledLogoutButton]: hasVariant(
                  $state,
                  "disabledLogoutButton",
                  "disabledLogoutButton"
                )
              })}
              color={"red"}
              deselected={generateStateValueProp($state, [
                "logoutButton",
                "deselected"
              ])}
              isDisabled={generateStateValueProp($state, [
                "logoutButton",
                "isDisabled"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["disablerLogoutButton"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "disabledLogoutButton",
                        operation: 4,
                        value: "disabledLogoutButton"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["disablerLogoutButton"] != null &&
                  typeof $steps["disablerLogoutButton"] === "object" &&
                  typeof $steps["disablerLogoutButton"].then === "function"
                ) {
                  $steps["disablerLogoutButton"] = await $steps[
                    "disablerLogoutButton"
                  ];
                }

                $steps["logoutAction"] = true
                  ? (() => {
                      const actionArgs = { args: [] };
                      return $globalActions["AuthGlobalContext.logout"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["logoutAction"] != null &&
                  typeof $steps["logoutAction"] === "object" &&
                  typeof $steps["logoutAction"].then === "function"
                ) {
                  $steps["logoutAction"] = await $steps["logoutAction"];
                }

                $steps["goToInlabLoginPage"] = !$steps.logoutAction
                  ? (() => {
                      const actionArgs = { destination: `/inlab_login` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToInlabLoginPage"] != null &&
                  typeof $steps["goToInlabLoginPage"] === "object" &&
                  typeof $steps["goToInlabLoginPage"].then === "function"
                ) {
                  $steps["goToInlabLoginPage"] = await $steps[
                    "goToInlabLoginPage"
                  ];
                }

                $steps["enablerLogoutButton"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "disabledLogoutButton",
                        operation: 6,
                        value: "disabledLogoutButton"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["enablerLogoutButton"] != null &&
                  typeof $steps["enablerLogoutButton"] === "object" &&
                  typeof $steps["enablerLogoutButton"].then === "function"
                ) {
                  $steps["enablerLogoutButton"] = await $steps[
                    "enablerLogoutButton"
                  ];
                }
              }}
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "logoutButton",
                  "deselected"
                ])(eventArgs[0]);
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "logoutButton",
                  "isDisabled"
                ])(eventArgs[0]);
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["logoutButton", "selected"])(
                  eventArgs[0]
                );
              }}
              onSortDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "logoutButton",
                  "sortDeselected"
                ])(eventArgs[0]);
              }}
              onSortSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "logoutButton",
                  "sortSelected"
                ])(eventArgs[0]);
              }}
              selected={generateStateValueProp($state, [
                "logoutButton",
                "selected"
              ])}
              shape={"rounded"}
              sortDeselected={generateStateValueProp($state, [
                "logoutButton",
                "sortDeselected"
              ])}
              sortSelected={generateStateValueProp($state, [
                "logoutButton",
                "sortSelected"
              ])}
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__fLi6W)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zjr24,
                  {
                    [sty.textdisabledLogoutButton__zjr24L5PSg]: hasVariant(
                      $state,
                      "disabledLogoutButton",
                      "disabledLogoutButton"
                    )
                  }
                )}
              >
                {hasVariant(
                  $state,
                  "disabledLogoutButton",
                  "disabledLogoutButton"
                ) ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                      }
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-jgohepLVeKvh)" }}
                    >
                      {
                        "\u062e\u0631\u0648\u062c \u0627\u0632 \u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633"
                      }
                    </span>
                  </React.Fragment>
                )}
              </div>
            </Button>
          </Stack__>
          <div
            data-plasmic-name={"homepageSwitchingTab"}
            data-plasmic-override={overrides.homepageSwitchingTab}
            className={classNames(projectcss.all, sty.homepageSwitchingTab)}
          >
            <SwitchingTab
              data-plasmic-name={"switchingTab"}
              data-plasmic-override={overrides.switchingTab}
              className={classNames("__wab_instance", sty.switchingTab)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__dqRhw)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/patients` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/icons8Home1Svg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__abpDa)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPatientProfile"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/profile/[adm_id]`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPatientProfile"] != null &&
                    typeof $steps["goToPatientProfile"] === "object" &&
                    typeof $steps["goToPatientProfile"].then === "function"
                  ) {
                    $steps["goToPatientProfile"] = await $steps[
                      "goToPatientProfile"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group2063.svg",
                  fullWidth: 18.77,
                  fullHeight: 20.34,
                  aspectRatio: 0.904762
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__pQ1Fd)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToImagingReport1"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/report/list/[adm_id]`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToImagingReport1"] != null &&
                    typeof $steps["goToImagingReport1"] === "object" &&
                    typeof $steps["goToImagingReport1"].then === "function"
                  ) {
                    $steps["goToImagingReport1"] = await $steps[
                      "goToImagingReport1"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group376.svg",
                  fullWidth: 19.424,
                  fullHeight: 19.98,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__u1C8X)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25%"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToLaboratoryData"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/patient/${(() => {
                            try {
                              return $ctx.params.code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/lab/[adm_id]`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToLaboratoryData"] != null &&
                    typeof $steps["goToLaboratoryData"] === "object" &&
                    typeof $steps["goToLaboratoryData"].then === "function"
                  ) {
                    $steps["goToLaboratoryData"] = await $steps[
                      "goToLaboratoryData"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/inlab/images/group384.svg",
                  fullWidth: 14.575,
                  fullHeight: 18.692,
                  aspectRatio: 0.789474
                }}
              />
            </SwitchingTab>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  userSetting: [
    "userSetting",
    "redirectToInlabLogin",
    "redirectToNamespaceSelection",
    "pageContent",
    "pictureAndName",
    "nameRankUsername",
    "name",
    "userRankTitle",
    "usernameValue",
    "userPicture",
    "myProfile",
    "myProfile2",
    "namespace",
    "hospitalIcon",
    "namespaceTitle",
    "hospital2",
    "namespaceName",
    "resetPassword",
    "resetPasswordImage",
    "changePassword",
    "modalContent",
    "passwordContent",
    "password",
    "repeatPasswordContent",
    "repeatPassword",
    "changePasswordButton",
    "passwordRepeatPasswordMismatch2",
    "successfulChangePassword2",
    "unsuccessfulChangePassword2",
    "triggerToOpenModalButton",
    "shareToolContent",
    "shareTool",
    "logoutButton",
    "homepageSwitchingTab",
    "switchingTab"
  ],
  redirectToInlabLogin: ["redirectToInlabLogin"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"],
  pageContent: [
    "pageContent",
    "pictureAndName",
    "nameRankUsername",
    "name",
    "userRankTitle",
    "usernameValue",
    "userPicture",
    "myProfile",
    "myProfile2",
    "namespace",
    "hospitalIcon",
    "namespaceTitle",
    "hospital2",
    "namespaceName",
    "resetPassword",
    "resetPasswordImage",
    "changePassword",
    "modalContent",
    "passwordContent",
    "password",
    "repeatPasswordContent",
    "repeatPassword",
    "changePasswordButton",
    "passwordRepeatPasswordMismatch2",
    "successfulChangePassword2",
    "unsuccessfulChangePassword2",
    "triggerToOpenModalButton",
    "shareToolContent",
    "shareTool",
    "logoutButton"
  ],
  pictureAndName: [
    "pictureAndName",
    "nameRankUsername",
    "name",
    "userRankTitle",
    "usernameValue",
    "userPicture"
  ],
  nameRankUsername: [
    "nameRankUsername",
    "name",
    "userRankTitle",
    "usernameValue"
  ],
  name: ["name"],
  userRankTitle: ["userRankTitle"],
  usernameValue: ["usernameValue"],
  userPicture: ["userPicture"],
  myProfile: ["myProfile", "myProfile2"],
  myProfile2: ["myProfile2"],
  namespace: [
    "namespace",
    "hospitalIcon",
    "namespaceTitle",
    "hospital2",
    "namespaceName"
  ],
  hospitalIcon: ["hospitalIcon"],
  namespaceTitle: ["namespaceTitle", "hospital2", "namespaceName"],
  hospital2: ["hospital2"],
  namespaceName: ["namespaceName"],
  resetPassword: [
    "resetPassword",
    "resetPasswordImage",
    "changePassword",
    "modalContent",
    "passwordContent",
    "password",
    "repeatPasswordContent",
    "repeatPassword",
    "changePasswordButton",
    "passwordRepeatPasswordMismatch2",
    "successfulChangePassword2",
    "unsuccessfulChangePassword2",
    "triggerToOpenModalButton"
  ],
  resetPasswordImage: ["resetPasswordImage"],
  changePassword: [
    "changePassword",
    "modalContent",
    "passwordContent",
    "password",
    "repeatPasswordContent",
    "repeatPassword",
    "changePasswordButton",
    "passwordRepeatPasswordMismatch2",
    "successfulChangePassword2",
    "unsuccessfulChangePassword2",
    "triggerToOpenModalButton"
  ],
  modalContent: [
    "modalContent",
    "passwordContent",
    "password",
    "repeatPasswordContent",
    "repeatPassword",
    "changePasswordButton",
    "passwordRepeatPasswordMismatch2",
    "successfulChangePassword2",
    "unsuccessfulChangePassword2"
  ],
  passwordContent: ["passwordContent", "password"],
  password: ["password"],
  repeatPasswordContent: ["repeatPasswordContent", "repeatPassword"],
  repeatPassword: ["repeatPassword"],
  changePasswordButton: ["changePasswordButton"],
  passwordRepeatPasswordMismatch2: ["passwordRepeatPasswordMismatch2"],
  successfulChangePassword2: ["successfulChangePassword2"],
  unsuccessfulChangePassword2: ["unsuccessfulChangePassword2"],
  triggerToOpenModalButton: ["triggerToOpenModalButton"],
  shareToolContent: ["shareToolContent", "shareTool"],
  shareTool: ["shareTool"],
  logoutButton: ["logoutButton"],
  homepageSwitchingTab: ["homepageSwitchingTab", "switchingTab"],
  switchingTab: ["switchingTab"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  userSetting: "div";
  redirectToInlabLogin: typeof RedirectToInlabLogin;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
  pageContent: "div";
  pictureAndName: "div";
  nameRankUsername: "div";
  name: "div";
  userRankTitle: "div";
  usernameValue: "div";
  userPicture: "svg";
  myProfile: "div";
  myProfile2: "div";
  namespace: "div";
  hospitalIcon: "svg";
  namespaceTitle: "div";
  hospital2: "div";
  namespaceName: "div";
  resetPassword: "div";
  resetPasswordImage: "svg";
  changePassword: typeof AntdModal;
  modalContent: "div";
  passwordContent: "div";
  password: typeof TextInput;
  repeatPasswordContent: "div";
  repeatPassword: typeof TextInput;
  changePasswordButton: typeof Button;
  passwordRepeatPasswordMismatch2: typeof Alert;
  successfulChangePassword2: typeof Alert;
  unsuccessfulChangePassword2: typeof Alert;
  triggerToOpenModalButton: typeof AntdButton;
  shareToolContent: "div";
  shareTool: typeof ShareTool;
  logoutButton: typeof Button;
  homepageSwitchingTab: "div";
  switchingTab: typeof SwitchingTab;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserSetting__VariantsArgs;
    args?: PlasmicUserSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUserSetting__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserSetting__ArgProps,
          internalVariantPropNames: PlasmicUserSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "userSetting") {
    func.displayName = "PlasmicUserSetting";
  } else {
    func.displayName = `PlasmicUserSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicUserSetting = Object.assign(
  // Top-level PlasmicUserSetting renders the root element
  makeNodeComponent("userSetting"),
  {
    // Helper components rendering sub-elements
    redirectToInlabLogin: makeNodeComponent("redirectToInlabLogin"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),
    pageContent: makeNodeComponent("pageContent"),
    pictureAndName: makeNodeComponent("pictureAndName"),
    nameRankUsername: makeNodeComponent("nameRankUsername"),
    _name: makeNodeComponent("name"),
    userRankTitle: makeNodeComponent("userRankTitle"),
    usernameValue: makeNodeComponent("usernameValue"),
    userPicture: makeNodeComponent("userPicture"),
    myProfile: makeNodeComponent("myProfile"),
    myProfile2: makeNodeComponent("myProfile2"),
    namespace: makeNodeComponent("namespace"),
    hospitalIcon: makeNodeComponent("hospitalIcon"),
    namespaceTitle: makeNodeComponent("namespaceTitle"),
    hospital2: makeNodeComponent("hospital2"),
    namespaceName: makeNodeComponent("namespaceName"),
    resetPassword: makeNodeComponent("resetPassword"),
    resetPasswordImage: makeNodeComponent("resetPasswordImage"),
    changePassword: makeNodeComponent("changePassword"),
    modalContent: makeNodeComponent("modalContent"),
    passwordContent: makeNodeComponent("passwordContent"),
    password: makeNodeComponent("password"),
    repeatPasswordContent: makeNodeComponent("repeatPasswordContent"),
    repeatPassword: makeNodeComponent("repeatPassword"),
    changePasswordButton: makeNodeComponent("changePasswordButton"),
    passwordRepeatPasswordMismatch2: makeNodeComponent(
      "passwordRepeatPasswordMismatch2"
    ),
    successfulChangePassword2: makeNodeComponent("successfulChangePassword2"),
    unsuccessfulChangePassword2: makeNodeComponent(
      "unsuccessfulChangePassword2"
    ),
    triggerToOpenModalButton: makeNodeComponent("triggerToOpenModalButton"),
    shareToolContent: makeNodeComponent("shareToolContent"),
    shareTool: makeNodeComponent("shareTool"),
    logoutButton: makeNodeComponent("logoutButton"),
    homepageSwitchingTab: makeNodeComponent("homepageSwitchingTab"),
    switchingTab: makeNodeComponent("switchingTab"),

    // Metadata about props expected for PlasmicUserSetting
    internalVariantProps: PlasmicUserSetting__VariantProps,
    internalArgProps: PlasmicUserSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserSetting;
/* prettier-ignore-end */
