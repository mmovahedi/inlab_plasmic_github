// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: R9dokzeL8GJy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiFetcherComponent } from "../../../utils/ApiFetcherComponent"; // plasmic-import: kxxsrihQ2d7W/codeComponent
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import SwitchingTab from "../../SwitchingTab"; // plasmic-import: 9Hr8d57xz9H9/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicConsultList.module.css"; // plasmic-import: R9dokzeL8GJy/css

import EvaArrowBackFillIcon from "./icons/PlasmicIcon__EvaArrowBackFill"; // plasmic-import: ZONZXYcpoN3U/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicConsultList__VariantMembers = {};
export type PlasmicConsultList__VariantsArgs = {};
type VariantPropType = keyof PlasmicConsultList__VariantsArgs;
export const PlasmicConsultList__VariantProps = new Array<VariantPropType>();

export type PlasmicConsultList__ArgsType = {};
type ArgPropType = keyof PlasmicConsultList__ArgsType;
export const PlasmicConsultList__ArgProps = new Array<ArgPropType>();

export type PlasmicConsultList__OverridesType = {
  consultList?: Flex__<"div">;
  header?: Flex__<"div">;
  patientDataForHeader?: Flex__<typeof ApiFetcherComponent>;
  patientNameAgeGender?: Flex__<"div">;
  pageContent?: Flex__<"div">;
  getConsult?: Flex__<typeof ApiFetcherComponent>;
  sentConsultCard?: Flex__<"div">;
  sentConsultEmergencyStatus?: Flex__<"div">;
  emergentSign?: Flex__<"div">;
  electiveSign?: Flex__<"div">;
  sentConsultContent?: Flex__<"div">;
  senderReceiver?: Flex__<"div">;
  senderReceiverService?: Flex__<"div">;
  receiverService?: Flex__<"div">;
  arrow?: Flex__<"svg">;
  senderService?: Flex__<"div">;
  senderReceiverDoctor?: Flex__<"div">;
  receiverDoctor?: Flex__<"div">;
  senderDoctor?: Flex__<"div">;
  consultSendDateRepliedStatus?: Flex__<"div">;
  consultSendDate?: Flex__<"div">;
  repliedStatus?: Flex__<"div">;
  لطفامنتطربمانید?: Flex__<"div">;
  مشاورهاییبرایبیمارثبتنشدهاست?: Flex__<"div">;
  newConsult?: Flex__<typeof Button>;
  switchingTabs?: Flex__<"div">;
  switchingTab?: Flex__<typeof SwitchingTab>;
};

export interface DefaultConsultListProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConsultList__RenderFunc(props: {
  variants: PlasmicConsultList__VariantsArgs;
  args: PlasmicConsultList__ArgsType;
  overrides: PlasmicConsultList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "newConsult.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newConsult.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newConsult.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newConsult.sortDeselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newConsult.sortSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"consultList"}
          data-plasmic-override={overrides.consultList}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.consultList
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <ApiFetcherComponent
              data-plasmic-name={"patientDataForHeader"}
              data-plasmic-override={overrides.patientDataForHeader}
              className={classNames("__wab_instance", sty.patientDataForHeader)}
              headers={(() => {
                try {
                  return {
                    "X-Namespace": localStorage.getItem(
                      "inlab_user_namespace_id"
                    )
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              method={"GET"}
              path={`/api/v2/patient/${$ctx.params.code}`}
              ref={ref => {
                $refs["patientDataForHeader"] = ref;
              }}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    data-plasmic-name={"patientNameAgeGender"}
                    data-plasmic-override={overrides.patientNameAgeGender}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.patientNameAgeGender
                    )}
                    dir={"rtl"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $ctx.fetched_data.loading == false &&
                            (() => {
                              const dob = new Date($ctx.fetched_data.data.dob);
                              const ageDiffMs = Date.now() - dob.getTime();
                              const ageDate = new Date(ageDiffMs);
                              const ageYears = Math.abs(
                                ageDate.getUTCFullYear() - 1970
                              );
                              const fullName = `${$ctx.fetched_data.data.first_name} ${$ctx.fetched_data.data.last_name}`;
                              const patientService =
                                $ctx.fetched_data.data.primary_service.name;
                              if (ageYears < 1) {
                                const ageMonths = ageDate.getUTCMonth();
                                return `${fullName} 
${ageMonths} months ${
                                  $ctx.fetched_data.data.gender === "F"
                                    ? " ♀️"
                                    : $ctx.fetched_data.data.gender === "M"
                                    ? " ♂️"
                                    : ""
                                }`;
                              } else {
                                return `${fullName} ${ageYears}${
                                  $ctx.fetched_data.data.gender === "F"
                                    ? " ♀️"
                                    : $ctx.fetched_data.data.gender === "M"
                                    ? " ♂️"
                                    : ""
                                }`;
                              }
                            })()
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          </div>
          <div
            data-plasmic-name={"pageContent"}
            data-plasmic-override={overrides.pageContent}
            className={classNames(projectcss.all, sty.pageContent)}
          >
            <ApiFetcherComponent
              data-plasmic-name={"getConsult"}
              data-plasmic-override={overrides.getConsult}
              className={classNames("__wab_instance", sty.getConsult)}
              headers={(() => {
                try {
                  return {
                    "X-Namespace": localStorage.getItem(
                      "inlab_user_namespace_id"
                    )
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              method={"GET"}
              path={`/api/v2/patient/${$ctx.params.code}/consult`}
              ref={ref => {
                $refs["getConsult"] = ref;
              }}
            >
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetched_data.data.consults;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"sentConsultCard"}
                          data-plasmic-override={overrides.sentConsultCard}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.sentConsultCard
                          )}
                          key={currentIndex}
                        >
                          <div
                            data-plasmic-name={"sentConsultEmergencyStatus"}
                            data-plasmic-override={
                              overrides.sentConsultEmergencyStatus
                            }
                            className={classNames(
                              projectcss.all,
                              sty.sentConsultEmergencyStatus
                            )}
                          >
                            {(() => {
                              try {
                                return currentItem.priority === 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"emergentSign"}
                                data-plasmic-override={overrides.emergentSign}
                                className={classNames(
                                  projectcss.all,
                                  sty.emergentSign
                                )}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return currentItem.priority === 3;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"electiveSign"}
                                data-plasmic-override={overrides.electiveSign}
                                className={classNames(
                                  projectcss.all,
                                  sty.electiveSign
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"sentConsultContent"}
                              data-plasmic-override={
                                overrides.sentConsultContent
                              }
                              className={classNames(
                                projectcss.all,
                                sty.sentConsultContent
                              )}
                            >
                              <div
                                data-plasmic-name={"senderReceiver"}
                                data-plasmic-override={overrides.senderReceiver}
                                className={classNames(
                                  projectcss.all,
                                  sty.senderReceiver
                                )}
                              >
                                <div
                                  data-plasmic-name={"senderReceiverService"}
                                  data-plasmic-override={
                                    overrides.senderReceiverService
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.senderReceiverService
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"receiverService"}
                                    data-plasmic-override={
                                      overrides.receiverService
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.receiverService
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.consultant_service
                                            .name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <EvaArrowBackFillIcon
                                    data-plasmic-name={"arrow"}
                                    data-plasmic-override={overrides.arrow}
                                    className={classNames(
                                      projectcss.all,
                                      sty.arrow
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"senderService"}
                                    data-plasmic-override={
                                      overrides.senderService
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.senderService
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem
                                            .effective_patient_service.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  data-plasmic-name={"senderReceiverDoctor"}
                                  data-plasmic-override={
                                    overrides.senderReceiverDoctor
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.senderReceiverDoctor
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"receiverDoctor"}
                                    data-plasmic-override={
                                      overrides.receiverDoctor
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.receiverDoctor
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "دکتر" +
                                            " " +
                                            currentItem.suggested_consultant
                                              .first_name +
                                            " " +
                                            currentItem.suggested_consultant
                                              .last_name
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    data-plasmic-name={"senderDoctor"}
                                    data-plasmic-override={
                                      overrides.senderDoctor
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.senderDoctor
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "دکتر" +
                                            " " +
                                            currentItem.requester.first_name +
                                            " " +
                                            currentItem.requester.last_name
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={
                                  "consultSendDateRepliedStatus"
                                }
                                data-plasmic-override={
                                  overrides.consultSendDateRepliedStatus
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.consultSendDateRepliedStatus
                                )}
                              >
                                <div
                                  data-plasmic-name={"consultSendDate"}
                                  data-plasmic-override={
                                    overrides.consultSendDate
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.consultSendDate
                                  )}
                                  dir={"rtl"}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const gregorianDate = new Date(
                                            currentItem.effective_request_datetime
                                          );
                                          const shamsiDate =
                                            new Intl.DateTimeFormat(
                                              "fa-IR"
                                            ).format(gregorianDate);
                                          const shamsiTime =
                                            gregorianDate.toLocaleTimeString(
                                              "fa-IR",
                                              { hour12: false }
                                            );
                                          const englishDate =
                                            shamsiDate.replace(/[۰-۹]/g, d =>
                                              String.fromCharCode(
                                                d.charCodeAt(0) - 1728
                                              )
                                            );
                                          const englishTime =
                                            shamsiTime.replace(/[۰-۹]/g, d =>
                                              String.fromCharCode(
                                                d.charCodeAt(0) - 1728
                                              )
                                            );
                                          return `${englishTime} ${englishDate} :ارسال`;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return currentItem.paper_reply;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"repliedStatus"}
                                    data-plasmic-override={
                                      overrides.repliedStatus
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.repliedStatus
                                    )}
                                  >
                                    {
                                      "\u067e\u0627\u0633\u062e \u062f\u0627\u062f\u0647 \u0634\u062f\u0647"
                                    }
                                  </div>
                                ) : null}
                              </div>
                            </div>
                          </div>
                        </Stack__>
                      );
                    })}
                    {(() => {
                      try {
                        return $ctx.fetched_data.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={
                          "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0637\u0631\u0628\u0645\u0627\u0646\u06cc\u062f"
                        }
                        data-plasmic-override={overrides.لطفامنتطربمانید}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.لطفامنتطربمانید
                        )}
                      >
                        {
                          "\u0644\u0637\u0641\u0627 \u0645\u0646\u062a\u0637\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                        }
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $ctx.fetched_data.loading === false &&
                          $ctx.fetched_data.data.consults == ""
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={
                          "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u0628\u0631\u0627\u06cc\u0628\u06cc\u0645\u0627\u0631\u062b\u0628\u062a\u0646\u0634\u062f\u0647\u0627\u0633\u062a"
                        }
                        data-plasmic-override={
                          overrides.مشاورهاییبرایبیمارثبتنشدهاست
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.مشاورهاییبرایبیمارثبتنشدهاست
                        )}
                      >
                        {
                          "\u0645\u0634\u0627\u0648\u0631\u0647 \u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u0628\u06cc\u0645\u0627\u0631 \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
                        }
                      </div>
                    ) : null}
                  </React.Fragment>
                )}
              </DataCtxReader__>
            </ApiFetcherComponent>
          </div>
          <Button
            data-plasmic-name={"newConsult"}
            data-plasmic-override={overrides.newConsult}
            className={classNames("__wab_instance", sty.newConsult)}
            color={"blue"}
            deselected={generateStateValueProp($state, [
              "newConsult",
              "deselected"
            ])}
            isDisabled={generateStateValueProp($state, [
              "newConsult",
              "isDisabled"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["goToConsultSend"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/consult-send/[code]/${(() => {
                        try {
                          return $ctx.params.adm_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToConsultSend"] != null &&
                typeof $steps["goToConsultSend"] === "object" &&
                typeof $steps["goToConsultSend"].then === "function"
              ) {
                $steps["goToConsultSend"] = await $steps["goToConsultSend"];
              }
            }}
            onDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["newConsult", "deselected"])(
                eventArgs[0]
              );
            }}
            onIsDisabledChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["newConsult", "isDisabled"])(
                eventArgs[0]
              );
            }}
            onSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["newConsult", "selected"])(
                eventArgs[0]
              );
            }}
            onSortDeselectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "newConsult",
                "sortDeselected"
              ])(eventArgs[0]);
            }}
            onSortSelectedChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["newConsult", "sortSelected"])(
                eventArgs[0]
              );
            }}
            selected={generateStateValueProp($state, [
              "newConsult",
              "selected"
            ])}
            shape={"rounded"}
            sortDeselected={generateStateValueProp($state, [
              "newConsult",
              "sortDeselected"
            ])}
            sortSelected={generateStateValueProp($state, [
              "newConsult",
              "sortSelected"
            ])}
          >
            {
              "\u062b\u0628\u062a \u0645\u0634\u0627\u0648\u0631\u0647 \u062c\u062f\u06cc\u062f"
            }
          </Button>
          <div
            data-plasmic-name={"switchingTabs"}
            data-plasmic-override={overrides.switchingTabs}
            className={classNames(projectcss.all, sty.switchingTabs)}
          >
            <SwitchingTab
              data-plasmic-name={"switchingTab"}
              data-plasmic-override={overrides.switchingTab}
              className={classNames("__wab_instance", sty.switchingTab)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  consultList: [
    "consultList",
    "header",
    "patientDataForHeader",
    "patientNameAgeGender",
    "pageContent",
    "getConsult",
    "sentConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0637\u0631\u0628\u0645\u0627\u0646\u06cc\u062f",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u0628\u0631\u0627\u06cc\u0628\u06cc\u0645\u0627\u0631\u062b\u0628\u062a\u0646\u0634\u062f\u0647\u0627\u0633\u062a",
    "newConsult",
    "switchingTabs",
    "switchingTab"
  ],
  header: ["header", "patientDataForHeader", "patientNameAgeGender"],
  patientDataForHeader: ["patientDataForHeader", "patientNameAgeGender"],
  patientNameAgeGender: ["patientNameAgeGender"],
  pageContent: [
    "pageContent",
    "getConsult",
    "sentConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0637\u0631\u0628\u0645\u0627\u0646\u06cc\u062f",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u0628\u0631\u0627\u06cc\u0628\u06cc\u0645\u0627\u0631\u062b\u0628\u062a\u0646\u0634\u062f\u0647\u0627\u0633\u062a"
  ],
  getConsult: [
    "getConsult",
    "sentConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus",
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0637\u0631\u0628\u0645\u0627\u0646\u06cc\u062f",
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u0628\u0631\u0627\u06cc\u0628\u06cc\u0645\u0627\u0631\u062b\u0628\u062a\u0646\u0634\u062f\u0647\u0627\u0633\u062a"
  ],
  sentConsultCard: [
    "sentConsultCard",
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus"
  ],
  sentConsultEmergencyStatus: [
    "sentConsultEmergencyStatus",
    "emergentSign",
    "electiveSign",
    "sentConsultContent",
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus"
  ],
  emergentSign: ["emergentSign"],
  electiveSign: ["electiveSign"],
  sentConsultContent: [
    "sentConsultContent",
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor",
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus"
  ],
  senderReceiver: [
    "senderReceiver",
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService",
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor"
  ],
  senderReceiverService: [
    "senderReceiverService",
    "receiverService",
    "arrow",
    "senderService"
  ],
  receiverService: ["receiverService"],
  arrow: ["arrow"],
  senderService: ["senderService"],
  senderReceiverDoctor: [
    "senderReceiverDoctor",
    "receiverDoctor",
    "senderDoctor"
  ],
  receiverDoctor: ["receiverDoctor"],
  senderDoctor: ["senderDoctor"],
  consultSendDateRepliedStatus: [
    "consultSendDateRepliedStatus",
    "consultSendDate",
    "repliedStatus"
  ],
  consultSendDate: ["consultSendDate"],
  repliedStatus: ["repliedStatus"],
  لطفامنتطربمانید: [
    "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0637\u0631\u0628\u0645\u0627\u0646\u06cc\u062f"
  ],
  مشاورهاییبرایبیمارثبتنشدهاست: [
    "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u0628\u0631\u0627\u06cc\u0628\u06cc\u0645\u0627\u0631\u062b\u0628\u062a\u0646\u0634\u062f\u0647\u0627\u0633\u062a"
  ],
  newConsult: ["newConsult"],
  switchingTabs: ["switchingTabs", "switchingTab"],
  switchingTab: ["switchingTab"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  consultList: "div";
  header: "div";
  patientDataForHeader: typeof ApiFetcherComponent;
  patientNameAgeGender: "div";
  pageContent: "div";
  getConsult: typeof ApiFetcherComponent;
  sentConsultCard: "div";
  sentConsultEmergencyStatus: "div";
  emergentSign: "div";
  electiveSign: "div";
  sentConsultContent: "div";
  senderReceiver: "div";
  senderReceiverService: "div";
  receiverService: "div";
  arrow: "svg";
  senderService: "div";
  senderReceiverDoctor: "div";
  receiverDoctor: "div";
  senderDoctor: "div";
  consultSendDateRepliedStatus: "div";
  consultSendDate: "div";
  repliedStatus: "div";
  لطفامنتطربمانید: "div";
  مشاورهاییبرایبیمارثبتنشدهاست: "div";
  newConsult: typeof Button;
  switchingTabs: "div";
  switchingTab: typeof SwitchingTab;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsultList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsultList__VariantsArgs;
    args?: PlasmicConsultList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsultList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicConsultList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConsultList__ArgProps,
          internalVariantPropNames: PlasmicConsultList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConsultList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "consultList") {
    func.displayName = "PlasmicConsultList";
  } else {
    func.displayName = `PlasmicConsultList.${nodeName}`;
  }
  return func;
}

export const PlasmicConsultList = Object.assign(
  // Top-level PlasmicConsultList renders the root element
  makeNodeComponent("consultList"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    patientDataForHeader: makeNodeComponent("patientDataForHeader"),
    patientNameAgeGender: makeNodeComponent("patientNameAgeGender"),
    pageContent: makeNodeComponent("pageContent"),
    getConsult: makeNodeComponent("getConsult"),
    sentConsultCard: makeNodeComponent("sentConsultCard"),
    sentConsultEmergencyStatus: makeNodeComponent("sentConsultEmergencyStatus"),
    emergentSign: makeNodeComponent("emergentSign"),
    electiveSign: makeNodeComponent("electiveSign"),
    sentConsultContent: makeNodeComponent("sentConsultContent"),
    senderReceiver: makeNodeComponent("senderReceiver"),
    senderReceiverService: makeNodeComponent("senderReceiverService"),
    receiverService: makeNodeComponent("receiverService"),
    arrow: makeNodeComponent("arrow"),
    senderService: makeNodeComponent("senderService"),
    senderReceiverDoctor: makeNodeComponent("senderReceiverDoctor"),
    receiverDoctor: makeNodeComponent("receiverDoctor"),
    senderDoctor: makeNodeComponent("senderDoctor"),
    consultSendDateRepliedStatus: makeNodeComponent(
      "consultSendDateRepliedStatus"
    ),
    consultSendDate: makeNodeComponent("consultSendDate"),
    repliedStatus: makeNodeComponent("repliedStatus"),
    لطفامنتطربمانید: makeNodeComponent(
      "\u0644\u0637\u0641\u0627\u0645\u0646\u062a\u0637\u0631\u0628\u0645\u0627\u0646\u06cc\u062f"
    ),
    مشاورهاییبرایبیمارثبتنشدهاست: makeNodeComponent(
      "\u0645\u0634\u0627\u0648\u0631\u0647\u0627\u06cc\u06cc\u0628\u0631\u0627\u06cc\u0628\u06cc\u0645\u0627\u0631\u062b\u0628\u062a\u0646\u0634\u062f\u0647\u0627\u0633\u062a"
    ),
    newConsult: makeNodeComponent("newConsult"),
    switchingTabs: makeNodeComponent("switchingTabs"),
    switchingTab: makeNodeComponent("switchingTab"),

    // Metadata about props expected for PlasmicConsultList
    internalVariantProps: PlasmicConsultList__VariantProps,
    internalArgProps: PlasmicConsultList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConsultList;
/* prettier-ignore-end */
