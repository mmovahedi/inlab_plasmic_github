// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: X347FgRZh6HH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NewFeatureBanner from "../../NewFeatureBanner"; // plasmic-import: 3tcwCShdS0g0/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicNewNoticeBanner.module.css"; // plasmic-import: X347FgRZh6HH/css

createPlasmicElementProxy;

export type PlasmicNewNoticeBanner__VariantMembers = {};
export type PlasmicNewNoticeBanner__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewNoticeBanner__VariantsArgs;
export const PlasmicNewNoticeBanner__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNewNoticeBanner__ArgsType = {
  newNoticeDatetime?: string;
};
type ArgPropType = keyof PlasmicNewNoticeBanner__ArgsType;
export const PlasmicNewNoticeBanner__ArgProps = new Array<ArgPropType>(
  "newNoticeDatetime"
);

export type PlasmicNewNoticeBanner__OverridesType = {
  root?: Flex__<typeof NewFeatureBanner>;
  text?: Flex__<"div">;
};

export interface DefaultNewNoticeBannerProps {
  newNoticeDatetime?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewNoticeBanner__RenderFunc(props: {
  variants: PlasmicNewNoticeBanner__VariantsArgs;
  args: PlasmicNewNoticeBanner__ArgsType;
  overrides: PlasmicNewNoticeBanner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          newNoticeDatetime: "22/05/1403"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <NewFeatureBanner
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      newVersionDatetime2={args.newNoticeDatetime}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
        dir={"rtl"}
      >
        <React.Fragment>
          <React.Fragment>
            {
              "\u0628\u0647 \u062f\u0644\u06cc\u0644 \u06cc\u06a9 \u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u0632\u06cc\u0631\u0633\u0627\u062e\u062a\u06cc \u062f\u0631 \u0627\u06cc\u0646\u0644\u0628\u060c \n\n\u0645\u0648\u0642\u062a\u0627 \u062c\u0633\u062a \u0648 \u062c\u0648 "
            }
          </React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700 }}
          >
            {
              "\u0635\u0631\u0641\u0627 \u0628\u0627 \u00ab\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc\u00bb\u060c \u00ab\u06a9\u062f\u0645\u0644\u06cc\u00bb \u0648 \u06cc\u0627 \u00ab\u06a9\u062f \u067e\u0630\u06cc\u0631\u0634\u00bb "
            }
          </span>
          <React.Fragment>
            {
              "\u0627\u0645\u06a9\u0627\u0646 \u067e\u0630\u06cc\u0631 \u0627\u0633\u062a\n\n"
            }
          </React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700 }}
          >
            {"\u0645\u0648\u0642\u062a\u0627 \u0627\u0632 \u00ab"}
          </span>
          <React.Fragment>{""}</React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700, textDecorationLine: "underline" }}
          >
            {"\u0646\u0627\u0645"}
          </span>
          <React.Fragment>{""}</React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700 }}
          >
            {
              "\u00bb \u062f\u0631 \u0633\u0631\u0686 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 "
            }
          </span>
          <React.Fragment>{""}</React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700, textDecorationLine: "underline" }}
          >
            {"\u0646\u06a9\u0646\u06cc\u062f"}
          </span>
          <React.Fragment>
            {
              "\n\n\u0627\u0632 \u0628\u0627\u0628\u062a \u0628\u0631\u0648\u0632 \u0627\u06cc\u0646 \u0645\u0634\u06a9\u0644 \u0645\u062a\u0623\u0633\u0641\u06cc\u0645\ud83d\ude4f \u062a\u06cc\u0645 \u0633\u06cc\u0646\u0627\u067e\u0633 \u062f\u0631 \u062d\u0627\u0644 \u062a\u0644\u0627\u0634 \u0628\u0631\u0627\u06cc \u0631\u0641\u0639 \u0633\u0631\u06cc\u0639\u062a\u0631 \u0645\u0634\u06a9\u0644 \u0647\u0633\u062a\u0646\u062f"
            }
          </React.Fragment>
        </React.Fragment>
      </div>
    </NewFeatureBanner>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof NewFeatureBanner;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewNoticeBanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewNoticeBanner__VariantsArgs;
    args?: PlasmicNewNoticeBanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewNoticeBanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewNoticeBanner__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewNoticeBanner__ArgProps,
          internalVariantPropNames: PlasmicNewNoticeBanner__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewNoticeBanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewNoticeBanner";
  } else {
    func.displayName = `PlasmicNewNoticeBanner.${nodeName}`;
  }
  return func;
}

export const PlasmicNewNoticeBanner = Object.assign(
  // Top-level PlasmicNewNoticeBanner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicNewNoticeBanner
    internalVariantProps: PlasmicNewNoticeBanner__VariantProps,
    internalArgProps: PlasmicNewNoticeBanner__ArgProps
  }
);

export default PlasmicNewNoticeBanner;
/* prettier-ignore-end */
