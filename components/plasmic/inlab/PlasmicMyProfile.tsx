// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: 8o6xzPLlyVTQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: WB4OwDxc51ck/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: IoZvAstVrNqa/component
import RedirectToLoginPage from "../../RedirectToLoginPage"; // plasmic-import: 0wFpBWYaqpsM/component
import RedirectToNamespaceSelection from "../../RedirectToNamespaceSelection"; // plasmic-import: aXAcva2etiX1/component

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicMyProfile.module.css"; // plasmic-import: 8o6xzPLlyVTQ/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: YIqBWKHX3AVs/icon
import Icons8ClosesvgIcon from "./icons/PlasmicIcon__Icons8Closesvg"; // plasmic-import: -xG_spDBispP/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I6pxicA96WJm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vsUaT3pPwdP4/icon

createPlasmicElementProxy;

export type PlasmicMyProfile__VariantMembers = {};
export type PlasmicMyProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyProfile__VariantsArgs;
export const PlasmicMyProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicMyProfile__ArgsType = {};
type ArgPropType = keyof PlasmicMyProfile__ArgsType;
export const PlasmicMyProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicMyProfile__OverridesType = {
  myProfile?: Flex__<"div">;
  note?: Flex__<"div">;
  picsAndName?: Flex__<"div">;
  name?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  firstName?: Flex__<"div">;
  firstName2?: Flex__<"div">;
  نام?: Flex__<typeof TextInput>;
  lastName?: Flex__<"div">;
  lastName2?: Flex__<"div">;
  نامخانواد?: Flex__<typeof TextInput>;
  email?: Flex__<"div">;
  email2?: Flex__<"div">;
  امل?: Flex__<typeof TextInput>;
  عسروفال?: Flex__<"div">;
  email4?: Flex__<"div">;
  عسروفال2?: Flex__<typeof UploadWrapper>;
  button?: Flex__<typeof AntdButton>;
  save?: Flex__<typeof Button>;
  redirectToLoginPage?: Flex__<typeof RedirectToLoginPage>;
  redirectToNamespaceSelection?: Flex__<typeof RedirectToNamespaceSelection>;
};

export interface DefaultMyProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMyProfile__RenderFunc(props: {
  variants: PlasmicMyProfile__VariantsArgs;
  args: PlasmicMyProfile__ArgsType;
  overrides: PlasmicMyProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "نام.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.inlab_user?.user?.first_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "نامخانواد.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.inlab_user?.user?.last_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "امل.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.inlab_user?.user?.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "عسروفال2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "save.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "save.selected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "save.deselected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMyProfile.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMyProfile.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMyProfile.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"myProfile"}
          data-plasmic-override={overrides.myProfile}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.myProfile
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__wr82L)}>
            <div
              data-plasmic-name={"note"}
              data-plasmic-override={overrides.note}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.note
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u0631\u0627 \u06a9\u0647 \u0645\u0627\u06cc\u0644\u06cc\u062f \u0647\u0645\u06a9\u0627\u0631\u0627\u0646\u200c\u0627\u062a\u0627\u0646 \u0627\u0632 \u0634\u0645\u0627 \u0645\u0634\u0627\u0647\u062f\u0647 \u06a9\u0646\u0646\u062f\u060c \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <div
              data-plasmic-name={"picsAndName"}
              data-plasmic-override={overrides.picsAndName}
              className={classNames(projectcss.all, sty.picsAndName)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__twhAz)}
              >
                <div
                  data-plasmic-name={"name"}
                  data-plasmic-override={overrides.name}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.name
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const output =
                            $ctx.inlab_user &&
                            $ctx.inlab_user?.user?.first_name +
                              " " +
                              $ctx.inlab_user?.user?.last_name;
                          return output !== null ? output : "undefined";
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Undefined";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cfKVc
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.inlab_user.user.rank.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Undefined";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__umlbM
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.inlab_user.user.username;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Undefined";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"61px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/inlab/images/image3.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"firstName"}
              data-plasmic-override={overrides.firstName}
              hasGap={true}
              className={classNames(projectcss.all, sty.firstName)}
            >
              <div
                data-plasmic-name={"firstName2"}
                data-plasmic-override={overrides.firstName2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.firstName2
                )}
              >
                {"\u0646\u0627\u0645"}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.نام),
                  onChange: (...eventArgs) => {
                    generateStateOnChangeProp($state, ["نام", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  },
                  placeholder: (() => {
                    try {
                      return "نام خود را وارد کنید";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  type: (() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "text";
                      }
                      throw e;
                    }
                  })(),
                  value: generateStateValueProp($state, ["نام", "value"]) ?? ""
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "نام.value",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $ctx.inlab_user?.user?.first_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <TextInput
                    data-plasmic-name={"\u0646\u0627\u0645"}
                    data-plasmic-override={overrides.نام}
                    {...child$Props}
                  />
                );
              })()}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"lastName"}
              data-plasmic-override={overrides.lastName}
              hasGap={true}
              className={classNames(projectcss.all, sty.lastName)}
            >
              <div
                data-plasmic-name={"lastName2"}
                data-plasmic-override={overrides.lastName2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.lastName2
                )}
              >
                {
                  "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                }
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.نامخانواد),
                  onChange: (...eventArgs) => {
                    generateStateOnChangeProp($state, ["نامخانواد", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  },
                  placeholder: (() => {
                    try {
                      return "نام خانوادگی خود را وارد کنید";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  type: "text",
                  value:
                    generateStateValueProp($state, ["نامخانواد", "value"]) ?? ""
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "نامخانواد.value",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $ctx.inlab_user?.user?.last_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <TextInput
                    data-plasmic-name={
                      "\u0646\u0627\u0645\u062e\u0627\u0646\u0648\u0627\u062f"
                    }
                    data-plasmic-override={overrides.نامخانواد}
                    {...child$Props}
                  />
                );
              })()}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"email"}
              data-plasmic-override={overrides.email}
              hasGap={true}
              className={classNames(projectcss.all, sty.email)}
            >
              <div
                data-plasmic-name={"email2"}
                data-plasmic-override={overrides.email2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.email2
                )}
              >
                {"\u0627\u06cc\u0645\u06cc\u0644"}
              </div>
              {(() => {
                const child$Props = {
                  autoFocus: false,
                  className: classNames("__wab_instance", sty.امل),
                  onChange: (...eventArgs) => {
                    generateStateOnChangeProp($state, ["امل", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  },
                  placeholder: (() => {
                    try {
                      return "ایمیل خود را وارد کنید";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  type: "email",
                  value: generateStateValueProp($state, ["امل", "value"]) ?? ""
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "امل.value",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $ctx.inlab_user?.user?.email;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <TextInput
                    data-plasmic-name={"\u0627\u0645\u0644"}
                    data-plasmic-override={overrides.امل}
                    {...child$Props}
                  />
                );
              })()}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"\u0639\u0633\u0631\u0648\u0641\u0627\u0644"}
              data-plasmic-override={overrides.عسروفال}
              hasGap={true}
              className={classNames(projectcss.all, sty.عسروفال)}
            >
              <div
                data-plasmic-name={"email4"}
                data-plasmic-override={overrides.email4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.email4
                )}
              >
                {
                  "\u0639\u06a9\u0633 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                }
              </div>
              <UploadWrapper
                data-plasmic-name={
                  "\u0639\u0633\u0631\u0648\u0641\u0627\u06442"
                }
                data-plasmic-override={overrides.عسروفال2}
                accept={"image/*"}
                className={classNames("__wab_instance", sty.عسروفال2)}
                files={generateStateValueProp($state, ["عسروفال2", "files"])}
                listType={"picture"}
                maxCount={1}
                onFilesChange={generateStateOnChangeProp($state, [
                  "عسروفال2",
                  "files"
                ])}
                showUploadList={true}
              >
                <AntdButton
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__okgW4
                    )}
                  >
                    {"Upload"}
                  </div>
                </AntdButton>
              </UploadWrapper>
            </Stack__>
            <Button
              data-plasmic-name={"save"}
              data-plasmic-override={overrides.save}
              className={classNames("__wab_instance", sty.save)}
              color={"blue"}
              deselected={generateStateValueProp($state, [
                "save",
                "deselected"
              ])}
              isDisabled={generateStateValueProp($state, [
                "save",
                "isDisabled"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PUT",
                          (() => {
                            try {
                              return `/user/${$ctx.inlab_user?.user?.id}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return ``;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          {
                            first_name: "\u0645\u062c\u06cc\u062f",
                            last_name: "\u0633\u0645\u06cc\u0639\u06cc"
                          }
                        ]
                      };
                      return $globalActions[
                        "AuthGlobalContext.apiFetcher"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              onDeselectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["save", "deselected"])(
                  eventArgs[0]
                );
              }}
              onIsDisabledChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["save", "isDisabled"])(
                  eventArgs[0]
                );
              }}
              onSelectedChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["save", "selected"])(
                  eventArgs[0]
                );
              }}
              selected={generateStateValueProp($state, ["save", "selected"])}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mDyKf
                )}
              >
                {"Save"}
              </div>
            </Button>
          </div>
          <RedirectToLoginPage
            data-plasmic-name={"redirectToLoginPage"}
            data-plasmic-override={overrides.redirectToLoginPage}
            className={classNames("__wab_instance", sty.redirectToLoginPage)}
          />

          <RedirectToNamespaceSelection
            data-plasmic-name={"redirectToNamespaceSelection"}
            data-plasmic-override={overrides.redirectToNamespaceSelection}
            className={classNames(
              "__wab_instance",
              sty.redirectToNamespaceSelection
            )}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  myProfile: [
    "myProfile",
    "note",
    "picsAndName",
    "name",
    "img",
    "firstName",
    "firstName2",
    "\u0646\u0627\u0645",
    "lastName",
    "lastName2",
    "\u0646\u0627\u0645\u062e\u0627\u0646\u0648\u0627\u062f",
    "email",
    "email2",
    "\u0627\u0645\u0644",
    "\u0639\u0633\u0631\u0648\u0641\u0627\u0644",
    "email4",
    "\u0639\u0633\u0631\u0648\u0641\u0627\u06442",
    "button",
    "save",
    "redirectToLoginPage",
    "redirectToNamespaceSelection"
  ],
  note: ["note"],
  picsAndName: ["picsAndName", "name", "img"],
  name: ["name"],
  img: ["img"],
  firstName: ["firstName", "firstName2", "\u0646\u0627\u0645"],
  firstName2: ["firstName2"],
  نام: ["\u0646\u0627\u0645"],
  lastName: [
    "lastName",
    "lastName2",
    "\u0646\u0627\u0645\u062e\u0627\u0646\u0648\u0627\u062f"
  ],
  lastName2: ["lastName2"],
  نامخانواد: ["\u0646\u0627\u0645\u062e\u0627\u0646\u0648\u0627\u062f"],
  email: ["email", "email2", "\u0627\u0645\u0644"],
  email2: ["email2"],
  امل: ["\u0627\u0645\u0644"],
  عسروفال: [
    "\u0639\u0633\u0631\u0648\u0641\u0627\u0644",
    "email4",
    "\u0639\u0633\u0631\u0648\u0641\u0627\u06442",
    "button"
  ],
  email4: ["email4"],
  عسروفال2: ["\u0639\u0633\u0631\u0648\u0641\u0627\u06442", "button"],
  button: ["button"],
  save: ["save"],
  redirectToLoginPage: ["redirectToLoginPage"],
  redirectToNamespaceSelection: ["redirectToNamespaceSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  myProfile: "div";
  note: "div";
  picsAndName: "div";
  name: "div";
  img: typeof PlasmicImg__;
  firstName: "div";
  firstName2: "div";
  نام: typeof TextInput;
  lastName: "div";
  lastName2: "div";
  نامخانواد: typeof TextInput;
  email: "div";
  email2: "div";
  امل: typeof TextInput;
  عسروفال: "div";
  email4: "div";
  عسروفال2: typeof UploadWrapper;
  button: typeof AntdButton;
  save: typeof Button;
  redirectToLoginPage: typeof RedirectToLoginPage;
  redirectToNamespaceSelection: typeof RedirectToNamespaceSelection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyProfile__VariantsArgs;
    args?: PlasmicMyProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMyProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMyProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMyProfile__ArgProps,
          internalVariantPropNames: PlasmicMyProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "myProfile") {
    func.displayName = "PlasmicMyProfile";
  } else {
    func.displayName = `PlasmicMyProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicMyProfile = Object.assign(
  // Top-level PlasmicMyProfile renders the root element
  makeNodeComponent("myProfile"),
  {
    // Helper components rendering sub-elements
    note: makeNodeComponent("note"),
    picsAndName: makeNodeComponent("picsAndName"),
    _name: makeNodeComponent("name"),
    img: makeNodeComponent("img"),
    firstName: makeNodeComponent("firstName"),
    firstName2: makeNodeComponent("firstName2"),
    نام: makeNodeComponent("\u0646\u0627\u0645"),
    lastName: makeNodeComponent("lastName"),
    lastName2: makeNodeComponent("lastName2"),
    نامخانواد: makeNodeComponent(
      "\u0646\u0627\u0645\u062e\u0627\u0646\u0648\u0627\u062f"
    ),
    email: makeNodeComponent("email"),
    email2: makeNodeComponent("email2"),
    امل: makeNodeComponent("\u0627\u0645\u0644"),
    عسروفال: makeNodeComponent("\u0639\u0633\u0631\u0648\u0641\u0627\u0644"),
    email4: makeNodeComponent("email4"),
    عسروفال2: makeNodeComponent("\u0639\u0633\u0631\u0648\u0641\u0627\u06442"),
    button: makeNodeComponent("button"),
    save: makeNodeComponent("save"),
    redirectToLoginPage: makeNodeComponent("redirectToLoginPage"),
    redirectToNamespaceSelection: makeNodeComponent(
      "redirectToNamespaceSelection"
    ),

    // Metadata about props expected for PlasmicMyProfile
    internalVariantProps: PlasmicMyProfile__VariantProps,
    internalArgProps: PlasmicMyProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "myprofile",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMyProfile;
/* prettier-ignore-end */
