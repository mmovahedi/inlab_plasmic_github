// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wjafXWEvDytFogT7SiMy2v
// Component: B3T4IwC_PpNX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsjEqVmdAbnKYc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jEqVmdAbnKYc/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_inlab.module.css"; // plasmic-import: wjafXWEvDytFogT7SiMy2v/projectcss
import sty from "./PlasmicShareTool.module.css"; // plasmic-import: B3T4IwC_PpNX/css

import ShareSvgrepoComsvgIcon from "./icons/PlasmicIcon__ShareSvgrepoComsvg"; // plasmic-import: 5tIBWi0zESLM/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicShareTool__VariantMembers = {
  copyToClipboardAnnouncement: "copyToClipboardAnnouncement";
};
export type PlasmicShareTool__VariantsArgs = {
  copyToClipboardAnnouncement?: SingleBooleanChoiceArg<"copyToClipboardAnnouncement">;
};
type VariantPropType = keyof PlasmicShareTool__VariantsArgs;
export const PlasmicShareTool__VariantProps = new Array<VariantPropType>(
  "copyToClipboardAnnouncement"
);

export type PlasmicShareTool__ArgsType = {};
type ArgPropType = keyof PlasmicShareTool__ArgsType;
export const PlasmicShareTool__ArgProps = new Array<ArgPropType>();

export type PlasmicShareTool__OverridesType = {
  shareContent?: Flex__<"div">;
  text?: Flex__<"div">;
  inlabPlusLinkShare2?: Flex__<"svg">;
};

export interface DefaultShareToolProps {
  copyToClipboardAnnouncement?: SingleBooleanChoiceArg<"copyToClipboardAnnouncement">;
  className?: string;
}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShareTool__RenderFunc(props: {
  variants: PlasmicShareTool__VariantsArgs;
  args: PlasmicShareTool__ArgsType;
  overrides: PlasmicShareTool__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "copyToClipboardAnnouncement",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.copyToClipboardAnnouncement
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjEqVmdAbnKYc()
  });

  return (
    <div
      data-plasmic-name={"shareContent"}
      data-plasmic-override={overrides.shareContent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.shareContent,
        {
          [sty.shareContentcopyToClipboardAnnouncement]: hasVariant(
            $state,
            "copyToClipboardAnnouncement",
            "copyToClipboardAnnouncement"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["inlabPlusLinkCopyToClipboard"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return $$.copyToClipboard(
                    "ðŸ¤© InLab plus link: https://synapps.tums.ac.ir/new_inlab/\n\nðŸ¥‡ Ù¾Ø²Ø´Ú© Ø¹Ø²ÛŒØ²Ø› Ø´Ù…Ø§ ØªÙˆØ³Ø· Ù‡Ù…Ú©Ø§Ø±ØªÙˆÙ† Ø¨Ù‡ Ø§ÛŒÙ†Ù„Ø¨ Ù¾Ù„Ø§Ø³ Ø¯Ø¹ÙˆØª Ø´Ø¯ÛŒØ¯\n\nðŸ¥³ Ø§Ø² Ù‡Ø± Ø¬Ø§ÛŒÛŒ Ú©Ù‡ Ù‡Ø³ØªÛŒØ¯ Ø¨Ù‡ Ø§Ø·Ù„Ø§Ø¹Ø§Øª Ø¨ÛŒÙ…Ø§Ø± Ø¨Ø³ØªØ±ÛŒ ØªÙˆÙ† Ø¯Ø³ØªØ±Ø³ÛŒ Ø¯Ø§Ø´ØªÙ‡ Ø¨Ø§Ø´ÛŒØ¯\n\nðŸ˜Š Ø­Ø³Ø§Ø¨ Ú©Ø§Ø±Ø¨Ø±ÛŒ Ø´Ù…Ø§ Ø¯Ø± Ø§ÛŒÙ†Ù„Ø¨ Ù¾Ù„Ø§Ø³ Ù‡Ù…ÙˆÙ† Ø­Ø³Ø§Ø¨ Ú©Ø§Ø±Ø¨Ø±ÛŒ ØªÙˆÙ† Ø¯Ø± Ø§ÛŒÙ†Ù„Ø¨ Ø§Ø³Øª"
                  );
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["inlabPlusLinkCopyToClipboard"] != null &&
          typeof $steps["inlabPlusLinkCopyToClipboard"] === "object" &&
          typeof $steps["inlabPlusLinkCopyToClipboard"].then === "function"
        ) {
          $steps["inlabPlusLinkCopyToClipboard"] = await $steps[
            "inlabPlusLinkCopyToClipboard"
          ];
        }

        $steps["updateCopyToClipboardAnnouncement"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "copyToClipboardAnnouncement",
                operation: 2,
                value: "copyToClipboardAnnouncement"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateCopyToClipboardAnnouncement"] != null &&
          typeof $steps["updateCopyToClipboardAnnouncement"] === "object" &&
          typeof $steps["updateCopyToClipboardAnnouncement"].then === "function"
        ) {
          $steps["updateCopyToClipboardAnnouncement"] = await $steps[
            "updateCopyToClipboardAnnouncement"
          ];
        }
      }}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textcopyToClipboardAnnouncement]: hasVariant(
            $state,
            "copyToClipboardAnnouncement",
            "copyToClipboardAnnouncement"
          )
        })}
      >
        {hasVariant(
          $state,
          "copyToClipboardAnnouncement",
          "copyToClipboardAnnouncement"
        )
          ? "\u0644\u06cc\u0646\u06a9 \u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633 \u06a9\u067e\u06cc \u0634\u062f"
          : "\ufeff\u0627\u06cc\u0646\u0644\u0628 \u067e\u0644\u0627\u0633 \u0631\u0648 \u0628\u0647 \u0647\u0645\u06a9\u0627\u0631\u0627\u0646\u062a\u0648\u0646 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u062f"}
      </div>
      <ShareSvgrepoComsvgIcon
        data-plasmic-name={"inlabPlusLinkShare2"}
        data-plasmic-override={overrides.inlabPlusLinkShare2}
        className={classNames(projectcss.all, sty.inlabPlusLinkShare2)}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  shareContent: ["shareContent", "text", "inlabPlusLinkShare2"],
  text: ["text"],
  inlabPlusLinkShare2: ["inlabPlusLinkShare2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  shareContent: "div";
  text: "div";
  inlabPlusLinkShare2: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShareTool__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShareTool__VariantsArgs;
    args?: PlasmicShareTool__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShareTool__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShareTool__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShareTool__ArgProps,
          internalVariantPropNames: PlasmicShareTool__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShareTool__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "shareContent") {
    func.displayName = "PlasmicShareTool";
  } else {
    func.displayName = `PlasmicShareTool.${nodeName}`;
  }
  return func;
}

export const PlasmicShareTool = Object.assign(
  // Top-level PlasmicShareTool renders the root element
  makeNodeComponent("shareContent"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    inlabPlusLinkShare2: makeNodeComponent("inlabPlusLinkShare2"),

    // Metadata about props expected for PlasmicShareTool
    internalVariantProps: PlasmicShareTool__VariantProps,
    internalArgProps: PlasmicShareTool__ArgProps
  }
);

export default PlasmicShareTool;
/* prettier-ignore-end */
